{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiroCanvas = ({\n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = p => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [{\n        name: \"Neon Mirage\",\n        colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"],\n        rarity: \"Common\"\n      }, {\n        name: \"Digital Dream\",\n        colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"],\n        rarity: \"Uncommon\"\n      }, {\n        name: \"Crystal Sunset\",\n        colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"],\n        rarity: \"Rare\"\n      }, {\n        name: \"Cyber Haze\",\n        colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"],\n        rarity: \"Super Rare\"\n      }, {\n        name: \"Pastel Vapor\",\n        colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"],\n        rarity: \"Legendary\"\n      }];\n\n      // Shape rarity distribution - updated with new rarity levels\n      const shapeRarity = {\n        \"Lissajous\": \"Common\",\n        // 40% (was Super Rare)\n        \"Epitrochoid\": \"Uncommon\",\n        // 30% (unchanged)\n        \"Hypotrochoid\": \"Rare\",\n        // 20% (was Common)\n        \"Rhodonea\": \"Super Rare\",\n        // 8% (was Rare)\n        \"OrganicFlow\": \"Legendary\" // 2% (new type!)\n      };\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let startColorIndex = 0;\n      let endColorIndex = 1;\n      let colorTransition = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n\n      // Capture frames for animation (if needed)\n      let frames = [];\n\n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Lissajous - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Epitrochoid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Hypotrochoid - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // Rhodonea - Super Rare 8%\n        } else {\n          shapeIndex = 4; // OrganicFlow - Legendary 2%\n        }\n        params = {}; // Reset params\n\n        switch (shapeIndex) {\n          case 0:\n            // Lissajous (now Common)\n            shapeType = \"Lissajous\";\n            params.A = p.random(200, 350);\n            params.B = p.random(200, 350);\n            params.a = p.int(p.random(3, 7));\n            params.b = p.int(p.random(3, 7));\n            params.delta = p.random(0, p.PI);\n\n            // Find cycle length\n            const lcm = params.a * params.b / findGCD(params.a, params.b);\n            maxT = p.TWO_PI * lcm;\n            break;\n          case 1:\n            // Epitrochoid (remains Uncommon)\n            shapeType = \"Epitrochoid\";\n            params.R = p.random(200, 300);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(80, 160);\n            const gcd2 = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd2);\n            break;\n          case 2:\n            // Hypotrochoid (now Rare)\n            shapeType = \"Hypotrochoid\";\n            params.R = p.random(250, 400);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(100, 180);\n            const gcd = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd);\n            break;\n          case 3:\n            // Rhodonea (now Super Rare)\n            shapeType = \"Rhodonea\";\n            params.k = p.int(p.random(4, 9));\n            maxT = params.k % 2 === 0 ? p.TWO_PI : p.PI;\n            break;\n          case 4:\n            // OrganicFlow (new Legendary type)\n            shapeType = \"OrganicFlow\";\n            params.complexity = p.random(0.5, 2.5);\n            params.speed = p.random(0.01, 0.05);\n            params.waves = p.int(p.random(3, 7));\n            params.amplitude = p.random(100, 250);\n            params.noiseScale = p.random(0.005, 0.02);\n\n            // These need longer time to develop\n            maxT = p.TWO_PI * 20;\n            break;\n        }\n\n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 10);\n        rarityText = shapeRarity[shapeType];\n\n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: {\n            ...params\n          }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        p.background(0);\n        p.randomSeed(currentSeed);\n\n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        p.strokeWeight(1.5);\n        p.noFill();\n\n        // Reset drawing variables\n        frames = [];\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        startColorIndex = 0;\n        endColorIndex = 1;\n        colorTransition = 0;\n\n        // Pick a shape type\n        selectShapeType();\n\n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n\n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function () {\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n\n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n\n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function () {\n        // Clear canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n        p.push();\n        p.translate(p.width / 2, p.height / 2);\n\n        // Add rotation\n        let fullRotationAngle = t / maxT * p.TWO_PI;\n        p.rotate(fullRotationAngle);\n\n        // Gradient between colors\n        let startCol = p.color(palette.colors[startColorIndex]);\n        let endCol = p.color(palette.colors[endColorIndex]);\n        currentColor = p.lerpColor(startCol, endCol, colorTransition);\n        p.stroke(currentColor);\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch (shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r1) * p.cos(t) + params.d * p.cos((params.R - params.r1) / params.r1 * t);\n            y = (params.R - params.r1) * p.sin(t) - params.d * p.sin((params.R - params.r1) / params.r1 * t);\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r1) * p.cos(t) - params.d * p.cos((params.R + params.r1) / params.r1 * t);\n            y = (params.R + params.r1) * p.sin(t) - params.d * p.sin((params.R + params.r1) / params.r1 * t);\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = 250 * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n            break;\n          case \"OrganicFlow\":\n            // Create organic, flowing amoeba-like patterns\n            // Using perlin noise for organic movement\n            let baseRadius = 150;\n            let noiseTime = t * params.speed;\n\n            // Create multiple wave layers with perlin noise\n            let radius = baseRadius;\n            for (let i = 0; i < params.waves; i++) {\n              let noiseFactor = p.noise(p.cos(t + i) * params.noiseScale, p.sin(t + i) * params.noiseScale, noiseTime);\n              radius += p.sin(t * (i + 1) * params.complexity) * params.amplitude * noiseFactor;\n            }\n\n            // Convert to x,y coordinates\n            x = radius * p.cos(t);\n            y = radius * p.sin(t);\n\n            // Add some variation to make it more organic\n            x += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n            y += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n            break;\n        }\n\n        // Apply scaling effects\n        let scaleFactor = 1 + 0.1 * p.sin(t * 0.5);\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment\n        if (prevX !== null) {\n          p.line(prevX, prevY, x, y);\n        }\n\n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n\n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n\n          // Re-calculate based on shape type with updated t\n          switch (shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r1) * p.cos(t) + params.d * p.cos((params.R - params.r1) / params.r1 * t);\n              nextY = (params.R - params.r1) * p.sin(t) - params.d * p.sin((params.R - params.r1) / params.r1 * t);\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r1) * p.cos(t) - params.d * p.cos((params.R + params.r1) / params.r1 * t);\n              nextY = (params.R + params.r1) * p.sin(t) - params.d * p.sin((params.R + params.r1) / params.r1 * t);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n              break;\n            case \"OrganicFlow\":\n              // Create organic, flowing amoeba-like patterns for this step\n              let baseRadius = 150;\n              let noiseTime = t * params.speed;\n\n              // Create multiple wave layers with perlin noise\n              let radius = baseRadius;\n              for (let i = 0; i < params.waves; i++) {\n                let noiseFactor = p.noise(p.cos(t + i) * params.noiseScale, p.sin(t + i) * params.noiseScale, noiseTime);\n                radius += p.sin(t * (i + 1) * params.complexity) * params.amplitude * noiseFactor;\n              }\n\n              // Convert to x,y coordinates\n              nextX = radius * p.cos(t);\n              nextY = radius * p.sin(t);\n\n              // Add some variation to make it more organic\n              nextX += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n              nextY += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n              break;\n          }\n\n          // Apply scaling effects\n          let scaleFactor = 1 + 0.1 * p.sin(t * 0.5);\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n\n          // Draw the line\n          p.line(prevX, prevY, nextX, nextY);\n\n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n\n        // Capture frame for animation (every 5th frame to keep file size reasonable)\n        if (p.frameCount % 5 === 0) {\n          frames.push(p.get());\n        }\n\n        // Increment time\n        t += 0.015;\n\n        // Update global rotation\n        globalAngle = t / maxT * p.TWO_PI;\n\n        // Update progress\n        const currentProgress = Math.min(100, Math.round(t / maxT * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n\n        // Gradually transition color\n        colorTransition += 0.003;\n        if (colorTransition >= 1) {\n          startColorIndex = endColorIndex;\n          endColorIndex = (endColorIndex + 1) % palette.colors.length;\n          colorTransition = 0;\n        }\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n\n          // Notify parent that drawing is complete\n          const finalImage = p.get();\n          onDrawingComplete && onDrawingComplete(finalImage, frames);\n        }\n        p.pop();\n      };\n\n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n\n      // Change to a specific seed\n      p.setSeed = newSeed => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n\n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  // Method to generate a new seed\n  const generateNewSeed = () => {\n    if (p5Instance.current && p5Instance.current.generateNewSeed) {\n      p5Instance.current.generateNewSeed();\n    }\n  };\n\n  // Method to set a specific seed\n  const setSeedValue = newSeed => {\n    if (p5Instance.current && p5Instance.current.setSeed) {\n      p5Instance.current.setSeed(newSeed);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spiro-canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: canvasRef,\n      className: \"canvas-wrapper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 7\n    }, this), isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"progress-text\",\n        children: [progress, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 9\n    }, this), !isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-complete\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Drawing complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 455,\n    columnNumber: 5\n  }, this);\n};\n_s(SpiroCanvas, \"vG581M3D6HIZspCQRmOO1WkIWxY=\");\n_c = SpiroCanvas;\nexport default SpiroCanvas;\nvar _c;\n$RefreshReg$(_c, \"SpiroCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","p5","jsxDEV","_jsxDEV","SpiroCanvas","seed","setSeed","onShapeChange","onPaletteChange","onDrawingComplete","_s","canvasRef","p5Instance","isDrawing","setIsDrawing","progress","setProgress","sketch","p","palettes","name","colors","rarity","shapeRarity","shapeType","params","palette","currentColor","t","maxT","prevX","prevY","globalAngle","startColorIndex","endColorIndex","colorTransition","rarityText","currentSeed","Math","floor","random","frames","findGCD","a","b","round","selectShapeType","shapeRoll","shapeIndex","A","B","int","delta","PI","lcm","TWO_PI","R","r1","d","gcd2","gcd","k","complexity","speed","waves","amplitude","noiseScale","max","type","resetSketch","background","randomSeed","paletteRoll","strokeWeight","noFill","console","log","isLooping","loop","setup","canvas","createCanvas","style","frameRate","strokeJoin","ROUND","strokeCap","draw","frameCount","push","translate","width","height","fullRotationAngle","rotate","startCol","color","endCol","lerpColor","stroke","x","y","cos","sin","rhodoneaRadius","baseRadius","noiseTime","radius","i","noiseFactor","noise","scaleFactor","line","stepsPerFrame","nextX","nextY","get","currentProgress","min","length","noLoop","finalImage","pop","generateNewSeed","newSeed","current","remove","setSeedValue","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\n\nconst SpiroCanvas = ({ \n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = (p) => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [\n        {name: \"Neon Mirage\", colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"], rarity: \"Common\"},\n        {name: \"Digital Dream\", colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"], rarity: \"Uncommon\"},\n        {name: \"Crystal Sunset\", colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"], rarity: \"Rare\"},\n        {name: \"Cyber Haze\", colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"], rarity: \"Super Rare\"},\n        {name: \"Pastel Vapor\", colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"], rarity: \"Legendary\"}\n      ];\n\n      // Shape rarity distribution - updated with new rarity levels\n      const shapeRarity = {\n        \"Lissajous\": \"Common\", // 40% (was Super Rare)\n        \"Epitrochoid\": \"Uncommon\", // 30% (unchanged)\n        \"Hypotrochoid\": \"Rare\", // 20% (was Common)\n        \"Rhodonea\": \"Super Rare\", // 8% (was Rare)\n        \"OrganicFlow\": \"Legendary\" // 2% (new type!)\n      };\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let startColorIndex = 0;\n      let endColorIndex = 1;\n      let colorTransition = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n      \n      // Capture frames for animation (if needed)\n      let frames = [];\n      \n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        \n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Lissajous - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Epitrochoid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Hypotrochoid - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // Rhodonea - Super Rare 8%\n        } else {\n          shapeIndex = 4; // OrganicFlow - Legendary 2%\n        }\n        \n        params = {}; // Reset params\n        \n        switch(shapeIndex) {\n          case 0: // Lissajous (now Common)\n            shapeType = \"Lissajous\";\n            params.A = p.random(200, 350);\n            params.B = p.random(200, 350);\n            params.a = p.int(p.random(3, 7));\n            params.b = p.int(p.random(3, 7));\n            params.delta = p.random(0, p.PI);\n            \n            // Find cycle length\n            const lcm = (params.a * params.b) / findGCD(params.a, params.b);\n            maxT = p.TWO_PI * lcm;\n            break;\n            \n          case 1: // Epitrochoid (remains Uncommon)\n            shapeType = \"Epitrochoid\";\n            params.R = p.random(200, 300);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(80, 160);\n            \n            const gcd2 = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd2);\n            break;\n            \n          case 2: // Hypotrochoid (now Rare)\n            shapeType = \"Hypotrochoid\";\n            params.R = p.random(250, 400);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(100, 180);\n            \n            const gcd = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd);\n            break;\n            \n          case 3: // Rhodonea (now Super Rare)\n            shapeType = \"Rhodonea\";\n            params.k = p.int(p.random(4, 9));\n            \n            maxT = (params.k % 2 === 0) ? p.TWO_PI : p.PI;\n            break;\n            \n          case 4: // OrganicFlow (new Legendary type)\n            shapeType = \"OrganicFlow\";\n            params.complexity = p.random(0.5, 2.5);\n            params.speed = p.random(0.01, 0.05);\n            params.waves = p.int(p.random(3, 7));\n            params.amplitude = p.random(100, 250);\n            params.noiseScale = p.random(0.005, 0.02);\n            \n            // These need longer time to develop\n            maxT = p.TWO_PI * 20;\n            break;\n        }\n        \n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 10);\n        \n        rarityText = shapeRarity[shapeType];\n        \n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: { ...params }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        p.background(0);\n        p.randomSeed(currentSeed);\n        \n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        \n        p.strokeWeight(1.5);\n        p.noFill();\n        \n        // Reset drawing variables\n        frames = [];\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        startColorIndex = 0;\n        endColorIndex = 1;\n        colorTransition = 0;\n        \n        // Pick a shape type\n        selectShapeType();\n        \n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        \n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n        \n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        \n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function() {\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        \n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n        \n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n        \n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function() {\n        // Clear canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n        \n        p.push();\n        p.translate(p.width / 2, p.height / 2);\n        \n        // Add rotation\n        let fullRotationAngle = (t / maxT) * p.TWO_PI;\n        p.rotate(fullRotationAngle);\n        \n        // Gradient between colors\n        let startCol = p.color(palette.colors[startColorIndex]);\n        let endCol = p.color(palette.colors[endColorIndex]);\n        currentColor = p.lerpColor(startCol, endCol, colorTransition);\n        p.stroke(currentColor);\n\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch(shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r1) * p.cos(t) + params.d * p.cos(((params.R - params.r1) / params.r1) * t);\n            y = (params.R - params.r1) * p.sin(t) - params.d * p.sin(((params.R - params.r1) / params.r1) * t);\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r1) * p.cos(t) - params.d * p.cos(((params.R + params.r1) / params.r1) * t);\n            y = (params.R + params.r1) * p.sin(t) - params.d * p.sin(((params.R + params.r1) / params.r1) * t);\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = 250 * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n            break;\n          case \"OrganicFlow\":\n            // Create organic, flowing amoeba-like patterns\n            // Using perlin noise for organic movement\n            let baseRadius = 150;\n            let noiseTime = t * params.speed;\n            \n            // Create multiple wave layers with perlin noise\n            let radius = baseRadius;\n            for (let i = 0; i < params.waves; i++) {\n              let noiseFactor = p.noise(\n                p.cos(t + i) * params.noiseScale, \n                p.sin(t + i) * params.noiseScale, \n                noiseTime\n              );\n              radius += p.sin(t * (i+1) * params.complexity) * params.amplitude * noiseFactor;\n            }\n            \n            // Convert to x,y coordinates\n            x = radius * p.cos(t);\n            y = radius * p.sin(t);\n            \n            // Add some variation to make it more organic\n            x += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n            y += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n            break;\n        }\n\n        // Apply scaling effects\n        let scaleFactor = 1 + 0.1 * p.sin(t * 0.5);\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment\n        if (prevX !== null) {\n          p.line(prevX, prevY, x, y);\n        }\n        \n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n          \n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n          \n          // Re-calculate based on shape type with updated t\n          switch(shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r1) * p.cos(t) + params.d * p.cos(((params.R - params.r1) / params.r1) * t);\n              nextY = (params.R - params.r1) * p.sin(t) - params.d * p.sin(((params.R - params.r1) / params.r1) * t);\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r1) * p.cos(t) - params.d * p.cos(((params.R + params.r1) / params.r1) * t);\n              nextY = (params.R + params.r1) * p.sin(t) - params.d * p.sin(((params.R + params.r1) / params.r1) * t);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n              break;\n            case \"OrganicFlow\":\n              // Create organic, flowing amoeba-like patterns for this step\n              let baseRadius = 150;\n              let noiseTime = t * params.speed;\n              \n              // Create multiple wave layers with perlin noise\n              let radius = baseRadius;\n              for (let i = 0; i < params.waves; i++) {\n                let noiseFactor = p.noise(\n                  p.cos(t + i) * params.noiseScale, \n                  p.sin(t + i) * params.noiseScale, \n                  noiseTime\n                );\n                radius += p.sin(t * (i+1) * params.complexity) * params.amplitude * noiseFactor;\n              }\n              \n              // Convert to x,y coordinates\n              nextX = radius * p.cos(t);\n              nextY = radius * p.sin(t);\n              \n              // Add some variation to make it more organic\n              nextX += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n              nextY += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n              break;\n          }\n          \n          // Apply scaling effects\n          let scaleFactor = 1 + 0.1 * p.sin(t * 0.5);\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n          \n          // Draw the line\n          p.line(prevX, prevY, nextX, nextY);\n          \n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n        \n        // Capture frame for animation (every 5th frame to keep file size reasonable)\n        if (p.frameCount % 5 === 0) {\n          frames.push(p.get());\n        }\n        \n        // Increment time\n        t += 0.015;\n        \n        // Update global rotation\n        globalAngle = (t / maxT) * p.TWO_PI;\n        \n        // Update progress\n        const currentProgress = Math.min(100, Math.round((t / maxT) * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n        \n        // Gradually transition color\n        colorTransition += 0.003;\n        if (colorTransition >= 1) {\n          startColorIndex = endColorIndex;\n          endColorIndex = (endColorIndex + 1) % palette.colors.length;\n          colorTransition = 0;\n        }\n\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n          \n          // Notify parent that drawing is complete\n          const finalImage = p.get();\n          onDrawingComplete && onDrawingComplete(finalImage, frames);\n        }\n        \n        p.pop();\n      };\n      \n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n      \n      // Change to a specific seed\n      p.setSeed = (newSeed) => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n    \n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  // Method to generate a new seed\n  const generateNewSeed = () => {\n    if (p5Instance.current && p5Instance.current.generateNewSeed) {\n      p5Instance.current.generateNewSeed();\n    }\n  };\n\n  // Method to set a specific seed\n  const setSeedValue = (newSeed) => {\n    if (p5Instance.current && p5Instance.current.setSeed) {\n      p5Instance.current.setSeed(newSeed);\n    }\n  };\n\n  return (\n    <div className=\"spiro-canvas-container\">\n      <div ref={canvasRef} className=\"canvas-wrapper\"></div>\n      {isDrawing && (\n        <div className=\"progress-bar-container\">\n          <div className=\"progress-bar\" style={{ width: `${progress}%` }}></div>\n          <span className=\"progress-text\">{progress}%</span>\n        </div>\n      )}\n      {!isDrawing && (\n        <div className=\"canvas-complete\">\n          <span>Drawing complete!</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpiroCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}