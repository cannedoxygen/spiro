{"ast":null,"code":"// src/services/nftService.js\n\n// Get the set of minted seeds\nexport const getMintedSeeds = () => {\n  try {\n    const mintedSeeds = JSON.parse(localStorage.getItem('mintedSeeds')) || [];\n    return new Set(mintedSeeds);\n  } catch (error) {\n    console.error('Error loading minted seeds:', error);\n    return new Set();\n  }\n};\n\n// Check if a seed is available\nexport const isSeedAvailable = seed => {\n  const mintedSeeds = getMintedSeeds();\n  return !mintedSeeds.has(seed);\n};\n\n// Reserve a seed (mark it as minted)\nexport const reserveSeed = seed => {\n  try {\n    const mintedSeeds = Array.from(getMintedSeeds());\n\n    // Check if we've reached the limit\n    if (mintedSeeds.length >= 10000) {\n      return {\n        success: false,\n        message: \"All 10,000 designs have been minted!\"\n      };\n    }\n\n    // Check if the seed is already minted\n    if (mintedSeeds.includes(seed)) {\n      return {\n        success: false,\n        message: \"This design has already been minted!\"\n      };\n    }\n\n    // Add the seed to the minted list\n    mintedSeeds.push(seed);\n    localStorage.setItem('mintedSeeds', JSON.stringify(mintedSeeds));\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Error reserving seed:', error);\n    return {\n      success: false,\n      message: \"Error reserving seed\"\n    };\n  }\n};\n\n// Get the count of minted NFTs\nexport const getMintedCount = () => {\n  const mintedSeeds = getMintedSeeds();\n  return mintedSeeds.size;\n};\n\n// Find an available seed\nexport const findAvailableSeed = () => {\n  const mintedSeeds = getMintedSeeds();\n\n  // If all 10,000 are minted, return null\n  if (mintedSeeds.size >= 10000) {\n    return null;\n  }\n\n  // Try to find an available seed\n  let attempts = 0;\n  while (attempts < 100) {\n    const randomSeed = Math.floor(Math.random() * 10000) + 1;\n    if (!mintedSeeds.has(randomSeed)) {\n      return randomSeed;\n    }\n    attempts++;\n  }\n\n  // If we couldn't find a random one, search sequentially\n  for (let i = 1; i <= 10000; i++) {\n    if (!mintedSeeds.has(i)) {\n      return i;\n    }\n  }\n  return null; // Should never reach here if we check size first\n};","map":{"version":3,"names":["getMintedSeeds","mintedSeeds","JSON","parse","localStorage","getItem","Set","error","console","isSeedAvailable","seed","has","reserveSeed","Array","from","length","success","message","includes","push","setItem","stringify","getMintedCount","size","findAvailableSeed","attempts","randomSeed","Math","floor","random","i"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/services/nftService.js"],"sourcesContent":["// src/services/nftService.js\n\n// Get the set of minted seeds\nexport const getMintedSeeds = () => {\n  try {\n    const mintedSeeds = JSON.parse(localStorage.getItem('mintedSeeds')) || [];\n    return new Set(mintedSeeds);\n  } catch (error) {\n    console.error('Error loading minted seeds:', error);\n    return new Set();\n  }\n};\n\n// Check if a seed is available\nexport const isSeedAvailable = (seed) => {\n  const mintedSeeds = getMintedSeeds();\n  return !mintedSeeds.has(seed);\n};\n\n// Reserve a seed (mark it as minted)\nexport const reserveSeed = (seed) => {\n  try {\n    const mintedSeeds = Array.from(getMintedSeeds());\n    \n    // Check if we've reached the limit\n    if (mintedSeeds.length >= 10000) {\n      return { success: false, message: \"All 10,000 designs have been minted!\" };\n    }\n    \n    // Check if the seed is already minted\n    if (mintedSeeds.includes(seed)) {\n      return { success: false, message: \"This design has already been minted!\" };\n    }\n    \n    // Add the seed to the minted list\n    mintedSeeds.push(seed);\n    localStorage.setItem('mintedSeeds', JSON.stringify(mintedSeeds));\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Error reserving seed:', error);\n    return { success: false, message: \"Error reserving seed\" };\n  }\n};\n\n// Get the count of minted NFTs\nexport const getMintedCount = () => {\n  const mintedSeeds = getMintedSeeds();\n  return mintedSeeds.size;\n};\n\n// Find an available seed\nexport const findAvailableSeed = () => {\n  const mintedSeeds = getMintedSeeds();\n  \n  // If all 10,000 are minted, return null\n  if (mintedSeeds.size >= 10000) {\n    return null;\n  }\n  \n  // Try to find an available seed\n  let attempts = 0;\n  while (attempts < 100) {\n    const randomSeed = Math.floor(Math.random() * 10000) + 1;\n    if (!mintedSeeds.has(randomSeed)) {\n      return randomSeed;\n    }\n    attempts++;\n  }\n  \n  // If we couldn't find a random one, search sequentially\n  for (let i = 1; i <= 10000; i++) {\n    if (!mintedSeeds.has(i)) {\n      return i;\n    }\n  }\n  \n  return null; // Should never reach here if we check size first\n};"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,cAAc,GAAGA,CAAA,KAAM;EAClC,IAAI;IACF,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,EAAE;IACzE,OAAO,IAAIC,GAAG,CAACL,WAAW,CAAC;EAC7B,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,IAAID,GAAG,CAAC,CAAC;EAClB;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,eAAe,GAAIC,IAAI,IAAK;EACvC,MAAMT,WAAW,GAAGD,cAAc,CAAC,CAAC;EACpC,OAAO,CAACC,WAAW,CAACU,GAAG,CAACD,IAAI,CAAC;AAC/B,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAIF,IAAI,IAAK;EACnC,IAAI;IACF,MAAMT,WAAW,GAAGY,KAAK,CAACC,IAAI,CAACd,cAAc,CAAC,CAAC,CAAC;;IAEhD;IACA,IAAIC,WAAW,CAACc,MAAM,IAAI,KAAK,EAAE;MAC/B,OAAO;QAAEC,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAuC,CAAC;IAC5E;;IAEA;IACA,IAAIhB,WAAW,CAACiB,QAAQ,CAACR,IAAI,CAAC,EAAE;MAC9B,OAAO;QAAEM,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAuC,CAAC;IAC5E;;IAEA;IACAhB,WAAW,CAACkB,IAAI,CAACT,IAAI,CAAC;IACtBN,YAAY,CAACgB,OAAO,CAAC,aAAa,EAAElB,IAAI,CAACmB,SAAS,CAACpB,WAAW,CAAC,CAAC;IAEhE,OAAO;MAAEe,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO;MAAES,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAuB,CAAC;EAC5D;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,cAAc,GAAGA,CAAA,KAAM;EAClC,MAAMrB,WAAW,GAAGD,cAAc,CAAC,CAAC;EACpC,OAAOC,WAAW,CAACsB,IAAI;AACzB,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EACrC,MAAMvB,WAAW,GAAGD,cAAc,CAAC,CAAC;;EAEpC;EACA,IAAIC,WAAW,CAACsB,IAAI,IAAI,KAAK,EAAE;IAC7B,OAAO,IAAI;EACb;;EAEA;EACA,IAAIE,QAAQ,GAAG,CAAC;EAChB,OAAOA,QAAQ,GAAG,GAAG,EAAE;IACrB,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC;IACxD,IAAI,CAAC5B,WAAW,CAACU,GAAG,CAACe,UAAU,CAAC,EAAE;MAChC,OAAOA,UAAU;IACnB;IACAD,QAAQ,EAAE;EACZ;;EAEA;EACA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,KAAK,EAAEA,CAAC,EAAE,EAAE;IAC/B,IAAI,CAAC7B,WAAW,CAACU,GAAG,CAACmB,CAAC,CAAC,EAAE;MACvB,OAAOA,CAAC;IACV;EACF;EAEA,OAAO,IAAI,CAAC,CAAC;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}