{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiroCanvas = ({\n  fixedRadius = 150,\n  movingRadius = 40,\n  offset = 80,\n  strokeWeight = 2,\n  strokeColor = '#e3262e',\n  isRecording = false,\n  onAnimationComplete = () => {}\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [pattern, setPattern] = useState([]);\n  const [animationFrames, setAnimationFrames] = useState([]);\n  const [t, setT] = useState(0);\n\n  // Calculate GCD for finding the pattern period\n  const calculateGCD = (a, b) => {\n    a = Math.round(a);\n    b = Math.round(b);\n    return b ? calculateGCD(b, a % b) : a;\n  };\n\n  // Animation loop\n  useEffect(() => {\n    if (!canvasRef.current || !isDrawing) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n\n    // Calculate how many steps to complete the pattern\n    const R = fixedRadius;\n    const r = movingRadius;\n    const d = offset;\n    const gcd = calculateGCD(R, r);\n    const steps = r / gcd * (2 * Math.PI);\n\n    // Animation frame function\n    const draw = () => {\n      if (t > steps) {\n        setIsDrawing(false);\n        onAnimationComplete(animationFrames);\n        return;\n      }\n\n      // Calculate new point using parametric equations for hypotrochoid\n      const x = (R - r) * Math.cos(t) + d * Math.cos((R - r) / r * t);\n      const y = (R - r) * Math.sin(t) + d * Math.sin((R - r) / r * t);\n\n      // Center in canvas\n      const centerX = width / 2 + x;\n      const centerY = height / 2 + y;\n\n      // Add point to pattern\n      const newPattern = [...pattern, {\n        x: centerX,\n        y: centerY\n      }];\n      setPattern(newPattern);\n\n      // Draw line segment\n      if (pattern.length > 0) {\n        ctx.beginPath();\n        ctx.moveTo(pattern[pattern.length - 1].x, pattern[pattern.length - 1].y);\n        ctx.lineTo(centerX, centerY);\n        ctx.strokeStyle = strokeColor;\n        ctx.lineWidth = strokeWeight;\n        ctx.stroke();\n      }\n\n      // Record frame if in recording mode\n      if (isRecording) {\n        setAnimationFrames(prev => [...prev, canvas.toDataURL('image/png')]);\n      }\n\n      // Increment t\n      setT(t + 0.02);\n    };\n    const animationId = requestAnimationFrame(draw);\n    return () => cancelAnimationFrame(animationId);\n  }, [t, pattern, isDrawing, fixedRadius, movingRadius, offset, strokeWeight, strokeColor, isRecording]);\n\n  // Initialize canvas\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Clear canvas and reset state\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    setPattern([]);\n    setT(0);\n    setIsDrawing(true);\n    setAnimationFrames([]);\n  }, [fixedRadius, movingRadius, offset, strokeWeight, strokeColor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spiro-canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 600,\n      height: 600,\n      className: \"spiro-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), !isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-complete\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Drawing complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(SpiroCanvas, \"HKIcXmE5UpTrJVqYYmmYUsF1iQM=\");\n_c = SpiroCanvas;\nexport default SpiroCanvas;\nvar _c;\n$RefreshReg$(_c, \"SpiroCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","SpiroCanvas","fixedRadius","movingRadius","offset","strokeWeight","strokeColor","isRecording","onAnimationComplete","_s","canvasRef","isDrawing","setIsDrawing","pattern","setPattern","animationFrames","setAnimationFrames","t","setT","calculateGCD","a","b","Math","round","current","canvas","ctx","getContext","width","height","R","r","d","gcd","steps","PI","draw","x","cos","y","sin","centerX","centerY","newPattern","length","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","prev","toDataURL","animationId","requestAnimationFrame","cancelAnimationFrame","clearRect","fillStyle","fillRect","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport '../styles/components.css';\n\nconst SpiroCanvas = ({ \n  fixedRadius = 150,\n  movingRadius = 40,\n  offset = 80,\n  strokeWeight = 2,\n  strokeColor = '#e3262e',\n  isRecording = false,\n  onAnimationComplete = () => {},\n}) => {\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [pattern, setPattern] = useState([]);\n  const [animationFrames, setAnimationFrames] = useState([]);\n  const [t, setT] = useState(0);\n\n  // Calculate GCD for finding the pattern period\n  const calculateGCD = (a, b) => {\n    a = Math.round(a);\n    b = Math.round(b);\n    return b ? calculateGCD(b, a % b) : a;\n  };\n\n  // Animation loop\n  useEffect(() => {\n    if (!canvasRef.current || !isDrawing) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    \n    // Calculate how many steps to complete the pattern\n    const R = fixedRadius;\n    const r = movingRadius;\n    const d = offset;\n    const gcd = calculateGCD(R, r);\n    const steps = (r / gcd) * (2 * Math.PI);\n    \n    // Animation frame function\n    const draw = () => {\n      if (t > steps) {\n        setIsDrawing(false);\n        onAnimationComplete(animationFrames);\n        return;\n      }\n      \n      // Calculate new point using parametric equations for hypotrochoid\n      const x = (R - r) * Math.cos(t) + d * Math.cos((R - r) / r * t);\n      const y = (R - r) * Math.sin(t) + d * Math.sin((R - r) / r * t);\n      \n      // Center in canvas\n      const centerX = width / 2 + x;\n      const centerY = height / 2 + y;\n      \n      // Add point to pattern\n      const newPattern = [...pattern, { x: centerX, y: centerY }];\n      setPattern(newPattern);\n      \n      // Draw line segment\n      if (pattern.length > 0) {\n        ctx.beginPath();\n        ctx.moveTo(pattern[pattern.length - 1].x, pattern[pattern.length - 1].y);\n        ctx.lineTo(centerX, centerY);\n        ctx.strokeStyle = strokeColor;\n        ctx.lineWidth = strokeWeight;\n        ctx.stroke();\n      }\n      \n      // Record frame if in recording mode\n      if (isRecording) {\n        setAnimationFrames(prev => [...prev, canvas.toDataURL('image/png')]);\n      }\n      \n      // Increment t\n      setT(t + 0.02);\n    };\n    \n    const animationId = requestAnimationFrame(draw);\n    return () => cancelAnimationFrame(animationId);\n  }, [t, pattern, isDrawing, fixedRadius, movingRadius, offset, strokeWeight, strokeColor, isRecording]);\n\n  // Initialize canvas\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Clear canvas and reset state\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    \n    setPattern([]);\n    setT(0);\n    setIsDrawing(true);\n    setAnimationFrames([]);\n  }, [fixedRadius, movingRadius, offset, strokeWeight, strokeColor]);\n\n  return (\n    <div className=\"spiro-canvas-container\">\n      <canvas \n        ref={canvasRef} \n        width={600} \n        height={600} \n        className=\"spiro-canvas\"\n      />\n      {!isDrawing && (\n        <div className=\"canvas-complete\">\n          <span>Drawing complete!</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpiroCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}