{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/components/WalletConnect.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletConnect = ({\n  onConnect\n}) => {\n  _s();\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [hasToken, setHasToken] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Check if Phantom wallet is installed\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n      if (solana && solana.isPhantom) {\n        console.log('Phantom wallet found!');\n\n        // If the wallet is already connected, set the address\n        if (solana.isConnected) {\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          const address = response.publicKey.toString();\n          setWalletAddress(address);\n          await checkTokenOwnership(address);\n        }\n      } else {\n        setError(\"Phantom wallet not found. Please install it!\");\n        console.error('Phantom wallet not found!');\n      }\n    } catch (error) {\n      console.error(error);\n      setError(\"Error connecting to wallet\");\n    }\n  };\n\n  // Connect to Phantom wallet\n  const connectWallet = async () => {\n    try {\n      setIsConnecting(true);\n      setError(null);\n      const {\n        solana\n      } = window;\n      if (solana) {\n        const response = await solana.connect();\n        const address = response.publicKey.toString();\n        console.log('Connected with address:', address);\n        setWalletAddress(address);\n        await checkTokenOwnership(address);\n      }\n    } catch (error) {\n      console.error('Error connecting to wallet:', error);\n      setError(\"Failed to connect wallet\");\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = async () => {\n    try {\n      const {\n        solana\n      } = window;\n      if (solana) {\n        await solana.disconnect();\n        setWalletAddress(null);\n        setHasToken(false);\n      }\n    } catch (error) {\n      console.error('Error disconnecting wallet:', error);\n    }\n  };\n\n  // Check if user owns required token\n  const checkTokenOwnership = async address => {\n    try {\n      // In a real implementation, this would query the blockchain\n      // For this demo, we'll simulate token ownership\n      const simulateOwnership = Math.random() > 0.3; // 70% chance of having token\n\n      setHasToken(simulateOwnership);\n      if (simulateOwnership) {\n        onConnect(address, true);\n      } else {\n        onConnect(address, false);\n      }\n      return simulateOwnership;\n    } catch (error) {\n      console.error('Error checking token ownership:', error);\n      return false;\n    }\n  };\n\n  // Check wallet connection on component mount\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Format wallet address for display\n  const formatAddress = address => {\n    if (!address) return '';\n    return `${address.substring(0, 4)}...${address.substring(address.length - 4)}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wallet-connect\",\n    children: [!walletAddress ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"connect-button\",\n      onClick: connectWallet,\n      disabled: isConnecting,\n      children: isConnecting ? 'Connecting...' : 'Connect Phantom Wallet'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wallet-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"address-display\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"address-label\",\n          children: \"Connected:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"address-value\",\n          children: formatAddress(walletAddress)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), hasToken && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"token-badge\",\n          children: \"\\u2713 Token Verified\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"disconnect-button\",\n        onClick: disconnectWallet,\n        children: \"Disconnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wallet-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }, this), walletAddress && !hasToken && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"token-warning\",\n      children: [\"You need the gate token to mint NFTs for free.\", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"#\",\n        className: \"get-token-link\",\n        children: \"Get Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletConnect, \"XGCVnODF1BF/FSWrHr1KdLi5kJY=\");\n_c = WalletConnect;\nexport default WalletConnect;\nvar _c;\n$RefreshReg$(_c, \"WalletConnect\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WalletConnect","onConnect","_s","walletAddress","setWalletAddress","hasToken","setHasToken","isConnecting","setIsConnecting","error","setError","checkIfWalletIsConnected","solana","window","isPhantom","console","log","isConnected","response","connect","onlyIfTrusted","address","publicKey","toString","checkTokenOwnership","connectWallet","disconnectWallet","disconnect","simulateOwnership","Math","random","formatAddress","substring","length","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","href","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/components/WalletConnect.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../styles/components.css';\n\nconst WalletConnect = ({ onConnect }) => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [hasToken, setHasToken] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Check if Phantom wallet is installed\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana && solana.isPhantom) {\n        console.log('Phantom wallet found!');\n        \n        // If the wallet is already connected, set the address\n        if (solana.isConnected) {\n          const response = await solana.connect({ onlyIfTrusted: true });\n          const address = response.publicKey.toString();\n          setWalletAddress(address);\n          await checkTokenOwnership(address);\n        }\n      } else {\n        setError(\"Phantom wallet not found. Please install it!\");\n        console.error('Phantom wallet not found!');\n      }\n    } catch (error) {\n      console.error(error);\n      setError(\"Error connecting to wallet\");\n    }\n  };\n\n  // Connect to Phantom wallet\n  const connectWallet = async () => {\n    try {\n      setIsConnecting(true);\n      setError(null);\n      \n      const { solana } = window;\n      \n      if (solana) {\n        const response = await solana.connect();\n        const address = response.publicKey.toString();\n        console.log('Connected with address:', address);\n        \n        setWalletAddress(address);\n        await checkTokenOwnership(address);\n      }\n    } catch (error) {\n      console.error('Error connecting to wallet:', error);\n      setError(\"Failed to connect wallet\");\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = async () => {\n    try {\n      const { solana } = window;\n      \n      if (solana) {\n        await solana.disconnect();\n        setWalletAddress(null);\n        setHasToken(false);\n      }\n    } catch (error) {\n      console.error('Error disconnecting wallet:', error);\n    }\n  };\n\n  // Check if user owns required token\n  const checkTokenOwnership = async (address) => {\n    try {\n      // In a real implementation, this would query the blockchain\n      // For this demo, we'll simulate token ownership\n      const simulateOwnership = Math.random() > 0.3; // 70% chance of having token\n      \n      setHasToken(simulateOwnership);\n      \n      if (simulateOwnership) {\n        onConnect(address, true);\n      } else {\n        onConnect(address, false);\n      }\n      \n      return simulateOwnership;\n    } catch (error) {\n      console.error('Error checking token ownership:', error);\n      return false;\n    }\n  };\n\n  // Check wallet connection on component mount\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Format wallet address for display\n  const formatAddress = (address) => {\n    if (!address) return '';\n    return `${address.substring(0, 4)}...${address.substring(address.length - 4)}`;\n  };\n\n  return (\n    <div className=\"wallet-connect\">\n      {!walletAddress ? (\n        <button \n          className=\"connect-button\"\n          onClick={connectWallet}\n          disabled={isConnecting}\n        >\n          {isConnecting ? 'Connecting...' : 'Connect Phantom Wallet'}\n        </button>\n      ) : (\n        <div className=\"wallet-info\">\n          <div className=\"address-display\">\n            <span className=\"address-label\">Connected:</span>\n            <span className=\"address-value\">{formatAddress(walletAddress)}</span>\n            {hasToken && <span className=\"token-badge\">✓ Token Verified</span>}\n          </div>\n          <button \n            className=\"disconnect-button\"\n            onClick={disconnectWallet}\n          >\n            Disconnect\n          </button>\n        </div>\n      )}\n      \n      {error && <div className=\"wallet-error\">{error}</div>}\n      \n      {walletAddress && !hasToken && (\n        <div className=\"token-warning\">\n          You need the gate token to mint NFTs for free.\n          <a href=\"#\" className=\"get-token-link\">Get Token</a>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WalletConnect;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}