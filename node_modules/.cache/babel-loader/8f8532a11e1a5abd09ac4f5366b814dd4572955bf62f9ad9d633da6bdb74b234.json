{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiroCanvas = ({\n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = p => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [{\n        name: \"Neon Mirage\",\n        colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"],\n        rarity: \"Common\"\n      }, {\n        name: \"Digital Dream\",\n        colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"],\n        rarity: \"Uncommon\"\n      }, {\n        name: \"Crystal Sunset\",\n        colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"],\n        rarity: \"Rare\"\n      }, {\n        name: \"Cyber Haze\",\n        colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"],\n        rarity: \"Super Rare\"\n      }, {\n        name: \"Pastel Vapor\",\n        colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"],\n        rarity: \"Legendary\"\n      }];\n\n      // Shape rarity distribution - 5 classic spirograph types\n      const shapeRarity = {\n        \"Hypotrochoid\": \"Common\",\n        // 40%\n        \"Epitrochoid\": \"Uncommon\",\n        // 30% \n        \"Rhodonea\": \"Rare\",\n        // 20%\n        \"Lissajous\": \"Super Rare\",\n        // 8%\n        \"Epicycloid\": \"Legendary\" // 2%\n      };\n\n      // Multiple layer canvases\n      let mainCanvas; // Main visible canvas with black background\n      let layerCanvases = []; // Array of layer graphics for each color\n      let finalOutput; // Final combined output\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let currentColorIndex = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n\n      // Layer tracking\n      let totalLayers = 5; // Match number of colors in palette\n      let currentLayer = 0;\n      let layerCompletionPoints = []; // Points at which to switch layers\n\n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Helper function to find least common multiple\n      const findLCM = (a, b) => {\n        return a * b / findGCD(a, b);\n      };\n\n      // Calculate the maximum boundaries of the pattern to ensure it fits\n      const calculatePatternBoundaries = () => {\n        let maxX = 0;\n        let maxY = 0;\n\n        // Sample many points to find the maximum extent\n        for (let step = 0; step < maxT; step += 0.1) {\n          let x = 0;\n          let y = 0;\n\n          // Calculate position based on shape type\n          switch (shapeType) {\n            case \"Hypotrochoid\":\n              x = (params.R - params.r) * p.cos(step) + params.d * p.cos((params.R - params.r) / params.r * step);\n              y = (params.R - params.r) * p.sin(step) - params.d * p.sin((params.R - params.r) / params.r * step);\n\n              // Add rotation effect\n              const rotHypo = step * params.rotationSpeed;\n              const cosHypo = p.cos(rotHypo);\n              const sinHypo = p.sin(rotHypo);\n              const xHypoRot = x * cosHypo - y * sinHypo;\n              const yHypoRot = x * sinHypo + y * cosHypo;\n              x = xHypoRot;\n              y = yHypoRot;\n              break;\n            case \"Epitrochoid\":\n              x = (params.R + params.r) * p.cos(step) - params.d * p.cos((params.R + params.r) / params.r * step);\n              y = (params.R + params.r) * p.sin(step) - params.d * p.sin((params.R + params.r) / params.r * step);\n\n              // Add rotation effect\n              const rotEpi = step * params.rotationSpeed;\n              const cosEpi = p.cos(rotEpi);\n              const sinEpi = p.sin(rotEpi);\n              const xEpiRot = x * cosEpi - y * sinEpi;\n              const yEpiRot = x * sinEpi + y * cosEpi;\n              x = xEpiRot;\n              y = yEpiRot;\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = params.amplitude * p.cos(params.k * step);\n              x = rhodoneaRadius * p.cos(step);\n              y = rhodoneaRadius * p.sin(step);\n\n              // Add rotation effect\n              const rotRose = step * params.rotationSpeed;\n              const cosRose = p.cos(rotRose);\n              const sinRose = p.sin(rotRose);\n              const xRoseRot = x * cosRose - y * sinRose;\n              const yRoseRot = x * sinRose + y * cosRose;\n              x = xRoseRot;\n              y = yRoseRot;\n              break;\n            case \"Lissajous\":\n              x = params.A * p.sin(params.a * step + params.delta);\n              y = params.B * p.sin(params.b * step);\n\n              // Add rotation effect\n              const rotLiss = step * params.rotationSpeed;\n              const cosLiss = p.cos(rotLiss);\n              const sinLiss = p.sin(rotLiss);\n              const xLissRot = x * cosLiss - y * sinLiss;\n              const yLissRot = x * sinLiss + y * cosLiss;\n              x = xLissRot;\n              y = yLissRot;\n              break;\n            case \"Epicycloid\":\n              // Sum of multiple epicycloids\n              x = 0;\n              y = 0;\n\n              // Base circle\n              const baseX = params.baseR * p.cos(step);\n              const baseY = params.baseR * p.sin(step);\n\n              // Add epicycloids\n              for (let i = 0; i < params.circles; i++) {\n                const radius = params.radiuses[i];\n                const speed = params.speeds[i];\n                const phase = params.phases[i];\n                x += radius * p.cos(speed * step + phase);\n                y += radius * p.sin(speed * step + phase);\n              }\n\n              // Add base\n              x += baseX;\n              y += baseY;\n\n              // Add rotation effect\n              const rotEpic = step * params.rotationSpeed;\n              const cosEpic = p.cos(rotEpic);\n              const sinEpic = p.sin(rotEpic);\n              const xEpicRot = x * cosEpic - y * sinEpic;\n              const yEpicRot = x * sinEpic + y * cosEpic;\n              x = xEpicRot;\n              y = yEpicRot;\n              break;\n          }\n\n          // Update max boundaries\n          maxX = Math.max(maxX, Math.abs(x));\n          maxY = Math.max(maxY, Math.abs(y));\n        }\n        return {\n          maxX,\n          maxY\n        };\n      };\n\n      // Get the scale factor needed to fit the pattern\n      const getScaleFactor = () => {\n        const {\n          maxX,\n          maxY\n        } = calculatePatternBoundaries();\n        const maxExtent = Math.max(maxX, maxY);\n\n        // Canvas size is 600x600, center is at 300,300\n        // Leave a 50px margin on all sides\n        const maxAllowedExtent = 250; // (600/2 - 50)\n\n        // If pattern is too big, scale it down\n        if (maxExtent > maxAllowedExtent) {\n          return maxAllowedExtent / maxExtent;\n        }\n\n        // Otherwise, keep original scale\n        return 1.0;\n      };\n\n      // Get the final image when completed\n      const generateFinalOutput = () => {\n        // Create two separate graphics:\n        // 1. The background canvas (black)\n        let backgroundCanvas = p.createGraphics(600, 600);\n        backgroundCanvas.background(0); // BLACK BACKGROUND\n\n        // 2. The transparent spirograph with all layers merged (but no background)\n        let transparentSpiro = p.createGraphics(600, 600);\n        transparentSpiro.clear(); // Completely transparent\n\n        // Overlay all layers onto the transparent spirograph\n        for (let i = 0; i < layerCanvases.length; i++) {\n          transparentSpiro.image(layerCanvases[i], 0, 0);\n        }\n\n        // Return just the transparent spirograph - the black background stays in the canvas\n        return transparentSpiro;\n      };\n\n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Hypotrochoid - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Epitrochoid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Rhodonea - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // Lissajous - Super Rare 8%\n        } else {\n          shapeIndex = 4; // Epicycloid - Legendary 2%\n        }\n        params = {}; // Reset params\n\n        // Add a rotation speed to ALL patterns\n        params.rotationSpeed = p.random(0.05, 0.15);\n        switch (shapeIndex) {\n          case 0:\n            // Hypotrochoid (Common)\n            shapeType = \"Hypotrochoid\";\n            // Carefully chosen parameters for beautiful patterns\n            params.R = p.int(p.random(70, 140)); // Fixed circle radius\n            params.r = p.int(p.random(25, 60)); // Moving circle radius\n            params.d = p.int(p.random(Math.floor(params.r * 0.3), params.r - 5)); // Pen distance from center\n\n            // Make sure r is not a divisor of R to avoid simple circles\n            if (params.R % params.r === 0) {\n              params.r += 1; // Offset by 1 to ensure complexity\n            }\n\n            // Calculate cycles needed to complete the pattern\n            const gcd1 = findGCD(params.R, params.r);\n            maxT = p.TWO_PI * (params.r / gcd1);\n            break;\n          case 1:\n            // Epitrochoid (Uncommon)\n            shapeType = \"Epitrochoid\";\n            // Carefully chosen parameters for beautiful patterns\n            params.R = p.int(p.random(40, 90)); // Fixed circle radius\n            params.r = p.int(p.random(15, 40)); // Moving circle radius\n            params.d = p.int(p.random(20, 60)); // Pen distance from center\n\n            // Make sure r is not a divisor of R to avoid simple circles\n            if (params.R % params.r === 0) {\n              params.r += 1; // Offset by 1 to ensure complexity\n            }\n\n            // Calculate cycles needed to complete the pattern\n            const gcd2 = findGCD(params.R, params.r);\n            maxT = p.TWO_PI * (params.r / gcd2);\n            break;\n          case 2:\n            // Rhodonea (Rare)\n            shapeType = \"Rhodonea\";\n            // Parameters for rose curves (rhodonea curves)\n            const n = p.int(p.random(3, 9)); // Numerator - number of petals if odd, twice if even\n            const d = p.int(p.random(1, 7)); // Denominator\n            params.k = n / d; // Ratio determines shape\n            params.amplitude = p.random(150, 250); // Size of the curve\n\n            // Avoid ratios that result in simple circles or lines\n            if (n === d || n % d === 0 && n / d === 1) {\n              params.k = (n + 1) / d; // Ensure we get a more complex pattern\n            }\n\n            // For a rose curve, the pattern completes after PI or 2*PI depending on n/d values\n            if (findGCD(n, d) === 1) {\n              // If n and d are coprime\n              if (n % 2 === 1 && d % 2 === 1) {\n                maxT = p.PI * d; // Odd/odd case\n              } else {\n                maxT = p.TWO_PI * d; // Other cases\n              }\n            } else {\n              // If n and d have common factors, simplify\n              const common = findGCD(n, d);\n              const simplifiedN = n / common;\n              const simplifiedD = d / common;\n              if (simplifiedN % 2 === 1 && simplifiedD % 2 === 1) {\n                maxT = p.PI * simplifiedD;\n              } else {\n                maxT = p.TWO_PI * simplifiedD;\n              }\n            }\n            break;\n          case 3:\n            // Lissajous (Super Rare)\n            shapeType = \"Lissajous\";\n            // Parameters for Lissajous figures\n            params.A = p.random(100, 200); // X amplitude\n            params.B = p.random(100, 200); // Y amplitude\n\n            // For more complex patterns, avoid simple ratios\n            do {\n              params.a = p.int(p.random(1, 7)); // X frequency\n              params.b = p.int(p.random(1, 7)); // Y frequency\n            } while (params.a === params.b || params.a % params.b === 0 || params.b % params.a === 0);\n            params.delta = p.random(0, p.PI); // Phase difference\n\n            // Make sure phase difference isn't too close to 0 or PI (would create line)\n            const minPhaseDiff = 0.2;\n            if (params.delta < minPhaseDiff) params.delta = minPhaseDiff;\n            if (Math.abs(params.delta - p.PI) < minPhaseDiff) params.delta = p.PI - minPhaseDiff;\n\n            // Calculate cycles - need LCM of frequencies to complete pattern\n            const lcm = findLCM(params.a, params.b);\n            maxT = p.TWO_PI * lcm;\n            break;\n          case 4:\n            // Epicycloid (Legendary) - Multi-circle complex system\n            shapeType = \"Epicycloid\";\n\n            // Base circle radius\n            params.baseR = p.random(80, 120);\n\n            // Number of additional circles\n            params.circles = p.int(p.random(3, 6));\n\n            // Arrays for circle parameters\n            params.radiuses = [];\n            params.speeds = [];\n            params.phases = [];\n\n            // Generate parameters for each circle\n            for (let i = 0; i < params.circles; i++) {\n              // Each circle gets progressively smaller\n              const radius = p.random(15, 60) * (1 - i * 0.15);\n              params.radiuses.push(radius);\n\n              // Each circle has a unique speed ratio (related to interesting number sequences)\n              const speedChoices = [1, 2, 3, 5, 8, 13, 21]; // Fibonacci-inspired\n              const speed = speedChoices[p.int(p.random(speedChoices.length))];\n              params.speeds.push(speed);\n\n              // Random phase offset\n              params.phases.push(p.random(0, p.TWO_PI));\n            }\n\n            // Ensure at least one speed is not a multiple of another\n            let allMultiples = true;\n            for (let i = 0; i < params.speeds.length - 1; i++) {\n              for (let j = i + 1; j < params.speeds.length; j++) {\n                if (params.speeds[i] % params.speeds[j] !== 0 && params.speeds[j] % params.speeds[i] !== 0) {\n                  allMultiples = false;\n                  break;\n                }\n              }\n              if (!allMultiples) break;\n            }\n            if (allMultiples) {\n              // Force at least one speed to be a prime number different from others\n              params.speeds[0] = 17; // A prime not in the speedChoices\n            }\n\n            // Calculate time needed to complete pattern - LCM of all speeds\n            let totalCycles = params.speeds[0];\n            for (let i = 1; i < params.speeds.length; i++) {\n              totalCycles = findLCM(totalCycles, params.speeds[i]);\n            }\n            maxT = p.TWO_PI * totalCycles;\n            break;\n        }\n\n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 4);\n\n        // Set up layer transitions - divide maxT into segments for each layer\n        layerCompletionPoints = [];\n        for (let i = 1; i < totalLayers; i++) {\n          layerCompletionPoints.push(i / totalLayers * maxT);\n        }\n        layerCompletionPoints.push(maxT); // Final completion point\n\n        rarityText = shapeRarity[shapeType];\n\n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: {\n            ...params\n          }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        // Clear all canvases\n        p.background(0);\n        mainCanvas.background(0);\n\n        // Reset layer canvases\n        layerCanvases = [];\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background for each layer\n          layerCanvases.push(layerCanvas);\n        }\n        p.randomSeed(currentSeed);\n\n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        totalLayers = palette.colors.length; // Match layers to palette colors\n\n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n\n        // Reset drawing variables\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        currentColorIndex = 0;\n        currentLayer = 0;\n\n        // Pick a shape type\n        selectShapeType();\n\n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n\n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function () {\n        // Create main canvas with black background\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        canvas.style('background-color', 'black'); // Ensure canvas always shows black\n\n        // Initialize main drawing canvas with black background\n        mainCanvas = p.createGraphics(600, 600);\n        mainCanvas.background(0);\n\n        // Initialize layer canvases - one for each color\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background\n          layerCanvases.push(layerCanvas);\n        }\n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n\n        // Apply same settings to all layer canvases\n        for (let canvas of layerCanvases) {\n          canvas.strokeJoin(p.ROUND);\n          canvas.strokeCap(p.ROUND);\n        }\n\n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n\n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function () {\n        // Clear main canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n\n        // Display in-progress work\n        p.image(mainCanvas, 0, 0);\n\n        // Display info\n        p.displayInfo();\n\n        // Get the appropriate scale factor to fit pattern in canvas\n        const scaleFactor = getScaleFactor();\n\n        // Draw on the main canvas\n        mainCanvas.push();\n        mainCanvas.translate(mainCanvas.width / 2, mainCanvas.height / 2);\n\n        // Add rotation that completes during drawing\n        let fullRotationAngle = t / maxT * p.TWO_PI;\n        mainCanvas.rotate(fullRotationAngle);\n\n        // Current layer canvas (for separate color layers)\n        let currentLayerCanvas = layerCanvases[currentLayer];\n        currentLayerCanvas.push();\n        currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n        currentLayerCanvas.rotate(fullRotationAngle);\n\n        // Set color for current layer\n        currentColor = palette.colors[currentLayer];\n        mainCanvas.stroke(currentColor);\n        currentLayerCanvas.stroke(currentColor);\n        mainCanvas.strokeWeight(1);\n        currentLayerCanvas.strokeWeight(1);\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch (shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r) * p.cos(t) + params.d * p.cos((params.R - params.r) / params.r * t);\n            y = (params.R - params.r) * p.sin(t) - params.d * p.sin((params.R - params.r) / params.r * t);\n\n            // Add rotation effect\n            const rotHypo = t * params.rotationSpeed;\n            const cosHypo = p.cos(rotHypo);\n            const sinHypo = p.sin(rotHypo);\n            const xHypoRot = x * cosHypo - y * sinHypo;\n            const yHypoRot = x * sinHypo + y * cosHypo;\n            x = xHypoRot;\n            y = yHypoRot;\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r) * p.cos(t) - params.d * p.cos((params.R + params.r) / params.r * t);\n            y = (params.R + params.r) * p.sin(t) - params.d * p.sin((params.R + params.r) / params.r * t);\n\n            // Add rotation effect\n            const rotEpi = t * params.rotationSpeed;\n            const cosEpi = p.cos(rotEpi);\n            const sinEpi = p.sin(rotEpi);\n            const xEpiRot = x * cosEpi - y * sinEpi;\n            const yEpiRot = x * sinEpi + y * cosEpi;\n            x = xEpiRot;\n            y = yEpiRot;\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = params.amplitude * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n\n            // Add rotation effect\n            const rotRose = t * params.rotationSpeed;\n            const cosRose = p.cos(rotRose);\n            const sinRose = p.sin(rotRose);\n            const xRoseRot = x * cosRose - y * sinRose;\n            const yRoseRot = x * sinRose + y * cosRose;\n            x = xRoseRot;\n            y = yRoseRot;\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n\n            // Add rotation effect\n            const rotLiss = t * params.rotationSpeed;\n            const cosLiss = p.cos(rotLiss);\n            const sinLiss = p.sin(rotLiss);\n            const xLissRot = x * cosLiss - y * sinLiss;\n            const yLissRot = x * sinLiss + y * cosLiss;\n            x = xLissRot;\n            y = yLissRot;\n            break;\n          case \"Epicycloid\":\n            // Sum of multiple epicycloids\n            x = 0;\n            y = 0;\n\n            // Base circle\n            const baseX = params.baseR * p.cos(t);\n            const baseY = params.baseR * p.sin(t);\n\n            // Add epicycloids\n            for (let i = 0; i < params.circles; i++) {\n              const radius = params.radiuses[i];\n              const speed = params.speeds[i];\n              const phase = params.phases[i];\n              x += radius * p.cos(speed * t + phase);\n              y += radius * p.sin(speed * t + phase);\n            }\n\n            // Add base\n            x += baseX;\n            y += baseY;\n\n            // Add rotation effect\n            const rotEpic = t * params.rotationSpeed;\n            const cosEpic = p.cos(rotEpic);\n            const sinEpic = p.sin(rotEpic);\n            const xEpicRot = x * cosEpic - y * sinEpic;\n            const yEpicRot = x * sinEpic + y * cosEpic;\n            x = xEpicRot;\n            y = yEpicRot;\n            break;\n        }\n\n        // Apply dynamic scaling to ensure pattern fits\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment on both canvases\n        if (prevX !== null) {\n          mainCanvas.line(prevX, prevY, x, y);\n          currentLayerCanvas.line(prevX, prevY, x, y);\n        }\n\n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n\n          // Check if we've reached a layer transition point\n          if (currentLayer < layerCompletionPoints.length - 1 && t >= layerCompletionPoints[currentLayer]) {\n            // Time to move to next layer\n            currentLayer++;\n            // Make sure we don't go beyond the array bounds\n            if (currentLayer < layerCanvases.length) {\n              currentLayerCanvas = layerCanvases[currentLayer];\n              currentLayerCanvas.push();\n              currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n              // Apply rotation to the new layer\n              let fullRotationAngle = t / maxT * p.TWO_PI;\n              currentLayerCanvas.rotate(fullRotationAngle);\n              currentColor = palette.colors[Math.min(currentLayer, palette.colors.length - 1)];\n              mainCanvas.stroke(currentColor);\n              currentLayerCanvas.stroke(currentColor);\n            }\n          }\n\n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n\n          // Re-calculate based on shape type with updated t\n          switch (shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r) * p.cos(t) + params.d * p.cos((params.R - params.r) / params.r * t);\n              nextY = (params.R - params.r) * p.sin(t) - params.d * p.sin((params.R - params.r) / params.r * t);\n\n              // Add rotation effect\n              const rotHypo = t * params.rotationSpeed;\n              const cosHypo = p.cos(rotHypo);\n              const sinHypo = p.sin(rotHypo);\n              const xHypoRot = nextX * cosHypo - nextY * sinHypo;\n              const yHypoRot = nextX * sinHypo + nextY * cosHypo;\n              nextX = xHypoRot;\n              nextY = yHypoRot;\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r) * p.cos(t) - params.d * p.cos((params.R + params.r) / params.r * t);\n              nextY = (params.R + params.r) * p.sin(t) - params.d * p.sin((params.R + params.r) / params.r * t);\n\n              // Add rotation effect\n              const rotEpi = t * params.rotationSpeed;\n              const cosEpi = p.cos(rotEpi);\n              const sinEpi = p.sin(rotEpi);\n              const xEpiRot = nextX * cosEpi - nextY * sinEpi;\n              const yEpiRot = nextX * sinEpi + nextY * cosEpi;\n              nextX = xEpiRot;\n              nextY = yEpiRot;\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = params.amplitude * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n\n              // Add rotation effect\n              const rotRose = t * params.rotationSpeed;\n              const cosRose = p.cos(rotRose);\n              const sinRose = p.sin(rotRose);\n              const xRoseRot = nextX * cosRose - nextY * sinRose;\n              const yRoseRot = nextX * sinRose + nextY * cosRose;\n              nextX = xRoseRot;\n              nextY = yRoseRot;\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n\n              // Add rotation effect\n              const rotLiss = t * params.rotationSpeed;\n              const cosLiss = p.cos(rotLiss);\n              const sinLiss = p.sin(rotLiss);\n              const xLissRot = nextX * cosLiss - nextY * sinLiss;\n              const yLissRot = nextX * sinLiss + nextY * cosLiss;\n              nextX = xLissRot;\n              nextY = yLissRot;\n              break;\n            case \"Epicycloid\":\n              // Sum of multiple epicycloids\n              nextX = 0;\n              nextY = 0;\n\n              // Base circle\n              const baseX = params.baseR * p.cos(t);\n              const baseY = params.baseR * p.sin(t);\n\n              // Add epicycloids\n              for (let i = 0; i < params.circles; i++) {\n                const radius = params.radiuses[i];\n                const speed = params.speeds[i];\n                const phase = params.phases[i];\n                nextX += radius * p.cos(speed * t + phase);\n                nextY += radius * p.sin(speed * t + phase);\n              }\n\n              // Add base\n              nextX += baseX;\n              nextY += baseY;\n\n              // Add rotation effect\n              const rotEpic = t * params.rotationSpeed;\n              const cosEpic = p.cos(rotEpic);\n              const sinEpic = p.sin(rotEpic);\n              const xEpicRot = nextX * cosEpic - nextY * sinEpic;\n              const yEpicRot = nextX * sinEpic + nextY * cosEpic;\n              nextX = xEpicRot;\n              nextY = yEpicRot;\n              break;\n          }\n\n          // Apply dynamic scaling to ensure pattern fits\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n\n          // Draw the line on both canvases\n          mainCanvas.line(prevX, prevY, nextX, nextY);\n          currentLayerCanvas.line(prevX, prevY, nextX, nextY);\n\n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n\n        // Increment time\n        t += 0.015;\n\n        // Update global rotation\n        globalAngle = t / maxT * p.TWO_PI;\n\n        // Update progress\n        const currentProgress = Math.min(100, Math.round(t / maxT * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n\n        // End current push transforms\n        mainCanvas.pop();\n        currentLayerCanvas.pop();\n\n        // Check if drawing is complete\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n\n          // Make sure to end all open transforms\n          try {\n            mainCanvas.pop();\n          } catch (e) {\n            // Ignore if already popped\n          }\n\n          // Safely pop any open layer transforms\n          for (let i = 0; i < layerCanvases.length; i++) {\n            try {\n              layerCanvases[i].pop();\n            } catch (e) {\n              // Ignore errors if there's no matching push\n              console.log(\"Note: Layer\", i, \"didn't need popping\");\n            }\n          }\n\n          // Generate final output with black background and all layers\n          finalOutput = generateFinalOutput();\n\n          // Notify parent that drawing is complete\n          onDrawingComplete && onDrawingComplete(finalOutput);\n        }\n      };\n\n      // Display info on the canvas\n      p.displayInfo = function () {\n        // Create a semi-transparent background for the text\n        p.fill(0, 200);\n        p.noStroke();\n        p.rect(10, 10, 380, 100, 10);\n\n        // Display NFT info\n        p.textSize(24);\n        p.fill(255);\n        p.text(`Spyro #${currentSeed}`, 20, 40);\n        p.textSize(16);\n        p.fill(palette.colors[0]);\n        p.text(`ðŸŒŸ ${shapeType} Â· ${rarityText}`, 20, 70);\n        p.fill(palette.colors[1]);\n        p.text(`ðŸŽ¨ Palette: ${palette.name} Â· ${palette.rarity}`, 20, 95);\n      };\n\n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n\n      // Change to a specific seed\n      p.setSeed = newSeed => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n\n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spiro-canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: canvasRef,\n      className: \"canvas-wrapper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 883,\n      columnNumber: 7\n    }, this), isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"progress-text\",\n        children: [progress, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 887,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 885,\n      columnNumber: 9\n    }, this), !isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-complete\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Drawing complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 892,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 891,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 882,\n    columnNumber: 5\n  }, this);\n};\n_s(SpiroCanvas, \"vG581M3D6HIZspCQRmOO1WkIWxY=\");\n_c = SpiroCanvas;\nexport default SpiroCanvas;\nvar _c;\n$RefreshReg$(_c, \"SpiroCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","p5","jsxDEV","_jsxDEV","SpiroCanvas","seed","setSeed","onShapeChange","onPaletteChange","onDrawingComplete","_s","canvasRef","p5Instance","isDrawing","setIsDrawing","progress","setProgress","sketch","p","palettes","name","colors","rarity","shapeRarity","mainCanvas","layerCanvases","finalOutput","shapeType","params","palette","currentColor","t","maxT","prevX","prevY","globalAngle","currentColorIndex","rarityText","currentSeed","Math","floor","random","totalLayers","currentLayer","layerCompletionPoints","findGCD","a","b","round","findLCM","calculatePatternBoundaries","maxX","maxY","step","x","y","R","r","cos","d","sin","rotHypo","rotationSpeed","cosHypo","sinHypo","xHypoRot","yHypoRot","rotEpi","cosEpi","sinEpi","xEpiRot","yEpiRot","rhodoneaRadius","amplitude","k","rotRose","cosRose","sinRose","xRoseRot","yRoseRot","A","delta","B","rotLiss","cosLiss","sinLiss","xLissRot","yLissRot","baseX","baseR","baseY","i","circles","radius","radiuses","speed","speeds","phase","phases","rotEpic","cosEpic","sinEpic","xEpicRot","yEpicRot","max","abs","getScaleFactor","maxExtent","maxAllowedExtent","generateFinalOutput","backgroundCanvas","createGraphics","background","transparentSpiro","clear","length","image","selectShapeType","shapeRoll","shapeIndex","int","gcd1","TWO_PI","gcd2","n","PI","common","simplifiedN","simplifiedD","minPhaseDiff","lcm","push","speedChoices","allMultiples","j","totalCycles","type","resetSketch","layerCanvas","randomSeed","paletteRoll","strokeWeight","noFill","console","log","isLooping","loop","setup","canvas","createCanvas","style","frameRate","strokeJoin","ROUND","strokeCap","draw","frameCount","displayInfo","scaleFactor","translate","width","height","fullRotationAngle","rotate","currentLayerCanvas","stroke","line","stepsPerFrame","min","nextX","nextY","currentProgress","pop","noLoop","e","fill","noStroke","rect","textSize","text","generateNewSeed","newSeed","current","remove","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\n\nconst SpiroCanvas = ({ \n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = (p) => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [\n        {name: \"Neon Mirage\", colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"], rarity: \"Common\"},\n        {name: \"Digital Dream\", colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"], rarity: \"Uncommon\"},\n        {name: \"Crystal Sunset\", colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"], rarity: \"Rare\"},\n        {name: \"Cyber Haze\", colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"], rarity: \"Super Rare\"},\n        {name: \"Pastel Vapor\", colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"], rarity: \"Legendary\"}\n      ];\n\n      // Shape rarity distribution - 5 classic spirograph types\n      const shapeRarity = {\n        \"Hypotrochoid\": \"Common\", // 40%\n        \"Epitrochoid\": \"Uncommon\", // 30% \n        \"Rhodonea\": \"Rare\", // 20%\n        \"Lissajous\": \"Super Rare\", // 8%\n        \"Epicycloid\": \"Legendary\" // 2%\n      };\n\n      // Multiple layer canvases\n      let mainCanvas; // Main visible canvas with black background\n      let layerCanvases = []; // Array of layer graphics for each color\n      let finalOutput; // Final combined output\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let currentColorIndex = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n      \n      // Layer tracking\n      let totalLayers = 5; // Match number of colors in palette\n      let currentLayer = 0;\n      let layerCompletionPoints = []; // Points at which to switch layers\n      \n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Helper function to find least common multiple\n      const findLCM = (a, b) => {\n        return (a * b) / findGCD(a, b);\n      };\n\n      // Calculate the maximum boundaries of the pattern to ensure it fits\n      const calculatePatternBoundaries = () => {\n        let maxX = 0;\n        let maxY = 0;\n        \n        // Sample many points to find the maximum extent\n        for (let step = 0; step < maxT; step += 0.1) {\n          let x = 0;\n          let y = 0;\n          \n          // Calculate position based on shape type\n          switch(shapeType) {\n            case \"Hypotrochoid\":\n              x = (params.R - params.r) * p.cos(step) + params.d * p.cos(((params.R - params.r) / params.r) * step);\n              y = (params.R - params.r) * p.sin(step) - params.d * p.sin(((params.R - params.r) / params.r) * step);\n              \n              // Add rotation effect\n              const rotHypo = step * params.rotationSpeed;\n              const cosHypo = p.cos(rotHypo);\n              const sinHypo = p.sin(rotHypo);\n              const xHypoRot = x * cosHypo - y * sinHypo;\n              const yHypoRot = x * sinHypo + y * cosHypo;\n              x = xHypoRot;\n              y = yHypoRot;\n              break;\n            case \"Epitrochoid\":\n              x = (params.R + params.r) * p.cos(step) - params.d * p.cos(((params.R + params.r) / params.r) * step);\n              y = (params.R + params.r) * p.sin(step) - params.d * p.sin(((params.R + params.r) / params.r) * step);\n              \n              // Add rotation effect\n              const rotEpi = step * params.rotationSpeed;\n              const cosEpi = p.cos(rotEpi);\n              const sinEpi = p.sin(rotEpi);\n              const xEpiRot = x * cosEpi - y * sinEpi;\n              const yEpiRot = x * sinEpi + y * cosEpi;\n              x = xEpiRot;\n              y = yEpiRot;\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = params.amplitude * p.cos(params.k * step);\n              x = rhodoneaRadius * p.cos(step);\n              y = rhodoneaRadius * p.sin(step);\n              \n              // Add rotation effect\n              const rotRose = step * params.rotationSpeed;\n              const cosRose = p.cos(rotRose);\n              const sinRose = p.sin(rotRose);\n              const xRoseRot = x * cosRose - y * sinRose;\n              const yRoseRot = x * sinRose + y * cosRose;\n              x = xRoseRot;\n              y = yRoseRot;\n              break;\n            case \"Lissajous\":\n              x = params.A * p.sin(params.a * step + params.delta);\n              y = params.B * p.sin(params.b * step);\n              \n              // Add rotation effect\n              const rotLiss = step * params.rotationSpeed;\n              const cosLiss = p.cos(rotLiss);\n              const sinLiss = p.sin(rotLiss);\n              const xLissRot = x * cosLiss - y * sinLiss;\n              const yLissRot = x * sinLiss + y * cosLiss;\n              x = xLissRot;\n              y = yLissRot;\n              break;\n            case \"Epicycloid\":\n              // Sum of multiple epicycloids\n              x = 0;\n              y = 0;\n              \n              // Base circle\n              const baseX = params.baseR * p.cos(step);\n              const baseY = params.baseR * p.sin(step);\n              \n              // Add epicycloids\n              for (let i = 0; i < params.circles; i++) {\n                const radius = params.radiuses[i];\n                const speed = params.speeds[i];\n                const phase = params.phases[i];\n                \n                x += radius * p.cos(speed * step + phase);\n                y += radius * p.sin(speed * step + phase);\n              }\n              \n              // Add base\n              x += baseX;\n              y += baseY;\n              \n              // Add rotation effect\n              const rotEpic = step * params.rotationSpeed;\n              const cosEpic = p.cos(rotEpic);\n              const sinEpic = p.sin(rotEpic);\n              const xEpicRot = x * cosEpic - y * sinEpic;\n              const yEpicRot = x * sinEpic + y * cosEpic;\n              x = xEpicRot;\n              y = yEpicRot;\n              break;\n          }\n          \n          // Update max boundaries\n          maxX = Math.max(maxX, Math.abs(x));\n          maxY = Math.max(maxY, Math.abs(y));\n        }\n        \n        return { maxX, maxY };\n      };\n\n      // Get the scale factor needed to fit the pattern\n      const getScaleFactor = () => {\n        const { maxX, maxY } = calculatePatternBoundaries();\n        const maxExtent = Math.max(maxX, maxY);\n        \n        // Canvas size is 600x600, center is at 300,300\n        // Leave a 50px margin on all sides\n        const maxAllowedExtent = 250; // (600/2 - 50)\n        \n        // If pattern is too big, scale it down\n        if (maxExtent > maxAllowedExtent) {\n          return maxAllowedExtent / maxExtent;\n        }\n        \n        // Otherwise, keep original scale\n        return 1.0;\n      };\n\n      // Get the final image when completed\n      const generateFinalOutput = () => {\n        // Create two separate graphics:\n        // 1. The background canvas (black)\n        let backgroundCanvas = p.createGraphics(600, 600);\n        backgroundCanvas.background(0); // BLACK BACKGROUND\n        \n        // 2. The transparent spirograph with all layers merged (but no background)\n        let transparentSpiro = p.createGraphics(600, 600);\n        transparentSpiro.clear(); // Completely transparent\n        \n        // Overlay all layers onto the transparent spirograph\n        for (let i = 0; i < layerCanvases.length; i++) {\n          transparentSpiro.image(layerCanvases[i], 0, 0);\n        }\n        \n        // Return just the transparent spirograph - the black background stays in the canvas\n        return transparentSpiro;\n      };\n      \n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        \n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Hypotrochoid - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Epitrochoid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Rhodonea - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // Lissajous - Super Rare 8%\n        } else {\n          shapeIndex = 4; // Epicycloid - Legendary 2%\n        }\n        \n        params = {}; // Reset params\n        \n        // Add a rotation speed to ALL patterns\n        params.rotationSpeed = p.random(0.05, 0.15);\n        \n        switch(shapeIndex) {\n          case 0: // Hypotrochoid (Common)\n            shapeType = \"Hypotrochoid\";\n            // Carefully chosen parameters for beautiful patterns\n            params.R = p.int(p.random(70, 140)); // Fixed circle radius\n            params.r = p.int(p.random(25, 60)); // Moving circle radius\n            params.d = p.int(p.random(Math.floor(params.r * 0.3), params.r - 5)); // Pen distance from center\n            \n            // Make sure r is not a divisor of R to avoid simple circles\n            if (params.R % params.r === 0) {\n              params.r += 1; // Offset by 1 to ensure complexity\n            }\n            \n            // Calculate cycles needed to complete the pattern\n            const gcd1 = findGCD(params.R, params.r);\n            maxT = p.TWO_PI * (params.r / gcd1);\n            break;\n            \n          case 1: // Epitrochoid (Uncommon)\n            shapeType = \"Epitrochoid\";\n            // Carefully chosen parameters for beautiful patterns\n            params.R = p.int(p.random(40, 90)); // Fixed circle radius\n            params.r = p.int(p.random(15, 40)); // Moving circle radius\n            params.d = p.int(p.random(20, 60)); // Pen distance from center\n            \n            // Make sure r is not a divisor of R to avoid simple circles\n            if (params.R % params.r === 0) {\n              params.r += 1; // Offset by 1 to ensure complexity\n            }\n            \n            // Calculate cycles needed to complete the pattern\n            const gcd2 = findGCD(params.R, params.r);\n            maxT = p.TWO_PI * (params.r / gcd2);\n            break;\n            \n          case 2: // Rhodonea (Rare)\n            shapeType = \"Rhodonea\";\n            // Parameters for rose curves (rhodonea curves)\n            const n = p.int(p.random(3, 9)); // Numerator - number of petals if odd, twice if even\n            const d = p.int(p.random(1, 7)); // Denominator\n            params.k = n / d; // Ratio determines shape\n            params.amplitude = p.random(150, 250); // Size of the curve\n            \n            // Avoid ratios that result in simple circles or lines\n            if (n === d || (n % d === 0 && n / d === 1)) {\n              params.k = (n + 1) / d; // Ensure we get a more complex pattern\n            }\n            \n            // For a rose curve, the pattern completes after PI or 2*PI depending on n/d values\n            if (findGCD(n, d) === 1) { // If n and d are coprime\n              if (n % 2 === 1 && d % 2 === 1) {\n                maxT = p.PI * d; // Odd/odd case\n              } else {\n                maxT = p.TWO_PI * d; // Other cases\n              }\n            } else {\n              // If n and d have common factors, simplify\n              const common = findGCD(n, d);\n              const simplifiedN = n / common;\n              const simplifiedD = d / common;\n              \n              if (simplifiedN % 2 === 1 && simplifiedD % 2 === 1) {\n                maxT = p.PI * simplifiedD;\n              } else {\n                maxT = p.TWO_PI * simplifiedD;\n              }\n            }\n            break;\n            \n          case 3: // Lissajous (Super Rare)\n            shapeType = \"Lissajous\";\n            // Parameters for Lissajous figures\n            params.A = p.random(100, 200); // X amplitude\n            params.B = p.random(100, 200); // Y amplitude\n            \n            // For more complex patterns, avoid simple ratios\n            do {\n              params.a = p.int(p.random(1, 7)); // X frequency\n              params.b = p.int(p.random(1, 7)); // Y frequency\n            } while (params.a === params.b || (params.a % params.b === 0) || (params.b % params.a === 0));\n            \n            params.delta = p.random(0, p.PI); // Phase difference\n            \n            // Make sure phase difference isn't too close to 0 or PI (would create line)\n            const minPhaseDiff = 0.2;\n            if (params.delta < minPhaseDiff) params.delta = minPhaseDiff;\n            if (Math.abs(params.delta - p.PI) < minPhaseDiff) params.delta = p.PI - minPhaseDiff;\n            \n            // Calculate cycles - need LCM of frequencies to complete pattern\n            const lcm = findLCM(params.a, params.b);\n            maxT = p.TWO_PI * lcm;\n            break;\n            \n          case 4: // Epicycloid (Legendary) - Multi-circle complex system\n            shapeType = \"Epicycloid\";\n            \n            // Base circle radius\n            params.baseR = p.random(80, 120);\n            \n            // Number of additional circles\n            params.circles = p.int(p.random(3, 6));\n            \n            // Arrays for circle parameters\n            params.radiuses = [];\n            params.speeds = [];\n            params.phases = [];\n            \n            // Generate parameters for each circle\n            for (let i = 0; i < params.circles; i++) {\n              // Each circle gets progressively smaller\n              const radius = p.random(15, 60) * (1 - i * 0.15);\n              params.radiuses.push(radius);\n              \n              // Each circle has a unique speed ratio (related to interesting number sequences)\n              const speedChoices = [1, 2, 3, 5, 8, 13, 21]; // Fibonacci-inspired\n              const speed = speedChoices[p.int(p.random(speedChoices.length))];\n              params.speeds.push(speed);\n              \n              // Random phase offset\n              params.phases.push(p.random(0, p.TWO_PI));\n            }\n            \n            // Ensure at least one speed is not a multiple of another\n            let allMultiples = true;\n            for (let i = 0; i < params.speeds.length - 1; i++) {\n              for (let j = i + 1; j < params.speeds.length; j++) {\n                if (params.speeds[i] % params.speeds[j] !== 0 && params.speeds[j] % params.speeds[i] !== 0) {\n                  allMultiples = false;\n                  break;\n                }\n              }\n              if (!allMultiples) break;\n            }\n            \n            if (allMultiples) {\n              // Force at least one speed to be a prime number different from others\n              params.speeds[0] = 17; // A prime not in the speedChoices\n            }\n            \n            // Calculate time needed to complete pattern - LCM of all speeds\n            let totalCycles = params.speeds[0];\n            for (let i = 1; i < params.speeds.length; i++) {\n              totalCycles = findLCM(totalCycles, params.speeds[i]);\n            }\n            \n            maxT = p.TWO_PI * totalCycles;\n            break;\n        }\n        \n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 4);\n        \n        // Set up layer transitions - divide maxT into segments for each layer\n        layerCompletionPoints = [];\n        for (let i = 1; i < totalLayers; i++) {\n          layerCompletionPoints.push((i / totalLayers) * maxT);\n        }\n        layerCompletionPoints.push(maxT); // Final completion point\n        \n        rarityText = shapeRarity[shapeType];\n        \n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: { ...params }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        // Clear all canvases\n        p.background(0);\n        mainCanvas.background(0);\n        \n        // Reset layer canvases\n        layerCanvases = [];\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background for each layer\n          layerCanvases.push(layerCanvas);\n        }\n        \n        p.randomSeed(currentSeed);\n        \n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        \n        totalLayers = palette.colors.length; // Match layers to palette colors\n        \n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n        \n        // Reset drawing variables\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        currentColorIndex = 0;\n        currentLayer = 0;\n        \n        // Pick a shape type\n        selectShapeType();\n        \n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        \n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n        \n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        \n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function() {\n        // Create main canvas with black background\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        canvas.style('background-color', 'black'); // Ensure canvas always shows black\n        \n        // Initialize main drawing canvas with black background\n        mainCanvas = p.createGraphics(600, 600);\n        mainCanvas.background(0);\n        \n        // Initialize layer canvases - one for each color\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background\n          layerCanvases.push(layerCanvas);\n        }\n        \n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n        \n        // Apply same settings to all layer canvases\n        for (let canvas of layerCanvases) {\n          canvas.strokeJoin(p.ROUND);\n          canvas.strokeCap(p.ROUND);\n        }\n        \n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n        \n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function() {\n        // Clear main canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n        \n        // Display in-progress work\n        p.image(mainCanvas, 0, 0);\n        \n        // Display info\n        p.displayInfo();\n        \n        // Get the appropriate scale factor to fit pattern in canvas\n        const scaleFactor = getScaleFactor();\n        \n        // Draw on the main canvas\n        mainCanvas.push();\n        mainCanvas.translate(mainCanvas.width / 2, mainCanvas.height / 2);\n        \n        // Add rotation that completes during drawing\n        let fullRotationAngle = (t / maxT) * p.TWO_PI;\n        mainCanvas.rotate(fullRotationAngle);\n        \n        // Current layer canvas (for separate color layers)\n        let currentLayerCanvas = layerCanvases[currentLayer];\n        currentLayerCanvas.push();\n        currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n        currentLayerCanvas.rotate(fullRotationAngle);\n        \n        // Set color for current layer\n        currentColor = palette.colors[currentLayer];\n        mainCanvas.stroke(currentColor);\n        currentLayerCanvas.stroke(currentColor);\n        mainCanvas.strokeWeight(1);\n        currentLayerCanvas.strokeWeight(1);\n\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch(shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r) * p.cos(t) + params.d * p.cos(((params.R - params.r) / params.r) * t);\n            y = (params.R - params.r) * p.sin(t) - params.d * p.sin(((params.R - params.r) / params.r) * t);\n            \n            // Add rotation effect\n            const rotHypo = t * params.rotationSpeed;\n            const cosHypo = p.cos(rotHypo);\n            const sinHypo = p.sin(rotHypo);\n            const xHypoRot = x * cosHypo - y * sinHypo;\n            const yHypoRot = x * sinHypo + y * cosHypo;\n            x = xHypoRot;\n            y = yHypoRot;\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r) * p.cos(t) - params.d * p.cos(((params.R + params.r) / params.r) * t);\n            y = (params.R + params.r) * p.sin(t) - params.d * p.sin(((params.R + params.r) / params.r) * t);\n            \n            // Add rotation effect\n            const rotEpi = t * params.rotationSpeed;\n            const cosEpi = p.cos(rotEpi);\n            const sinEpi = p.sin(rotEpi);\n            const xEpiRot = x * cosEpi - y * sinEpi;\n            const yEpiRot = x * sinEpi + y * cosEpi;\n            x = xEpiRot;\n            y = yEpiRot;\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = params.amplitude * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n            \n            // Add rotation effect\n            const rotRose = t * params.rotationSpeed;\n            const cosRose = p.cos(rotRose);\n            const sinRose = p.sin(rotRose);\n            const xRoseRot = x * cosRose - y * sinRose;\n            const yRoseRot = x * sinRose + y * cosRose;\n            x = xRoseRot;\n            y = yRoseRot;\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n            \n            // Add rotation effect\n            const rotLiss = t * params.rotationSpeed;\n            const cosLiss = p.cos(rotLiss);\n            const sinLiss = p.sin(rotLiss);\n            const xLissRot = x * cosLiss - y * sinLiss;\n            const yLissRot = x * sinLiss + y * cosLiss;\n            x = xLissRot;\n            y = yLissRot;\n            break;\n          case \"Epicycloid\":\n            // Sum of multiple epicycloids\n            x = 0;\n            y = 0;\n            \n            // Base circle\n            const baseX = params.baseR * p.cos(t);\n            const baseY = params.baseR * p.sin(t);\n            \n            // Add epicycloids\n            for (let i = 0; i < params.circles; i++) {\n              const radius = params.radiuses[i];\n              const speed = params.speeds[i];\n              const phase = params.phases[i];\n              \n              x += radius * p.cos(speed * t + phase);\n              y += radius * p.sin(speed * t + phase);\n            }\n            \n            // Add base\n            x += baseX;\n            y += baseY;\n            \n            // Add rotation effect\n            const rotEpic = t * params.rotationSpeed;\n            const cosEpic = p.cos(rotEpic);\n            const sinEpic = p.sin(rotEpic);\n            const xEpicRot = x * cosEpic - y * sinEpic;\n            const yEpicRot = x * sinEpic + y * cosEpic;\n            x = xEpicRot;\n            y = yEpicRot;\n            break;\n        }\n\n        // Apply dynamic scaling to ensure pattern fits\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment on both canvases\n        if (prevX !== null) {\n          mainCanvas.line(prevX, prevY, x, y);\n          currentLayerCanvas.line(prevX, prevY, x, y);\n        }\n        \n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n          \n          // Check if we've reached a layer transition point\n          if (currentLayer < layerCompletionPoints.length-1 && t >= layerCompletionPoints[currentLayer]) {\n            // Time to move to next layer\n            currentLayer++;\n            // Make sure we don't go beyond the array bounds\n            if (currentLayer < layerCanvases.length) {\n              currentLayerCanvas = layerCanvases[currentLayer];\n              currentLayerCanvas.push();\n              currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n              // Apply rotation to the new layer\n              let fullRotationAngle = (t / maxT) * p.TWO_PI;\n              currentLayerCanvas.rotate(fullRotationAngle);\n              currentColor = palette.colors[Math.min(currentLayer, palette.colors.length - 1)];\n              mainCanvas.stroke(currentColor);\n              currentLayerCanvas.stroke(currentColor);\n            }\n          }\n          \n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n          \n          // Re-calculate based on shape type with updated t\n          switch(shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r) * p.cos(t) + params.d * p.cos(((params.R - params.r) / params.r) * t);\n              nextY = (params.R - params.r) * p.sin(t) - params.d * p.sin(((params.R - params.r) / params.r) * t);\n              \n              // Add rotation effect\n              const rotHypo = t * params.rotationSpeed;\n              const cosHypo = p.cos(rotHypo);\n              const sinHypo = p.sin(rotHypo);\n              const xHypoRot = nextX * cosHypo - nextY * sinHypo;\n              const yHypoRot = nextX * sinHypo + nextY * cosHypo;\n              nextX = xHypoRot;\n              nextY = yHypoRot;\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r) * p.cos(t) - params.d * p.cos(((params.R + params.r) / params.r) * t);\n              nextY = (params.R + params.r) * p.sin(t) - params.d * p.sin(((params.R + params.r) / params.r) * t);\n              \n              // Add rotation effect\n              const rotEpi = t * params.rotationSpeed;\n              const cosEpi = p.cos(rotEpi);\n              const sinEpi = p.sin(rotEpi);\n              const xEpiRot = nextX * cosEpi - nextY * sinEpi;\n              const yEpiRot = nextX * sinEpi + nextY * cosEpi;\n              nextX = xEpiRot;\n              nextY = yEpiRot;\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = params.amplitude * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n              \n              // Add rotation effect\n              const rotRose = t * params.rotationSpeed;\n              const cosRose = p.cos(rotRose);\n              const sinRose = p.sin(rotRose);\n              const xRoseRot = nextX * cosRose - nextY * sinRose;\n              const yRoseRot = nextX * sinRose + nextY * cosRose;\n              nextX = xRoseRot;\n              nextY = yRoseRot;\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n              \n              // Add rotation effect\n              const rotLiss = t * params.rotationSpeed;\n              const cosLiss = p.cos(rotLiss);\n              const sinLiss = p.sin(rotLiss);\n              const xLissRot = nextX * cosLiss - nextY * sinLiss;\n              const yLissRot = nextX * sinLiss + nextY * cosLiss;\n              nextX = xLissRot;\n              nextY = yLissRot;\n              break;\n            case \"Epicycloid\":\n              // Sum of multiple epicycloids\n              nextX = 0;\n              nextY = 0;\n              \n              // Base circle\n              const baseX = params.baseR * p.cos(t);\n              const baseY = params.baseR * p.sin(t);\n              \n              // Add epicycloids\n              for (let i = 0; i < params.circles; i++) {\n                const radius = params.radiuses[i];\n                const speed = params.speeds[i];\n                const phase = params.phases[i];\n                \n                nextX += radius * p.cos(speed * t + phase);\n                nextY += radius * p.sin(speed * t + phase);\n              }\n              \n              // Add base\n              nextX += baseX;\n              nextY += baseY;\n              \n              // Add rotation effect\n              const rotEpic = t * params.rotationSpeed;\n              const cosEpic = p.cos(rotEpic);\n              const sinEpic = p.sin(rotEpic);\n              const xEpicRot = nextX * cosEpic - nextY * sinEpic;\n              const yEpicRot = nextX * sinEpic + nextY * cosEpic;\n              nextX = xEpicRot;\n              nextY = yEpicRot;\n              break;\n          }\n          \n          // Apply dynamic scaling to ensure pattern fits\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n          \n          // Draw the line on both canvases\n          mainCanvas.line(prevX, prevY, nextX, nextY);\n          currentLayerCanvas.line(prevX, prevY, nextX, nextY);\n          \n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n        \n        // Increment time\n        t += 0.015;\n        \n        // Update global rotation\n        globalAngle = (t / maxT) * p.TWO_PI;\n        \n        // Update progress\n        const currentProgress = Math.min(100, Math.round((t / maxT) * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n        \n        // End current push transforms\n        mainCanvas.pop();\n        currentLayerCanvas.pop();\n\n        // Check if drawing is complete\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n          \n          // Make sure to end all open transforms\n          try {\n            mainCanvas.pop();\n          } catch(e) {\n            // Ignore if already popped\n          }\n          \n          // Safely pop any open layer transforms\n          for (let i = 0; i < layerCanvases.length; i++) {\n            try {\n              layerCanvases[i].pop();\n            } catch (e) {\n              // Ignore errors if there's no matching push\n              console.log(\"Note: Layer\", i, \"didn't need popping\");\n            }\n          }\n          \n          // Generate final output with black background and all layers\n          finalOutput = generateFinalOutput();\n          \n          // Notify parent that drawing is complete\n          onDrawingComplete && onDrawingComplete(finalOutput);\n        }\n      };\n      \n      // Display info on the canvas\n      p.displayInfo = function() {\n        // Create a semi-transparent background for the text\n        p.fill(0, 200);\n        p.noStroke();\n        p.rect(10, 10, 380, 100, 10);\n        \n        // Display NFT info\n        p.textSize(24);\n        p.fill(255);\n        p.text(`Spyro #${currentSeed}`, 20, 40);\n        \n        p.textSize(16);\n        p.fill(palette.colors[0]);\n        p.text(`ðŸŒŸ ${shapeType} Â· ${rarityText}`, 20, 70);\n        \n        p.fill(palette.colors[1]);\n        p.text(`ðŸŽ¨ Palette: ${palette.name} Â· ${palette.rarity}`, 20, 95);\n      };\n      \n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n      \n      // Change to a specific seed\n      p.setSeed = (newSeed) => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n    \n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return (\n    <div className=\"spiro-canvas-container\">\n      <div ref={canvasRef} className=\"canvas-wrapper\"></div>\n      {isDrawing && (\n        <div className=\"progress-bar-container\">\n          <div className=\"progress-bar\" style={{ width: `${progress}%` }}></div>\n          <span className=\"progress-text\">{progress}%</span>\n        </div>\n      )}\n      {!isDrawing && (\n        <div className=\"canvas-complete\">\n          <span>Drawing complete!</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpiroCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}