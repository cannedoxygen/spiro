{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/components/WalletPanel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport '../styles/components.css';\n\n// ERC-20 token contract ABI (minimal for balance checking)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOKEN_ABI = [\n// balanceOf function to check token balance\n\"function balanceOf(address owner) view returns (uint256)\",\n// name function to get token name\n\"function name() view returns (string)\",\n// symbol function to get token symbol\n\"function symbol() view returns (string)\",\n// decimals function to get token decimals\n\"function decimals() view returns (uint8)\",\n// approve function to approve spending\n\"function approve(address spender, uint256 amount) returns (bool)\",\n// transfer function to send tokens\n\"function transfer(address recipient, uint256 amount) returns (bool)\"];\n\n// Replace with your actual SPIRO token contract address\nconst TOKEN_CONTRACT_ADDRESS = \"0x0000000000000000000000000000000000000000\"; // REPLACE WITH REAL ADDRESS\n\n// Replace with the NFT contract address that will receive the burn\nconst NFT_CONTRACT_ADDRESS = \"0x0000000000000000000000000000000000000000\"; // REPLACE WITH REAL ADDRESS\n\n// Cost per mint in SPIRO tokens\nconst MINT_COST = ethers.utils.parseUnits(\"10000\", 18); // Assuming 18 decimals\n\nconst WalletPanel = ({\n  walletAddress,\n  isWalletConnected,\n  onMint,\n  mintCount = 0\n}) => {\n  _s();\n  const [tokenBalance, setTokenBalance] = useState(\"0\");\n  const [formattedBalance, setFormattedBalance] = useState(\"0\");\n  const [tokenSymbol, setTokenSymbol] = useState(\"SPIRO\");\n  const [tokenDecimals, setTokenDecimals] = useState(18);\n  const [isBurning, setIsBurning] = useState(false);\n  const [burnStatus, setBurnStatus] = useState(null);\n  const [canMint, setCanMint] = useState(false);\n\n  // Check token balance when wallet is connected\n  useEffect(() => {\n    if (isWalletConnected && walletAddress) {\n      checkTokenBalance();\n    } else {\n      setTokenBalance(\"0\");\n      setFormattedBalance(\"0\");\n    }\n  }, [isWalletConnected, walletAddress]);\n\n  // Check token balance and get token info\n  const checkTokenBalance = async () => {\n    try {\n      if (!window.ethereum) return;\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const tokenContract = new ethers.Contract(TOKEN_CONTRACT_ADDRESS, TOKEN_ABI, provider);\n\n      // Get token info\n      try {\n        const symbol = await tokenContract.symbol();\n        const decimals = await tokenContract.decimals();\n        setTokenSymbol(symbol);\n        setTokenDecimals(decimals);\n      } catch (error) {\n        console.error('Error getting token info:', error);\n        // Continue with defaults if we can't get token info\n      }\n\n      // Get token balance\n      const balance = await tokenContract.balanceOf(walletAddress);\n      setTokenBalance(balance.toString());\n\n      // Format the balance for display (divide by 10^decimals)\n      const formatted = ethers.utils.formatUnits(balance, tokenDecimals);\n      setFormattedBalance(formatted);\n\n      // Check if user can mint (has enough tokens and hasn't reached limit)\n      const hasEnoughTokens = balance.gte(MINT_COST);\n      const underMintLimit = mintCount < 2;\n      setCanMint(hasEnoughTokens && underMintLimit);\n    } catch (error) {\n      console.error('Error checking token balance:', error);\n      setTokenBalance(\"0\");\n      setFormattedBalance(\"0\");\n\n      // For development only: simulate token balance\n      // Remove this in production!\n      const simulatedBalance = \"25000\";\n      const simulatedFormatted = \"25,000\";\n      setTokenBalance(simulatedBalance);\n      setFormattedBalance(simulatedFormatted);\n      setCanMint(true);\n    }\n  };\n\n  // Burn tokens to mint NFT\n  const burnTokensAndMint = async () => {\n    try {\n      if (!window.ethereum || !isWalletConnected) {\n        alert(\"Please connect your wallet first!\");\n        return;\n      }\n\n      // Check if already reached limit\n      if (mintCount >= 2) {\n        alert(\"You've reached the maximum mint limit of 2 NFTs per wallet!\");\n        return;\n      }\n      setIsBurning(true);\n      setBurnStatus(\"Approving token transfer...\");\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const tokenContract = new ethers.Contract(TOKEN_CONTRACT_ADDRESS, TOKEN_ABI, signer);\n\n      // First approve the NFT contract to spend our tokens\n      const approveTx = await tokenContract.approve(NFT_CONTRACT_ADDRESS, MINT_COST);\n      setBurnStatus(\"Waiting for approval confirmation...\");\n      await approveTx.wait();\n\n      // Now burn the tokens (in a real implementation, the NFT contract would handle this)\n      // For now, we'll just simulate by transferring to a burn address\n      setBurnStatus(\"Burning tokens...\");\n      const burnAddress = \"0x000000000000000000000000000000000000dEaD\"; // Standard burn address\n      const burnTx = await tokenContract.transfer(burnAddress, MINT_COST);\n      setBurnStatus(\"Creating your NFT...\");\n      await burnTx.wait();\n\n      // Trigger the NFT minting process\n      setBurnStatus(\"Success! NFT created!\");\n\n      // Refresh token balance\n      await checkTokenBalance();\n\n      // Notify parent component about successful mint\n      onMint && onMint();\n    } catch (error) {\n      console.error('Error burning tokens:', error);\n      setBurnStatus(`Error: ${error.message}`);\n    } finally {\n      setIsBurning(false);\n\n      // Clear status after a delay\n      setTimeout(() => {\n        setBurnStatus(null);\n      }, 5000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wallet-panel\",\n    children: isWalletConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"token-info-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your SPIRO Balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-balance\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"balance-amount\",\n          children: formattedBalance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"balance-symbol\",\n          children: tokenSymbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mint-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cost-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Cost per NFT:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"cost-value\",\n            children: [\"10,000 \", tokenSymbol]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"limit-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Your mints:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"limit-value\",\n            children: [mintCount, \"/2\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), burnStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `burn-status ${isBurning ? 'burning' : 'success'}`,\n        children: burnStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"burn-button\",\n        onClick: burnTokensAndMint,\n        disabled: isBurning || !canMint,\n        children: isBurning ? 'Processing...' : `Burn 10,000 ${tokenSymbol} & Mint NFT`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), !canMint && Number(formattedBalance) < 10000 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"insufficient-tokens\",\n        children: [\"You need at least 10,000 \", tokenSymbol, \" tokens to mint an NFT.\", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          className: \"get-tokens-link\",\n          children: [\"Get \", tokenSymbol, \" Tokens\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this), !canMint && mintCount >= 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mint-limit-reached\",\n        children: \"You've reached the maximum mint limit of 2 NFTs per wallet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connect-prompt\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Connect Your Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Connect your wallet to check your SPIRO balance and mint NFTs.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletPanel, \"cODSxJfhX+Wx29KhQONKyKzyK70=\");\n_c = WalletPanel;\nexport default WalletPanel;\nvar _c;\n$RefreshReg$(_c, \"WalletPanel\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","TOKEN_ABI","TOKEN_CONTRACT_ADDRESS","NFT_CONTRACT_ADDRESS","MINT_COST","utils","parseUnits","WalletPanel","walletAddress","isWalletConnected","onMint","mintCount","_s","tokenBalance","setTokenBalance","formattedBalance","setFormattedBalance","tokenSymbol","setTokenSymbol","tokenDecimals","setTokenDecimals","isBurning","setIsBurning","burnStatus","setBurnStatus","canMint","setCanMint","checkTokenBalance","window","ethereum","provider","providers","Web3Provider","tokenContract","Contract","symbol","decimals","error","console","balance","balanceOf","toString","formatted","formatUnits","hasEnoughTokens","gte","underMintLimit","simulatedBalance","simulatedFormatted","burnTokensAndMint","alert","signer","getSigner","approveTx","approve","wait","burnAddress","burnTx","transfer","message","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Number","href","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/components/WalletPanel.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport '../styles/components.css';\n\n// ERC-20 token contract ABI (minimal for balance checking)\nconst TOKEN_ABI = [\n  // balanceOf function to check token balance\n  \"function balanceOf(address owner) view returns (uint256)\",\n  // name function to get token name\n  \"function name() view returns (string)\",\n  // symbol function to get token symbol\n  \"function symbol() view returns (string)\",\n  // decimals function to get token decimals\n  \"function decimals() view returns (uint8)\",\n  // approve function to approve spending\n  \"function approve(address spender, uint256 amount) returns (bool)\",\n  // transfer function to send tokens\n  \"function transfer(address recipient, uint256 amount) returns (bool)\"\n];\n\n// Replace with your actual SPIRO token contract address\nconst TOKEN_CONTRACT_ADDRESS = \"0x0000000000000000000000000000000000000000\"; // REPLACE WITH REAL ADDRESS\n\n// Replace with the NFT contract address that will receive the burn\nconst NFT_CONTRACT_ADDRESS = \"0x0000000000000000000000000000000000000000\"; // REPLACE WITH REAL ADDRESS\n\n// Cost per mint in SPIRO tokens\nconst MINT_COST = ethers.utils.parseUnits(\"10000\", 18); // Assuming 18 decimals\n\nconst WalletPanel = ({ \n  walletAddress, \n  isWalletConnected, \n  onMint, \n  mintCount = 0 \n}) => {\n  const [tokenBalance, setTokenBalance] = useState(\"0\");\n  const [formattedBalance, setFormattedBalance] = useState(\"0\");\n  const [tokenSymbol, setTokenSymbol] = useState(\"SPIRO\");\n  const [tokenDecimals, setTokenDecimals] = useState(18);\n  const [isBurning, setIsBurning] = useState(false);\n  const [burnStatus, setBurnStatus] = useState(null);\n  const [canMint, setCanMint] = useState(false);\n\n  // Check token balance when wallet is connected\n  useEffect(() => {\n    if (isWalletConnected && walletAddress) {\n      checkTokenBalance();\n    } else {\n      setTokenBalance(\"0\");\n      setFormattedBalance(\"0\");\n    }\n  }, [isWalletConnected, walletAddress]);\n\n  // Check token balance and get token info\n  const checkTokenBalance = async () => {\n    try {\n      if (!window.ethereum) return;\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const tokenContract = new ethers.Contract(\n        TOKEN_CONTRACT_ADDRESS,\n        TOKEN_ABI,\n        provider\n      );\n      \n      // Get token info\n      try {\n        const symbol = await tokenContract.symbol();\n        const decimals = await tokenContract.decimals();\n        setTokenSymbol(symbol);\n        setTokenDecimals(decimals);\n      } catch (error) {\n        console.error('Error getting token info:', error);\n        // Continue with defaults if we can't get token info\n      }\n      \n      // Get token balance\n      const balance = await tokenContract.balanceOf(walletAddress);\n      setTokenBalance(balance.toString());\n      \n      // Format the balance for display (divide by 10^decimals)\n      const formatted = ethers.utils.formatUnits(balance, tokenDecimals);\n      setFormattedBalance(formatted);\n      \n      // Check if user can mint (has enough tokens and hasn't reached limit)\n      const hasEnoughTokens = balance.gte(MINT_COST);\n      const underMintLimit = mintCount < 2;\n      setCanMint(hasEnoughTokens && underMintLimit);\n    } catch (error) {\n      console.error('Error checking token balance:', error);\n      setTokenBalance(\"0\");\n      setFormattedBalance(\"0\");\n      \n      // For development only: simulate token balance\n      // Remove this in production!\n      const simulatedBalance = \"25000\";\n      const simulatedFormatted = \"25,000\";\n      setTokenBalance(simulatedBalance);\n      setFormattedBalance(simulatedFormatted);\n      setCanMint(true);\n    }\n  };\n\n  // Burn tokens to mint NFT\n  const burnTokensAndMint = async () => {\n    try {\n      if (!window.ethereum || !isWalletConnected) {\n        alert(\"Please connect your wallet first!\");\n        return;\n      }\n      \n      // Check if already reached limit\n      if (mintCount >= 2) {\n        alert(\"You've reached the maximum mint limit of 2 NFTs per wallet!\");\n        return;\n      }\n\n      setIsBurning(true);\n      setBurnStatus(\"Approving token transfer...\");\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const tokenContract = new ethers.Contract(\n        TOKEN_CONTRACT_ADDRESS,\n        TOKEN_ABI,\n        signer\n      );\n      \n      // First approve the NFT contract to spend our tokens\n      const approveTx = await tokenContract.approve(NFT_CONTRACT_ADDRESS, MINT_COST);\n      setBurnStatus(\"Waiting for approval confirmation...\");\n      await approveTx.wait();\n      \n      // Now burn the tokens (in a real implementation, the NFT contract would handle this)\n      // For now, we'll just simulate by transferring to a burn address\n      setBurnStatus(\"Burning tokens...\");\n      const burnAddress = \"0x000000000000000000000000000000000000dEaD\"; // Standard burn address\n      const burnTx = await tokenContract.transfer(burnAddress, MINT_COST);\n      \n      setBurnStatus(\"Creating your NFT...\");\n      await burnTx.wait();\n      \n      // Trigger the NFT minting process\n      setBurnStatus(\"Success! NFT created!\");\n      \n      // Refresh token balance\n      await checkTokenBalance();\n      \n      // Notify parent component about successful mint\n      onMint && onMint();\n    } catch (error) {\n      console.error('Error burning tokens:', error);\n      setBurnStatus(`Error: ${error.message}`);\n    } finally {\n      setIsBurning(false);\n      \n      // Clear status after a delay\n      setTimeout(() => {\n        setBurnStatus(null);\n      }, 5000);\n    }\n  };\n\n  return (\n    <div className=\"wallet-panel\">\n      {isWalletConnected ? (\n        <div className=\"token-info-panel\">\n          <h3>Your SPIRO Balance</h3>\n          <div className=\"token-balance\">\n            <span className=\"balance-amount\">{formattedBalance}</span>\n            <span className=\"balance-symbol\">{tokenSymbol}</span>\n          </div>\n          \n          <div className=\"mint-info\">\n            <div className=\"cost-info\">\n              <span>Cost per NFT:</span>\n              <span className=\"cost-value\">10,000 {tokenSymbol}</span>\n            </div>\n            <div className=\"limit-info\">\n              <span>Your mints:</span>\n              <span className=\"limit-value\">{mintCount}/2</span>\n            </div>\n          </div>\n          \n          {burnStatus && (\n            <div className={`burn-status ${isBurning ? 'burning' : 'success'}`}>\n              {burnStatus}\n            </div>\n          )}\n          \n          <button \n            className=\"burn-button\"\n            onClick={burnTokensAndMint}\n            disabled={isBurning || !canMint}\n          >\n            {isBurning ? 'Processing...' : `Burn 10,000 ${tokenSymbol} & Mint NFT`}\n          </button>\n          \n          {!canMint && Number(formattedBalance) < 10000 && (\n            <div className=\"insufficient-tokens\">\n              You need at least 10,000 {tokenSymbol} tokens to mint an NFT.\n              <a href=\"#\" className=\"get-tokens-link\">Get {tokenSymbol} Tokens</a>\n            </div>\n          )}\n          \n          {!canMint && mintCount >= 2 && (\n            <div className=\"mint-limit-reached\">\n              You've reached the maximum mint limit of 2 NFTs per wallet.\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"connect-prompt\">\n          <h3>Connect Your Wallet</h3>\n          <p>Connect your wallet to check your SPIRO balance and mint NFTs.</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WalletPanel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}