{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/pages/Create.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SpiroCanvas from '../components/SpiroCanvas';\nimport WalletConnect from '../components/WalletConnect';\nimport WalletPanel from '../components/WalletPanel';\nimport { isSeedAvailable, reserveSeed, getMintedCount, findAvailableSeed, saveUserNFT, getUserNFTs } from '../services/nftService';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Create = () => {\n  _s();\n  // Spirograph state\n  const [seed, setSeed] = useState(null);\n  const [shape, setShape] = useState(null);\n  const [palette, setPalette] = useState(null);\n  const [image, setImage] = useState(null);\n  const [animatedGif, setAnimatedGif] = useState(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [strokeWeight] = useState(1); // Fixed to 1 per request\n\n  // NFT and wallet state\n  const [isMinting, setIsMinting] = useState(false);\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mintStatus, setMintStatus] = useState(null); // 'success', 'error', or null\n  const [mintedCount, setMintedCount] = useState(0);\n  const [userMintCount, setUserMintCount] = useState(0);\n  const [availabilityMessage, setAvailabilityMessage] = useState('');\n  const [isSeedAvailableState, setIsSeedAvailableState] = useState(true);\n\n  // Check NFT availability on load\n  useEffect(() => {\n    const fetchMintedCount = async () => {\n      try {\n        const count = await getMintedCount();\n        setMintedCount(count);\n      } catch (error) {\n        console.error(\"Error fetching minted count:\", error);\n        // Fallback to 0 if there's an error\n        setMintedCount(0);\n      }\n    };\n    fetchMintedCount();\n  }, []);\n\n  // Check seed availability when it changes\n  useEffect(() => {\n    if (seed) {\n      const checkSeedAvailability = async () => {\n        try {\n          const available = await isSeedAvailable(seed);\n          setIsSeedAvailableState(available);\n          if (!available) {\n            setAvailabilityMessage('This design has already been minted! Generate a new one.');\n          } else {\n            setAvailabilityMessage('');\n          }\n        } catch (error) {\n          console.error(\"Error checking seed availability:\", error);\n          // Assume seed is available if there's an error (for graceful degradation)\n          setIsSeedAvailableState(true);\n          setAvailabilityMessage('');\n        }\n      };\n      checkSeedAvailability();\n    }\n  }, [seed]);\n\n  // Check user's mint count when wallet connects\n  useEffect(() => {\n    if (isWalletConnected && walletAddress) {\n      getUserMintCount();\n    }\n  }, [isWalletConnected, walletAddress]);\n\n  // Get user's current mint count\n  const getUserMintCount = async () => {\n    try {\n      const userNFTs = await getUserNFTs(walletAddress);\n      setUserMintCount(userNFTs.length);\n    } catch (error) {\n      console.error(\"Error getting user mint count:\", error);\n      setUserMintCount(0);\n    }\n  };\n\n  // Handle wallet connection\n  const handleWalletConnect = (address, tokenOwnership) => {\n    setWalletAddress(address);\n    setIsWalletConnected(!!address);\n\n    // Clear mint status when wallet changes\n    setMintStatus(null);\n  };\n\n  // Handle shape change\n  const handleShapeChange = shapeData => {\n    setShape(shapeData);\n  };\n\n  // Handle palette change\n  const handlePaletteChange = paletteData => {\n    setPalette(paletteData);\n  };\n\n  // Handle drawing completion\n  const handleDrawingComplete = finalImage => {\n    // Store the final image\n    setImage(finalImage);\n\n    // Convert to data URL - explicitly use PNG format to preserve transparency\n    const imageUrl = finalImage && finalImage.canvas ? finalImage.canvas.toDataURL('image/png') : null;\n    console.log(\"Image generated:\", imageUrl ? \"Success\" : \"Failed\");\n    setAnimatedGif(imageUrl);\n    setShowPreview(true);\n  };\n\n  // Generate a new random design\n  const handleGenerateNew = async () => {\n    // Clear previous state\n    setImage(null);\n    setAnimatedGif(null);\n    setShowPreview(false);\n    setMintStatus(null);\n    setAvailabilityMessage('');\n    try {\n      // Find an available seed\n      const newSeed = await findAvailableSeed();\n      if (newSeed) {\n        setSeed(newSeed);\n      } else {\n        setAvailabilityMessage('All 10,000 designs have been minted!');\n      }\n    } catch (error) {\n      console.error(\"Error finding available seed:\", error);\n      // Fallback to a random seed (1-10000) if there's an error\n      setSeed(Math.floor(Math.random() * 10000) + 1);\n    }\n  };\n\n  // Handle successful token burn and mint\n  const handleMintSuccess = async () => {\n    try {\n      var _shape$params, _shape$params2, _shape$params3;\n      setIsMinting(true);\n      setMintStatus(null);\n\n      // Reserve the seed\n      const reservationResult = await reserveSeed(seed);\n      if (!reservationResult.success) {\n        throw new Error(reservationResult.message);\n      }\n      console.log(\"Minting with parameters:\", {\n        seed,\n        shape: shape === null || shape === void 0 ? void 0 : shape.type,\n        rarity: shape === null || shape === void 0 ? void 0 : shape.rarity,\n        palette: palette === null || palette === void 0 ? void 0 : palette.name,\n        animated: true // This is now always an animated NFT\n      });\n\n      // Success!\n      setMintStatus('success');\n\n      // Update minted count\n      const count = await getMintedCount();\n      setMintedCount(count);\n\n      // Update user mint count\n      setUserMintCount(prevCount => prevCount + 1);\n\n      // Store in local storage for collection page\n      await saveUserNFT({\n        id: seed,\n        params: {\n          shape: shape === null || shape === void 0 ? void 0 : shape.type,\n          rarity: shape === null || shape === void 0 ? void 0 : shape.rarity,\n          fixedRadius: shape === null || shape === void 0 ? void 0 : (_shape$params = shape.params) === null || _shape$params === void 0 ? void 0 : _shape$params.R,\n          movingRadius: shape === null || shape === void 0 ? void 0 : (_shape$params2 = shape.params) === null || _shape$params2 === void 0 ? void 0 : _shape$params2.r1,\n          offset: shape === null || shape === void 0 ? void 0 : (_shape$params3 = shape.params) === null || _shape$params3 === void 0 ? void 0 : _shape$params3.d,\n          colors: palette === null || palette === void 0 ? void 0 : palette.colors,\n          strokeWeight: strokeWeight\n        },\n        imageUrl: animatedGif,\n        // Store the transparent PNG\n        animatedGifUrl: animatedGif,\n        // Same image, will be displayed with CSS rotation\n        mintDate: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error(\"Error minting NFT:\", error);\n      setMintStatus('error');\n      setAvailabilityMessage(error.message || 'Error minting NFT');\n    } finally {\n      setIsMinting(false);\n    }\n  };\n\n  // Download the current image\n  const handleDownloadImage = () => {\n    if (animatedGif) {\n      const link = document.createElement('a');\n      link.href = animatedGif;\n      link.download = `Spirograph_${seed}.png`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Create Your Spirograph NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Design beautiful mathematical patterns and mint them by burning 10,000 SPIRO tokens\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-availability\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"minted-count\",\n          children: [mintedCount, \"/10,000 Minted\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WalletConnect, {\n          onConnect: handleWalletConnect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-section\",\n        children: [!showPreview ? /*#__PURE__*/_jsxDEV(SpiroCanvas, {\n          seed: seed,\n          setSeed: setSeed,\n          onShapeChange: handleShapeChange,\n          onPaletteChange: handlePaletteChange,\n          onDrawingComplete: handleDrawingComplete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Your Animated Spirograph\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"animation-preview\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"rotating-image\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: animatedGif,\n                alt: \"Animated Spirograph\",\n                className: \"preview-gif\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preview-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleDownloadImage,\n              className: \"btn-secondary\",\n              children: \"Download Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 17\n            }, this), !mintStatus && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleGenerateNew,\n              className: \"btn-primary\",\n              children: \"Generate New Design\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), mintStatus === 'success' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mint-success\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Success! \\uD83C\\uDF89\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Your Spirograph NFT has been minted and sent to your wallet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Share your creation with friends!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"share-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"share-twitter\",\n              children: \"Share on X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"share-copy\",\n              children: \"Copy Link\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleGenerateNew,\n            className: \"btn-primary mt-3\",\n            children: \"Create Another\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this), mintStatus === 'error' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mint-error\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Error Minting\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"There was a problem creating your NFT. Please try again.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setMintStatus(null),\n            className: \"btn-secondary mt-2\",\n            children: \"Try Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spirograph-info\",\n          children: seed && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Your Spirograph\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Seed:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 20\n              }, this), \" #\", seed]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 17\n            }, this), shape && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Shape:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 22\n              }, this), \" \", shape.type, \" (\", shape.rarity, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 19\n            }, this), palette && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Palette:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 22\n              }, this), \" \", palette.name, \" (\", palette.rarity, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 19\n            }, this), availabilityMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"availability-message\",\n              children: availabilityMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-buttons\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-primary\",\n            onClick: handleGenerateNew,\n            disabled: isMinting,\n            children: \"Generate New Design\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WalletPanel, {\n          walletAddress: walletAddress,\n          isWalletConnected: isWalletConnected,\n          onMint: handleMintSuccess,\n          mintCount: userMintCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mint-instructions\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"How to Mint\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Create a design you love\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Connect your wallet with SPIRO tokens\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Burn 10,000 SPIRO to mint your NFT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Limited to 2 NFTs per wallet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"reward-reminder\",\n            children: \"Remember: After 90 days, NFT holders will receive SPIRO tokens based on rarity!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n};\n_s(Create, \"bXjDrEOyc6lGC/b/pbspTwr5coM=\");\n_c = Create;\nexport default Create;\nvar _c;\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"names":["React","useState","useEffect","SpiroCanvas","WalletConnect","WalletPanel","isSeedAvailable","reserveSeed","getMintedCount","findAvailableSeed","saveUserNFT","getUserNFTs","jsxDEV","_jsxDEV","Fragment","_Fragment","Create","_s","seed","setSeed","shape","setShape","palette","setPalette","image","setImage","animatedGif","setAnimatedGif","showPreview","setShowPreview","strokeWeight","isMinting","setIsMinting","isWalletConnected","setIsWalletConnected","walletAddress","setWalletAddress","mintStatus","setMintStatus","mintedCount","setMintedCount","userMintCount","setUserMintCount","availabilityMessage","setAvailabilityMessage","isSeedAvailableState","setIsSeedAvailableState","fetchMintedCount","count","error","console","checkSeedAvailability","available","getUserMintCount","userNFTs","length","handleWalletConnect","address","tokenOwnership","handleShapeChange","shapeData","handlePaletteChange","paletteData","handleDrawingComplete","finalImage","imageUrl","canvas","toDataURL","log","handleGenerateNew","newSeed","Math","floor","random","handleMintSuccess","_shape$params","_shape$params2","_shape$params3","reservationResult","success","Error","message","type","rarity","name","animated","prevCount","id","params","fixedRadius","R","movingRadius","r1","offset","d","colors","animatedGifUrl","mintDate","Date","toISOString","handleDownloadImage","link","document","createElement","href","download","body","appendChild","click","removeChild","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onConnect","onShapeChange","onPaletteChange","onDrawingComplete","src","alt","onClick","disabled","onMint","mintCount","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/pages/Create.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SpiroCanvas from '../components/SpiroCanvas';\nimport WalletConnect from '../components/WalletConnect';\nimport WalletPanel from '../components/WalletPanel';\nimport { \n  isSeedAvailable, \n  reserveSeed, \n  getMintedCount,\n  findAvailableSeed,\n  saveUserNFT,\n  getUserNFTs\n} from '../services/nftService';\nimport '../styles/components.css';\n\nconst Create = () => {\n  // Spirograph state\n  const [seed, setSeed] = useState(null);\n  const [shape, setShape] = useState(null);\n  const [palette, setPalette] = useState(null);\n  const [image, setImage] = useState(null);\n  const [animatedGif, setAnimatedGif] = useState(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [strokeWeight] = useState(1); // Fixed to 1 per request\n  \n  // NFT and wallet state\n  const [isMinting, setIsMinting] = useState(false);\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mintStatus, setMintStatus] = useState(null); // 'success', 'error', or null\n  const [mintedCount, setMintedCount] = useState(0);\n  const [userMintCount, setUserMintCount] = useState(0);\n  const [availabilityMessage, setAvailabilityMessage] = useState('');\n  const [isSeedAvailableState, setIsSeedAvailableState] = useState(true);\n\n  // Check NFT availability on load\n  useEffect(() => {\n    const fetchMintedCount = async () => {\n      try {\n        const count = await getMintedCount();\n        setMintedCount(count);\n      } catch (error) {\n        console.error(\"Error fetching minted count:\", error);\n        // Fallback to 0 if there's an error\n        setMintedCount(0);\n      }\n    };\n\n    fetchMintedCount();\n  }, []);\n\n  // Check seed availability when it changes\n  useEffect(() => {\n    if (seed) {\n      const checkSeedAvailability = async () => {\n        try {\n          const available = await isSeedAvailable(seed);\n          setIsSeedAvailableState(available);\n          \n          if (!available) {\n            setAvailabilityMessage('This design has already been minted! Generate a new one.');\n          } else {\n            setAvailabilityMessage('');\n          }\n        } catch (error) {\n          console.error(\"Error checking seed availability:\", error);\n          // Assume seed is available if there's an error (for graceful degradation)\n          setIsSeedAvailableState(true);\n          setAvailabilityMessage('');\n        }\n      };\n\n      checkSeedAvailability();\n    }\n  }, [seed]);\n\n  // Check user's mint count when wallet connects\n  useEffect(() => {\n    if (isWalletConnected && walletAddress) {\n      getUserMintCount();\n    }\n  }, [isWalletConnected, walletAddress]);\n\n  // Get user's current mint count\n  const getUserMintCount = async () => {\n    try {\n      const userNFTs = await getUserNFTs(walletAddress);\n      setUserMintCount(userNFTs.length);\n    } catch (error) {\n      console.error(\"Error getting user mint count:\", error);\n      setUserMintCount(0);\n    }\n  };\n\n  // Handle wallet connection\n  const handleWalletConnect = (address, tokenOwnership) => {\n    setWalletAddress(address);\n    setIsWalletConnected(!!address);\n    \n    // Clear mint status when wallet changes\n    setMintStatus(null);\n  };\n\n  // Handle shape change\n  const handleShapeChange = (shapeData) => {\n    setShape(shapeData);\n  };\n\n  // Handle palette change\n  const handlePaletteChange = (paletteData) => {\n    setPalette(paletteData);\n  };\n\n  // Handle drawing completion\n  const handleDrawingComplete = (finalImage) => {\n    // Store the final image\n    setImage(finalImage);\n    \n    // Convert to data URL - explicitly use PNG format to preserve transparency\n    const imageUrl = finalImage && finalImage.canvas ? finalImage.canvas.toDataURL('image/png') : null;\n    \n    console.log(\"Image generated:\", imageUrl ? \"Success\" : \"Failed\");\n    \n    setAnimatedGif(imageUrl);\n    setShowPreview(true);\n  };\n\n  // Generate a new random design\n  const handleGenerateNew = async () => {\n    // Clear previous state\n    setImage(null);\n    setAnimatedGif(null);\n    setShowPreview(false);\n    setMintStatus(null);\n    setAvailabilityMessage('');\n    \n    try {\n      // Find an available seed\n      const newSeed = await findAvailableSeed();\n      \n      if (newSeed) {\n        setSeed(newSeed);\n      } else {\n        setAvailabilityMessage('All 10,000 designs have been minted!');\n      }\n    } catch (error) {\n      console.error(\"Error finding available seed:\", error);\n      // Fallback to a random seed (1-10000) if there's an error\n      setSeed(Math.floor(Math.random() * 10000) + 1);\n    }\n  };\n\n  // Handle successful token burn and mint\n  const handleMintSuccess = async () => {\n    try {\n      setIsMinting(true);\n      setMintStatus(null);\n\n      // Reserve the seed\n      const reservationResult = await reserveSeed(seed);\n      \n      if (!reservationResult.success) {\n        throw new Error(reservationResult.message);\n      }\n      \n      console.log(\"Minting with parameters:\", {\n        seed,\n        shape: shape?.type,\n        rarity: shape?.rarity,\n        palette: palette?.name,\n        animated: true // This is now always an animated NFT\n      });\n      \n      // Success!\n      setMintStatus('success');\n      \n      // Update minted count\n      const count = await getMintedCount();\n      setMintedCount(count);\n      \n      // Update user mint count\n      setUserMintCount(prevCount => prevCount + 1);\n      \n      // Store in local storage for collection page\n      await saveUserNFT({\n        id: seed,\n        params: {\n          shape: shape?.type,\n          rarity: shape?.rarity,\n          fixedRadius: shape?.params?.R,\n          movingRadius: shape?.params?.r1,\n          offset: shape?.params?.d,\n          colors: palette?.colors,\n          strokeWeight: strokeWeight\n        },\n        imageUrl: animatedGif, // Store the transparent PNG\n        animatedGifUrl: animatedGif, // Same image, will be displayed with CSS rotation\n        mintDate: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error(\"Error minting NFT:\", error);\n      setMintStatus('error');\n      setAvailabilityMessage(error.message || 'Error minting NFT');\n    } finally {\n      setIsMinting(false);\n    }\n  };\n\n  // Download the current image\n  const handleDownloadImage = () => {\n    if (animatedGif) {\n      const link = document.createElement('a');\n      link.href = animatedGif;\n      link.download = `Spirograph_${seed}.png`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  return (\n    <div className=\"create-page\">\n      <div className=\"create-header\">\n        <h1>Create Your Spirograph NFT</h1>\n        <p>Design beautiful mathematical patterns and mint them by burning 10,000 SPIRO tokens</p>\n        <div className=\"nft-availability\">\n          <span className=\"minted-count\">{mintedCount}/10,000 Minted</span>\n          <WalletConnect onConnect={handleWalletConnect} />\n        </div>\n      </div>\n\n      <div className=\"create-container\">\n        <div className=\"canvas-section\">\n          {!showPreview ? (\n            <SpiroCanvas\n              seed={seed}\n              setSeed={setSeed}\n              onShapeChange={handleShapeChange}\n              onPaletteChange={handlePaletteChange}\n              onDrawingComplete={handleDrawingComplete}\n            />\n          ) : (\n            <div className=\"preview-container\">\n              <h3>Your Animated Spirograph</h3>\n              <div className=\"animation-preview\">\n                <div className=\"rotating-image\">\n                  <img \n                    src={animatedGif} \n                    alt=\"Animated Spirograph\"\n                    className=\"preview-gif\"\n                  />\n                </div>\n              </div>\n              <div className=\"preview-actions\">\n                <button onClick={handleDownloadImage} className=\"btn-secondary\">Download Image</button>\n                {!mintStatus && (\n                  <button \n                    onClick={handleGenerateNew}\n                    className=\"btn-primary\"\n                  >\n                    Generate New Design\n                  </button>\n                )}\n              </div>\n            </div>\n          )}\n          \n          {mintStatus === 'success' && (\n            <div className=\"mint-success\">\n              <h3>Success! 🎉</h3>\n              <p>Your Spirograph NFT has been minted and sent to your wallet.</p>\n              <p>Share your creation with friends!</p>\n              <div className=\"share-buttons\">\n                <button className=\"share-twitter\">Share on X</button>\n                <button className=\"share-copy\">Copy Link</button>\n              </div>\n              <button onClick={handleGenerateNew} className=\"btn-primary mt-3\">Create Another</button>\n            </div>\n          )}\n          \n          {mintStatus === 'error' && (\n            <div className=\"mint-error\">\n              <h3>Error Minting</h3>\n              <p>There was a problem creating your NFT. Please try again.</p>\n              <button onClick={() => setMintStatus(null)} className=\"btn-secondary mt-2\">Try Again</button>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"controls-section\">\n          <div className=\"spirograph-info\">\n            {seed && (\n              <>\n                <h3>Your Spirograph</h3>\n                <p><strong>Seed:</strong> #{seed}</p>\n                {shape && (\n                  <p><strong>Shape:</strong> {shape.type} ({shape.rarity})</p>\n                )}\n                {palette && (\n                  <p><strong>Palette:</strong> {palette.name} ({palette.rarity})</p>\n                )}\n                \n                {availabilityMessage && (\n                  <p className=\"availability-message\">{availabilityMessage}</p>\n                )}\n              </>\n            )}\n          </div>\n          \n          <div className=\"action-buttons\">\n            <button \n              className=\"btn-primary\" \n              onClick={handleGenerateNew}\n              disabled={isMinting}\n            >\n              Generate New Design\n            </button>\n          </div>\n          \n          {/* NEW: Wallet Panel for token balance and burning */}\n          <WalletPanel\n            walletAddress={walletAddress}\n            isWalletConnected={isWalletConnected}\n            onMint={handleMintSuccess}\n            mintCount={userMintCount}\n          />\n          \n          <div className=\"mint-instructions\">\n            <h3>How to Mint</h3>\n            <ol>\n              <li>Create a design you love</li>\n              <li>Connect your wallet with SPIRO tokens</li>\n              <li>Burn 10,000 SPIRO to mint your NFT</li>\n              <li>Limited to 2 NFTs per wallet</li>\n            </ol>\n            <p className=\"reward-reminder\">Remember: After 90 days, NFT holders will receive SPIRO tokens based on rarity!</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Create;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}