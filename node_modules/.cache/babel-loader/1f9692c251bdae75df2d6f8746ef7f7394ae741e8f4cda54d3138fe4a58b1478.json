{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiroCanvas = ({\n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = p => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [{\n        name: \"Neon Mirage\",\n        colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"],\n        rarity: \"Common\"\n      }, {\n        name: \"Digital Dream\",\n        colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"],\n        rarity: \"Uncommon\"\n      }, {\n        name: \"Crystal Sunset\",\n        colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"],\n        rarity: \"Rare\"\n      }, {\n        name: \"Cyber Haze\",\n        colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"],\n        rarity: \"Super Rare\"\n      }, {\n        name: \"Pastel Vapor\",\n        colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"],\n        rarity: \"Legendary\"\n      }];\n\n      // Shape rarity distribution\n      const shapeRarity = {\n        \"Hypotrochoid\": \"Common\",\n        // 40%\n        \"Epitrochoid\": \"Uncommon\",\n        // 30%\n        \"Rhodonea\": \"Rare\",\n        // 20%\n        \"Lissajous\": \"Super Rare\" // 10%\n      };\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let startColorIndex = 0;\n      let endColorIndex = 1;\n      let colorTransition = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n\n      // Capture frames for animation (if needed)\n      let frames = [];\n\n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Select shape type based on seed\n      const selectShapeType = () => {\n        // Use the seed to determine shape index\n        const shapeIndex = currentSeed % 4;\n        params = {}; // Reset params\n\n        switch (shapeIndex) {\n          case 0:\n            shapeType = \"Hypotrochoid\";\n            params.R = p.random(250, 400);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(100, 180);\n\n            // Find approximate cycle length\n            const gcd = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd);\n            break;\n          case 1:\n            shapeType = \"Epitrochoid\";\n            params.R = p.random(200, 300);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(80, 160);\n            const gcd2 = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd2);\n            break;\n          case 2:\n            shapeType = \"Rhodonea\";\n            params.k = p.int(p.random(4, 9));\n\n            // Period depends on whether k is odd or even\n            maxT = params.k % 2 === 0 ? p.TWO_PI : p.PI;\n            break;\n          case 3:\n            shapeType = \"Lissajous\";\n            params.A = p.random(200, 350);\n            params.B = p.random(200, 350);\n            params.a = p.int(p.random(3, 7));\n            params.b = p.int(p.random(3, 7));\n            params.delta = p.random(0, p.PI);\n\n            // Find cycle length\n            const lcm = params.a * params.b / findGCD(params.a, params.b);\n            maxT = p.TWO_PI * lcm;\n            break;\n        }\n\n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 10);\n        rarityText = shapeRarity[shapeType];\n\n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: {\n            ...params\n          }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        p.background(0);\n        p.randomSeed(currentSeed);\n\n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        p.strokeWeight(1.5);\n        p.noFill();\n\n        // Reset drawing variables\n        frames = [];\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        startColorIndex = 0;\n        endColorIndex = 1;\n        colorTransition = 0;\n\n        // Pick a shape type\n        selectShapeType();\n\n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n\n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = () => {\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n\n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n\n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = () => {\n        // Clear canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n        p.push();\n        p.translate(p.width / 2, p.height / 2);\n\n        // Add rotation\n        let fullRotationAngle = t / maxT * p.TWO_PI;\n        p.rotate(fullRotationAngle);\n\n        // Gradient between colors\n        let startCol = p.color(palette.colors[startColorIndex]);\n        let endCol = p.color(palette.colors[endColorIndex]);\n        currentColor = p.lerpColor(startCol, endCol, colorTransition);\n        p.stroke(currentColor);\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch (shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r1) * p.cos(t) + params.d * p.cos((params.R - params.r1) / params.r1 * t);\n            y = (params.R - params.r1) * p.sin(t) - params.d * p.sin((params.R - params.r1) / params.r1 * t);\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r1) * p.cos(t) - params.d * p.cos((params.R + params.r1) / params.r1 * t);\n            y = (params.R + params.r1) * p.sin(t) - params.d * p.sin((params.R + params.r1) / params.r1 * t);\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = 250 * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n            break;\n        }\n\n        // Apply scaling effects\n        let scaleFactor = 1 + 0.1 * p.sin(t * 0.5);\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment\n        if (prevX !== null) {\n          p.line(prevX, prevY, x, y);\n        }\n\n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n\n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n\n          // Re-calculate based on shape type with updated t\n          switch (shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r1) * p.cos(t) + params.d * p.cos((params.R - params.r1) / params.r1 * t);\n              nextY = (params.R - params.r1) * p.sin(t) - params.d * p.sin((params.R - params.r1) / params.r1 * t);\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r1) * p.cos(t) - params.d * p.cos((params.R + params.r1) / params.r1 * t);\n              nextY = (params.R + params.r1) * p.sin(t) - params.d * p.sin((params.R + params.r1) / params.r1 * t);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n              break;\n          }\n\n          // Apply scaling effects\n          let scaleFactor = 1 + 0.1 * p.sin(t * 0.5);\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n\n          // Draw the line\n          p.line(prevX, prevY, nextX, nextY);\n\n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n\n        // Capture frame for animation (every 5th frame to keep file size reasonable)\n        if (p.frameCount % 5 === 0) {\n          frames.push(p.get());\n        }\n\n        // Increment time\n        t += 0.015;\n\n        // Update global rotation\n        globalAngle = t / maxT * p.TWO_PI;\n\n        // Update progress\n        const currentProgress = Math.min(100, Math.round(t / maxT * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n\n        // Gradually transition color\n        colorTransition += 0.003;\n        if (colorTransition >= 1) {\n          startColorIndex = endColorIndex;\n          endColorIndex = (endColorIndex + 1) % palette.colors.length;\n          colorTransition = 0;\n        }\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n\n          // Notify parent that drawing is complete\n          const finalImage = p.get();\n          onDrawingComplete && onDrawingComplete(finalImage, frames);\n        }\n        p.pop();\n      };\n\n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n\n      // Change to a specific seed\n      p.setSeed = newSeed => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n\n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  // Method to generate a new seed\n  const generateNewSeed = () => {\n    if (p5Instance.current && p5Instance.current.generateNewSeed) {\n      p5Instance.current.generateNewSeed();\n    }\n  };\n\n  // Method to set a specific seed\n  const setSeedValue = newSeed => {\n    if (p5Instance.current && p5Instance.current.setSeed) {\n      p5Instance.current.setSeed(newSeed);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spiro-canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: canvasRef,\n      className: \"canvas-wrapper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this), isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"progress-text\",\n        children: [progress, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 9\n    }, this), !isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-complete\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Drawing complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 379,\n    columnNumber: 5\n  }, this);\n};\n_s(SpiroCanvas, \"vG581M3D6HIZspCQRmOO1WkIWxY=\");\n_c = SpiroCanvas;\nexport default SpiroCanvas;\nvar _c;\n$RefreshReg$(_c, \"SpiroCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","p5","jsxDEV","_jsxDEV","SpiroCanvas","seed","setSeed","onShapeChange","onPaletteChange","onDrawingComplete","_s","canvasRef","p5Instance","isDrawing","setIsDrawing","progress","setProgress","sketch","p","palettes","name","colors","rarity","shapeRarity","shapeType","params","palette","currentColor","t","maxT","prevX","prevY","globalAngle","startColorIndex","endColorIndex","colorTransition","rarityText","currentSeed","Math","floor","random","frames","findGCD","a","b","round","selectShapeType","shapeIndex","R","r1","d","gcd","TWO_PI","gcd2","k","int","PI","A","B","delta","lcm","max","type","resetSketch","background","randomSeed","paletteRoll","strokeWeight","noFill","console","log","isLooping","loop","setup","canvas","createCanvas","style","frameRate","strokeJoin","ROUND","strokeCap","draw","frameCount","push","translate","width","height","fullRotationAngle","rotate","startCol","color","endCol","lerpColor","stroke","x","y","cos","sin","rhodoneaRadius","scaleFactor","line","stepsPerFrame","i","nextX","nextY","get","currentProgress","min","length","noLoop","finalImage","pop","generateNewSeed","newSeed","current","remove","setSeedValue","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\n\nconst SpiroCanvas = ({ \n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = (p) => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [\n        {name: \"Neon Mirage\", colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"], rarity: \"Common\"},\n        {name: \"Digital Dream\", colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"], rarity: \"Uncommon\"},\n        {name: \"Crystal Sunset\", colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"], rarity: \"Rare\"},\n        {name: \"Cyber Haze\", colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"], rarity: \"Super Rare\"},\n        {name: \"Pastel Vapor\", colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"], rarity: \"Legendary\"}\n      ];\n\n      // Shape rarity distribution\n      const shapeRarity = {\n        \"Hypotrochoid\": \"Common\", // 40%\n        \"Epitrochoid\": \"Uncommon\", // 30%\n        \"Rhodonea\": \"Rare\", // 20%\n        \"Lissajous\": \"Super Rare\" // 10%\n      };\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let startColorIndex = 0;\n      let endColorIndex = 1;\n      let colorTransition = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n      \n      // Capture frames for animation (if needed)\n      let frames = [];\n      \n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Select shape type based on seed\n      const selectShapeType = () => {\n        // Use the seed to determine shape index\n        const shapeIndex = currentSeed % 4;\n        \n        params = {}; // Reset params\n        \n        switch(shapeIndex) {\n          case 0:\n            shapeType = \"Hypotrochoid\";\n            params.R = p.random(250, 400);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(100, 180);\n            \n            // Find approximate cycle length\n            const gcd = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd);\n            break;\n          case 1:\n            shapeType = \"Epitrochoid\";\n            params.R = p.random(200, 300);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(80, 160);\n            \n            const gcd2 = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd2);\n            break;\n          case 2:\n            shapeType = \"Rhodonea\";\n            params.k = p.int(p.random(4, 9));\n            \n            // Period depends on whether k is odd or even\n            maxT = (params.k % 2 === 0) ? p.TWO_PI : p.PI;\n            break;\n          case 3:\n            shapeType = \"Lissajous\";\n            params.A = p.random(200, 350);\n            params.B = p.random(200, 350);\n            params.a = p.int(p.random(3, 7));\n            params.b = p.int(p.random(3, 7));\n            params.delta = p.random(0, p.PI);\n            \n            // Find cycle length\n            const lcm = (params.a * params.b) / findGCD(params.a, params.b);\n            maxT = p.TWO_PI * lcm;\n            break;\n        }\n        \n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 10);\n        \n        rarityText = shapeRarity[shapeType];\n        \n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: { ...params }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        p.background(0);\n        p.randomSeed(currentSeed);\n        \n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        \n        p.strokeWeight(1.5);\n        p.noFill();\n        \n        // Reset drawing variables\n        frames = [];\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        startColorIndex = 0;\n        endColorIndex = 1;\n        colorTransition = 0;\n        \n        // Pick a shape type\n        selectShapeType();\n        \n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        \n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n        \n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        \n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = () => {\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        \n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n        \n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n        \n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = () => {\n        // Clear canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n        \n        p.push();\n        p.translate(p.width / 2, p.height / 2);\n        \n        // Add rotation\n        let fullRotationAngle = (t / maxT) * p.TWO_PI;\n        p.rotate(fullRotationAngle);\n        \n        // Gradient between colors\n        let startCol = p.color(palette.colors[startColorIndex]);\n        let endCol = p.color(palette.colors[endColorIndex]);\n        currentColor = p.lerpColor(startCol, endCol, colorTransition);\n        p.stroke(currentColor);\n\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch(shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r1) * p.cos(t) + params.d * p.cos(((params.R - params.r1) / params.r1) * t);\n            y = (params.R - params.r1) * p.sin(t) - params.d * p.sin(((params.R - params.r1) / params.r1) * t);\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r1) * p.cos(t) - params.d * p.cos(((params.R + params.r1) / params.r1) * t);\n            y = (params.R + params.r1) * p.sin(t) - params.d * p.sin(((params.R + params.r1) / params.r1) * t);\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = 250 * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n            break;\n        }\n\n        // Apply scaling effects\n        let scaleFactor = 1 + 0.1 * p.sin(t * 0.5);\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment\n        if (prevX !== null) {\n          p.line(prevX, prevY, x, y);\n        }\n        \n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n          \n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n          \n          // Re-calculate based on shape type with updated t\n          switch(shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r1) * p.cos(t) + params.d * p.cos(((params.R - params.r1) / params.r1) * t);\n              nextY = (params.R - params.r1) * p.sin(t) - params.d * p.sin(((params.R - params.r1) / params.r1) * t);\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r1) * p.cos(t) - params.d * p.cos(((params.R + params.r1) / params.r1) * t);\n              nextY = (params.R + params.r1) * p.sin(t) - params.d * p.sin(((params.R + params.r1) / params.r1) * t);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n              break;\n          }\n          \n          // Apply scaling effects\n          let scaleFactor = 1 + 0.1 * p.sin(t * 0.5);\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n          \n          // Draw the line\n          p.line(prevX, prevY, nextX, nextY);\n          \n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n        \n        // Capture frame for animation (every 5th frame to keep file size reasonable)\n        if (p.frameCount % 5 === 0) {\n          frames.push(p.get());\n        }\n        \n        // Increment time\n        t += 0.015;\n        \n        // Update global rotation\n        globalAngle = (t / maxT) * p.TWO_PI;\n        \n        // Update progress\n        const currentProgress = Math.min(100, Math.round((t / maxT) * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n        \n        // Gradually transition color\n        colorTransition += 0.003;\n        if (colorTransition >= 1) {\n          startColorIndex = endColorIndex;\n          endColorIndex = (endColorIndex + 1) % palette.colors.length;\n          colorTransition = 0;\n        }\n\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n          \n          // Notify parent that drawing is complete\n          const finalImage = p.get();\n          onDrawingComplete && onDrawingComplete(finalImage, frames);\n        }\n        \n        p.pop();\n      };\n      \n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n      \n      // Change to a specific seed\n      p.setSeed = (newSeed) => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n    \n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  // Method to generate a new seed\n  const generateNewSeed = () => {\n    if (p5Instance.current && p5Instance.current.generateNewSeed) {\n      p5Instance.current.generateNewSeed();\n    }\n  };\n\n  // Method to set a specific seed\n  const setSeedValue = (newSeed) => {\n    if (p5Instance.current && p5Instance.current.setSeed) {\n      p5Instance.current.setSeed(newSeed);\n    }\n  };\n\n  return (\n    <div className=\"spiro-canvas-container\">\n      <div ref={canvasRef} className=\"canvas-wrapper\"></div>\n      {isDrawing && (\n        <div className=\"progress-bar-container\">\n          <div className=\"progress-bar\" style={{ width: `${progress}%` }}></div>\n          <span className=\"progress-text\">{progress}%</span>\n        </div>\n      )}\n      {!isDrawing && (\n        <div className=\"canvas-complete\">\n          <span>Drawing complete!</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpiroCanvas;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,EAAE,MAAM,IAAI;AACnB,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,WAAW,GAAGA,CAAC;EACnBC,IAAI;EACJC,OAAO;EACPC,aAAa;EACbC,eAAe;EACfC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,SAAS,GAAGb,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMc,UAAU,GAAGd,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;;EAE3C;EACAD,SAAS,CAAC,MAAM;IACd;IACA,MAAMkB,MAAM,GAAIC,CAAC,IAAK;MACpB;MACA,MAAMC,QAAQ,GAAG,CACf;QAACC,IAAI,EAAE,aAAa;QAAEC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QAAEC,MAAM,EAAE;MAAQ,CAAC,EACxG;QAACF,IAAI,EAAE,eAAe;QAAEC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QAAEC,MAAM,EAAE;MAAU,CAAC,EAC5G;QAACF,IAAI,EAAE,gBAAgB;QAAEC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QAAEC,MAAM,EAAE;MAAM,CAAC,EACzG;QAACF,IAAI,EAAE,YAAY;QAAEC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QAAEC,MAAM,EAAE;MAAY,CAAC,EAC3G;QAACF,IAAI,EAAE,cAAc;QAAEC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QAAEC,MAAM,EAAE;MAAW,CAAC,CAC7G;;MAED;MACA,MAAMC,WAAW,GAAG;QAClB,cAAc,EAAE,QAAQ;QAAE;QAC1B,aAAa,EAAE,UAAU;QAAE;QAC3B,UAAU,EAAE,MAAM;QAAE;QACpB,WAAW,EAAE,YAAY,CAAC;MAC5B,CAAC;;MAED;MACA,IAAIC,SAAS,GAAG,EAAE;MAClB,IAAIC,MAAM,GAAG,CAAC,CAAC;MACf,IAAIC,OAAO;MACX,IAAIC,YAAY;MAChB,IAAIC,CAAC,GAAG,CAAC;MACT,IAAIC,IAAI;MACR,IAAIC,KAAK,GAAG,IAAI;MAChB,IAAIC,KAAK,GAAG,IAAI;MAChB,IAAIC,WAAW,GAAG,CAAC;MACnB,IAAIC,eAAe,GAAG,CAAC;MACvB,IAAIC,aAAa,GAAG,CAAC;MACrB,IAAIC,eAAe,GAAG,CAAC;MACvB,IAAIC,UAAU,GAAG,EAAE;MACnB,IAAIC,WAAW,GAAGhC,IAAI,IAAIiC,IAAI,CAACC,KAAK,CAACrB,CAAC,CAACsB,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;;MAExD;MACA,IAAIC,MAAM,GAAG,EAAE;;MAEf;MACA,MAAMC,OAAO,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;QACxBD,CAAC,GAAGL,IAAI,CAACO,KAAK,CAACF,CAAC,CAAC;QACjBC,CAAC,GAAGN,IAAI,CAACO,KAAK,CAACD,CAAC,CAAC;QACjB,OAAOA,CAAC,KAAK,CAAC,GAAGD,CAAC,GAAGD,OAAO,CAACE,CAAC,EAAED,CAAC,GAAGC,CAAC,CAAC;MACxC,CAAC;;MAED;MACA,MAAME,eAAe,GAAGA,CAAA,KAAM;QAC5B;QACA,MAAMC,UAAU,GAAGV,WAAW,GAAG,CAAC;QAElCZ,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;;QAEb,QAAOsB,UAAU;UACf,KAAK,CAAC;YACJvB,SAAS,GAAG,cAAc;YAC1BC,MAAM,CAACuB,CAAC,GAAG9B,CAAC,CAACsB,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC;YAC7Bf,MAAM,CAACwB,EAAE,GAAG/B,CAAC,CAACsB,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC;YAC5Bf,MAAM,CAACyB,CAAC,GAAGhC,CAAC,CAACsB,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC;;YAE7B;YACA,MAAMW,GAAG,GAAGT,OAAO,CAACjB,MAAM,CAACuB,CAAC,EAAEvB,MAAM,CAACwB,EAAE,CAAC;YACxCpB,IAAI,GAAGX,CAAC,CAACkC,MAAM,IAAI3B,MAAM,CAACwB,EAAE,GAAGE,GAAG,CAAC;YACnC;UACF,KAAK,CAAC;YACJ3B,SAAS,GAAG,aAAa;YACzBC,MAAM,CAACuB,CAAC,GAAG9B,CAAC,CAACsB,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC;YAC7Bf,MAAM,CAACwB,EAAE,GAAG/B,CAAC,CAACsB,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC;YAC5Bf,MAAM,CAACyB,CAAC,GAAGhC,CAAC,CAACsB,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC;YAE5B,MAAMa,IAAI,GAAGX,OAAO,CAACjB,MAAM,CAACuB,CAAC,EAAEvB,MAAM,CAACwB,EAAE,CAAC;YACzCpB,IAAI,GAAGX,CAAC,CAACkC,MAAM,IAAI3B,MAAM,CAACwB,EAAE,GAAGI,IAAI,CAAC;YACpC;UACF,KAAK,CAAC;YACJ7B,SAAS,GAAG,UAAU;YACtBC,MAAM,CAAC6B,CAAC,GAAGpC,CAAC,CAACqC,GAAG,CAACrC,CAAC,CAACsB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;YAEhC;YACAX,IAAI,GAAIJ,MAAM,CAAC6B,CAAC,GAAG,CAAC,KAAK,CAAC,GAAIpC,CAAC,CAACkC,MAAM,GAAGlC,CAAC,CAACsC,EAAE;YAC7C;UACF,KAAK,CAAC;YACJhC,SAAS,GAAG,WAAW;YACvBC,MAAM,CAACgC,CAAC,GAAGvC,CAAC,CAACsB,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC;YAC7Bf,MAAM,CAACiC,CAAC,GAAGxC,CAAC,CAACsB,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC;YAC7Bf,MAAM,CAACkB,CAAC,GAAGzB,CAAC,CAACqC,GAAG,CAACrC,CAAC,CAACsB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAChCf,MAAM,CAACmB,CAAC,GAAG1B,CAAC,CAACqC,GAAG,CAACrC,CAAC,CAACsB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAChCf,MAAM,CAACkC,KAAK,GAAGzC,CAAC,CAACsB,MAAM,CAAC,CAAC,EAAEtB,CAAC,CAACsC,EAAE,CAAC;;YAEhC;YACA,MAAMI,GAAG,GAAInC,MAAM,CAACkB,CAAC,GAAGlB,MAAM,CAACmB,CAAC,GAAIF,OAAO,CAACjB,MAAM,CAACkB,CAAC,EAAElB,MAAM,CAACmB,CAAC,CAAC;YAC/Df,IAAI,GAAGX,CAAC,CAACkC,MAAM,GAAGQ,GAAG;YACrB;QACJ;;QAEA;QACA/B,IAAI,GAAGX,CAAC,CAAC2C,GAAG,CAAChC,IAAI,EAAEX,CAAC,CAACkC,MAAM,GAAG,EAAE,CAAC;QAEjChB,UAAU,GAAGb,WAAW,CAACC,SAAS,CAAC;;QAEnC;QACAjB,aAAa,IAAIA,aAAa,CAAC;UAC7BuD,IAAI,EAAEtC,SAAS;UACfF,MAAM,EAAEc,UAAU;UAClBX,MAAM,EAAE;YAAE,GAAGA;UAAO;QACtB,CAAC,CAAC;MACJ,CAAC;;MAED;MACA,MAAMsC,WAAW,GAAGA,CAAA,KAAM;QACxB7C,CAAC,CAAC8C,UAAU,CAAC,CAAC,CAAC;QACf9C,CAAC,CAAC+C,UAAU,CAAC5B,WAAW,CAAC;;QAEzB;QACA,IAAI6B,WAAW,GAAGhD,CAAC,CAACsB,MAAM,CAAC,GAAG,CAAC;QAC/B,IAAI0B,WAAW,GAAG,EAAE,EAAE;UACpBxC,OAAO,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,MAAM,IAAI+C,WAAW,GAAG,EAAE,EAAE;UAC3BxC,OAAO,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,MAAM,IAAI+C,WAAW,GAAG,EAAE,EAAE;UAC3BxC,OAAO,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,MAAM,IAAI+C,WAAW,GAAG,EAAE,EAAE;UAC3BxC,OAAO,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,MAAM;UACLO,OAAO,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB;QAEAD,CAAC,CAACiD,YAAY,CAAC,GAAG,CAAC;QACnBjD,CAAC,CAACkD,MAAM,CAAC,CAAC;;QAEV;QACA3B,MAAM,GAAG,EAAE;QACXb,CAAC,GAAG,CAAC;QACLE,KAAK,GAAG,IAAI;QACZC,KAAK,GAAG,IAAI;QACZC,WAAW,GAAG,CAAC;QACfC,eAAe,GAAG,CAAC;QACnBC,aAAa,GAAG,CAAC;QACjBC,eAAe,GAAG,CAAC;;QAEnB;QACAW,eAAe,CAAC,CAAC;;QAEjB;QACAtC,eAAe,IAAIA,eAAe,CAAC;UACjCY,IAAI,EAAEM,OAAO,CAACN,IAAI;UAClBE,MAAM,EAAEI,OAAO,CAACJ,MAAM;UACtBD,MAAM,EAAE,CAAC,GAAGK,OAAO,CAACL,MAAM;QAC5B,CAAC,CAAC;QAEFgD,OAAO,CAACC,GAAG,CAAC,eAAejC,WAAW,MAAMb,SAAS,KAAKY,UAAU,GAAG,CAAC;QACxEiC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE7C,MAAM,CAAC;QAC9B4C,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE5C,OAAO,CAACN,IAAI,CAAC;;QAErC;QACA,IAAI,CAACF,CAAC,CAACqD,SAAS,CAAC,CAAC,EAAE;UAClBrD,CAAC,CAACsD,IAAI,CAAC,CAAC;QACV;QAEA1D,YAAY,CAAC,IAAI,CAAC;QAClBE,WAAW,CAAC,CAAC,CAAC;MAChB,CAAC;;MAED;MACAE,CAAC,CAACuD,KAAK,GAAG,MAAM;QACd,MAAMC,MAAM,GAAGxD,CAAC,CAACyD,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC;QACvCD,MAAM,CAACE,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC;QAChCF,MAAM,CAACE,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC;QAEhC1D,CAAC,CAAC2D,SAAS,CAAC,EAAE,CAAC;QACf3D,CAAC,CAAC4D,UAAU,CAAC5D,CAAC,CAAC6D,KAAK,CAAC;QACrB7D,CAAC,CAAC8D,SAAS,CAAC9D,CAAC,CAAC6D,KAAK,CAAC;;QAEpB;QACA1C,WAAW,GAAGhC,IAAI,IAAIiC,IAAI,CAACC,KAAK,CAACrB,CAAC,CAACsB,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACpD,IAAI,CAACnC,IAAI,EAAE;UACTC,OAAO,IAAIA,OAAO,CAAC+B,WAAW,CAAC;QACjC;;QAEA;QACA0B,WAAW,CAAC,CAAC;MACf,CAAC;;MAED;MACA7C,CAAC,CAAC+D,IAAI,GAAG,MAAM;QACb;QACA,IAAI/D,CAAC,CAACgE,UAAU,KAAK,CAAC,EAAE;UACtBhE,CAAC,CAAC8C,UAAU,CAAC,CAAC,CAAC;QACjB;QAEA9C,CAAC,CAACiE,IAAI,CAAC,CAAC;QACRjE,CAAC,CAACkE,SAAS,CAAClE,CAAC,CAACmE,KAAK,GAAG,CAAC,EAAEnE,CAAC,CAACoE,MAAM,GAAG,CAAC,CAAC;;QAEtC;QACA,IAAIC,iBAAiB,GAAI3D,CAAC,GAAGC,IAAI,GAAIX,CAAC,CAACkC,MAAM;QAC7ClC,CAAC,CAACsE,MAAM,CAACD,iBAAiB,CAAC;;QAE3B;QACA,IAAIE,QAAQ,GAAGvE,CAAC,CAACwE,KAAK,CAAChE,OAAO,CAACL,MAAM,CAACY,eAAe,CAAC,CAAC;QACvD,IAAI0D,MAAM,GAAGzE,CAAC,CAACwE,KAAK,CAAChE,OAAO,CAACL,MAAM,CAACa,aAAa,CAAC,CAAC;QACnDP,YAAY,GAAGT,CAAC,CAAC0E,SAAS,CAACH,QAAQ,EAAEE,MAAM,EAAExD,eAAe,CAAC;QAC7DjB,CAAC,CAAC2E,MAAM,CAAClE,YAAY,CAAC;QAEtB,IAAImE,CAAC,GAAG,CAAC;QACT,IAAIC,CAAC,GAAG,CAAC;;QAET;QACA,QAAOvE,SAAS;UACd,KAAK,cAAc;YACjBsE,CAAC,GAAG,CAACrE,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAI/B,CAAC,CAAC8E,GAAG,CAACpE,CAAC,CAAC,GAAGH,MAAM,CAACyB,CAAC,GAAGhC,CAAC,CAAC8E,GAAG,CAAE,CAACvE,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAIxB,MAAM,CAACwB,EAAE,GAAIrB,CAAC,CAAC;YAClGmE,CAAC,GAAG,CAACtE,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAI/B,CAAC,CAAC+E,GAAG,CAACrE,CAAC,CAAC,GAAGH,MAAM,CAACyB,CAAC,GAAGhC,CAAC,CAAC+E,GAAG,CAAE,CAACxE,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAIxB,MAAM,CAACwB,EAAE,GAAIrB,CAAC,CAAC;YAClG;UACF,KAAK,aAAa;YAChBkE,CAAC,GAAG,CAACrE,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAI/B,CAAC,CAAC8E,GAAG,CAACpE,CAAC,CAAC,GAAGH,MAAM,CAACyB,CAAC,GAAGhC,CAAC,CAAC8E,GAAG,CAAE,CAACvE,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAIxB,MAAM,CAACwB,EAAE,GAAIrB,CAAC,CAAC;YAClGmE,CAAC,GAAG,CAACtE,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAI/B,CAAC,CAAC+E,GAAG,CAACrE,CAAC,CAAC,GAAGH,MAAM,CAACyB,CAAC,GAAGhC,CAAC,CAAC+E,GAAG,CAAE,CAACxE,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAIxB,MAAM,CAACwB,EAAE,GAAIrB,CAAC,CAAC;YAClG;UACF,KAAK,UAAU;YACb,IAAIsE,cAAc,GAAG,GAAG,GAAGhF,CAAC,CAAC8E,GAAG,CAACvE,MAAM,CAAC6B,CAAC,GAAG1B,CAAC,CAAC;YAC9CkE,CAAC,GAAGI,cAAc,GAAGhF,CAAC,CAAC8E,GAAG,CAACpE,CAAC,CAAC;YAC7BmE,CAAC,GAAGG,cAAc,GAAGhF,CAAC,CAAC+E,GAAG,CAACrE,CAAC,CAAC;YAC7B;UACF,KAAK,WAAW;YACdkE,CAAC,GAAGrE,MAAM,CAACgC,CAAC,GAAGvC,CAAC,CAAC+E,GAAG,CAACxE,MAAM,CAACkB,CAAC,GAAGf,CAAC,GAAGH,MAAM,CAACkC,KAAK,CAAC;YACjDoC,CAAC,GAAGtE,MAAM,CAACiC,CAAC,GAAGxC,CAAC,CAAC+E,GAAG,CAACxE,MAAM,CAACmB,CAAC,GAAGhB,CAAC,CAAC;YAClC;QACJ;;QAEA;QACA,IAAIuE,WAAW,GAAG,CAAC,GAAG,GAAG,GAAGjF,CAAC,CAAC+E,GAAG,CAACrE,CAAC,GAAG,GAAG,CAAC;QAC1CkE,CAAC,IAAIK,WAAW;QAChBJ,CAAC,IAAII,WAAW;;QAEhB;QACA,IAAIrE,KAAK,KAAK,IAAI,EAAE;UAClBZ,CAAC,CAACkF,IAAI,CAACtE,KAAK,EAAEC,KAAK,EAAE+D,CAAC,EAAEC,CAAC,CAAC;QAC5B;;QAEA;QACAjE,KAAK,GAAGgE,CAAC;QACT/D,KAAK,GAAGgE,CAAC;;QAET;QACA,MAAMM,aAAa,GAAG,CAAC;QACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,aAAa,EAAEC,CAAC,EAAE,EAAE;UACtC;UACA1E,CAAC,IAAI,KAAK;;UAEV;UACA,IAAI2E,KAAK,GAAG,CAAC;UACb,IAAIC,KAAK,GAAG,CAAC;;UAEb;UACA,QAAOhF,SAAS;YACd,KAAK,cAAc;cACjB+E,KAAK,GAAG,CAAC9E,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAI/B,CAAC,CAAC8E,GAAG,CAACpE,CAAC,CAAC,GAAGH,MAAM,CAACyB,CAAC,GAAGhC,CAAC,CAAC8E,GAAG,CAAE,CAACvE,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAIxB,MAAM,CAACwB,EAAE,GAAIrB,CAAC,CAAC;cACtG4E,KAAK,GAAG,CAAC/E,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAI/B,CAAC,CAAC+E,GAAG,CAACrE,CAAC,CAAC,GAAGH,MAAM,CAACyB,CAAC,GAAGhC,CAAC,CAAC+E,GAAG,CAAE,CAACxE,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAIxB,MAAM,CAACwB,EAAE,GAAIrB,CAAC,CAAC;cACtG;YACF,KAAK,aAAa;cAChB2E,KAAK,GAAG,CAAC9E,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAI/B,CAAC,CAAC8E,GAAG,CAACpE,CAAC,CAAC,GAAGH,MAAM,CAACyB,CAAC,GAAGhC,CAAC,CAAC8E,GAAG,CAAE,CAACvE,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAIxB,MAAM,CAACwB,EAAE,GAAIrB,CAAC,CAAC;cACtG4E,KAAK,GAAG,CAAC/E,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAI/B,CAAC,CAAC+E,GAAG,CAACrE,CAAC,CAAC,GAAGH,MAAM,CAACyB,CAAC,GAAGhC,CAAC,CAAC+E,GAAG,CAAE,CAACxE,MAAM,CAACuB,CAAC,GAAGvB,MAAM,CAACwB,EAAE,IAAIxB,MAAM,CAACwB,EAAE,GAAIrB,CAAC,CAAC;cACtG;YACF,KAAK,UAAU;cACb,IAAIsE,cAAc,GAAG,GAAG,GAAGhF,CAAC,CAAC8E,GAAG,CAACvE,MAAM,CAAC6B,CAAC,GAAG1B,CAAC,CAAC;cAC9C2E,KAAK,GAAGL,cAAc,GAAGhF,CAAC,CAAC8E,GAAG,CAACpE,CAAC,CAAC;cACjC4E,KAAK,GAAGN,cAAc,GAAGhF,CAAC,CAAC+E,GAAG,CAACrE,CAAC,CAAC;cACjC;YACF,KAAK,WAAW;cACd2E,KAAK,GAAG9E,MAAM,CAACgC,CAAC,GAAGvC,CAAC,CAAC+E,GAAG,CAACxE,MAAM,CAACkB,CAAC,GAAGf,CAAC,GAAGH,MAAM,CAACkC,KAAK,CAAC;cACrD6C,KAAK,GAAG/E,MAAM,CAACiC,CAAC,GAAGxC,CAAC,CAAC+E,GAAG,CAACxE,MAAM,CAACmB,CAAC,GAAGhB,CAAC,CAAC;cACtC;UACJ;;UAEA;UACA,IAAIuE,WAAW,GAAG,CAAC,GAAG,GAAG,GAAGjF,CAAC,CAAC+E,GAAG,CAACrE,CAAC,GAAG,GAAG,CAAC;UAC1C2E,KAAK,IAAIJ,WAAW;UACpBK,KAAK,IAAIL,WAAW;;UAEpB;UACAjF,CAAC,CAACkF,IAAI,CAACtE,KAAK,EAAEC,KAAK,EAAEwE,KAAK,EAAEC,KAAK,CAAC;;UAElC;UACA1E,KAAK,GAAGyE,KAAK;UACbxE,KAAK,GAAGyE,KAAK;QACf;;QAEA;QACA,IAAItF,CAAC,CAACgE,UAAU,GAAG,CAAC,KAAK,CAAC,EAAE;UAC1BzC,MAAM,CAAC0C,IAAI,CAACjE,CAAC,CAACuF,GAAG,CAAC,CAAC,CAAC;QACtB;;QAEA;QACA7E,CAAC,IAAI,KAAK;;QAEV;QACAI,WAAW,GAAIJ,CAAC,GAAGC,IAAI,GAAIX,CAAC,CAACkC,MAAM;;QAEnC;QACA,MAAMsD,eAAe,GAAGpE,IAAI,CAACqE,GAAG,CAAC,GAAG,EAAErE,IAAI,CAACO,KAAK,CAAEjB,CAAC,GAAGC,IAAI,GAAI,GAAG,CAAC,CAAC;QACnE,IAAI6E,eAAe,KAAK3F,QAAQ,EAAE;UAChCC,WAAW,CAAC0F,eAAe,CAAC;QAC9B;;QAEA;QACAvE,eAAe,IAAI,KAAK;QACxB,IAAIA,eAAe,IAAI,CAAC,EAAE;UACxBF,eAAe,GAAGC,aAAa;UAC/BA,aAAa,GAAG,CAACA,aAAa,GAAG,CAAC,IAAIR,OAAO,CAACL,MAAM,CAACuF,MAAM;UAC3DzE,eAAe,GAAG,CAAC;QACrB;QAEA,IAAIP,CAAC,GAAGC,IAAI,EAAE;UACZX,CAAC,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC;UACZ/F,YAAY,CAAC,KAAK,CAAC;;UAEnB;UACA,MAAMgG,UAAU,GAAG5F,CAAC,CAACuF,GAAG,CAAC,CAAC;UAC1BhG,iBAAiB,IAAIA,iBAAiB,CAACqG,UAAU,EAAErE,MAAM,CAAC;QAC5D;QAEAvB,CAAC,CAAC6F,GAAG,CAAC,CAAC;MACT,CAAC;;MAED;MACA7F,CAAC,CAAC8F,eAAe,GAAG,MAAM;QACxB3E,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACrB,CAAC,CAACsB,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAC5ClC,OAAO,IAAIA,OAAO,CAAC+B,WAAW,CAAC;QAC/B0B,WAAW,CAAC,CAAC;MACf,CAAC;;MAED;MACA7C,CAAC,CAACZ,OAAO,GAAI2G,OAAO,IAAK;QACvB5E,WAAW,GAAG4E,OAAO;QACrBlD,WAAW,CAAC,CAAC;MACf,CAAC;IACH,CAAC;;IAED;IACAnD,UAAU,CAACsG,OAAO,GAAG,IAAIjH,EAAE,CAACgB,MAAM,EAAEN,SAAS,CAACuG,OAAO,CAAC;;IAEtD;IACA,OAAO,MAAM;MACX,IAAItG,UAAU,CAACsG,OAAO,EAAE;QACtBtG,UAAU,CAACsG,OAAO,CAACC,MAAM,CAAC,CAAC;MAC7B;IACF,CAAC;EACH,CAAC,EAAE,CAAC9G,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ;EACA,MAAM2G,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIpG,UAAU,CAACsG,OAAO,IAAItG,UAAU,CAACsG,OAAO,CAACF,eAAe,EAAE;MAC5DpG,UAAU,CAACsG,OAAO,CAACF,eAAe,CAAC,CAAC;IACtC;EACF,CAAC;;EAED;EACA,MAAMI,YAAY,GAAIH,OAAO,IAAK;IAChC,IAAIrG,UAAU,CAACsG,OAAO,IAAItG,UAAU,CAACsG,OAAO,CAAC5G,OAAO,EAAE;MACpDM,UAAU,CAACsG,OAAO,CAAC5G,OAAO,CAAC2G,OAAO,CAAC;IACrC;EACF,CAAC;EAED,oBACE9G,OAAA;IAAKkH,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACrCnH,OAAA;MAAKoH,GAAG,EAAE5G,SAAU;MAAC0G,SAAS,EAAC;IAAgB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EACrD9G,SAAS,iBACRV,OAAA;MAAKkH,SAAS,EAAC,wBAAwB;MAAAC,QAAA,gBACrCnH,OAAA;QAAKkH,SAAS,EAAC,cAAc;QAACzC,KAAK,EAAE;UAAES,KAAK,EAAE,GAAGtE,QAAQ;QAAI;MAAE;QAAAyG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACtExH,OAAA;QAAMkH,SAAS,EAAC,eAAe;QAAAC,QAAA,GAAEvG,QAAQ,EAAC,GAAC;MAAA;QAAAyG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CACN,EACA,CAAC9G,SAAS,iBACTV,OAAA;MAAKkH,SAAS,EAAC,iBAAiB;MAAAC,QAAA,eAC9BnH,OAAA;QAAAmH,QAAA,EAAM;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjH,EAAA,CArYIN,WAAW;AAAAwH,EAAA,GAAXxH,WAAW;AAuYjB,eAAeA,WAAW;AAAC,IAAAwH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}