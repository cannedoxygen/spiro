{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiroCanvas = ({\n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = p => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [{\n        name: \"Neon Mirage\",\n        colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"],\n        rarity: \"Common\"\n      }, {\n        name: \"Digital Dream\",\n        colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"],\n        rarity: \"Uncommon\"\n      }, {\n        name: \"Crystal Sunset\",\n        colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"],\n        rarity: \"Rare\"\n      }, {\n        name: \"Cyber Haze\",\n        colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"],\n        rarity: \"Super Rare\"\n      }, {\n        name: \"Pastel Vapor\",\n        colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"],\n        rarity: \"Legendary\"\n      }];\n\n      // Shape rarity distribution - 5 beautiful spirograph patterns\n      const shapeRarity = {\n        \"Classic\": \"Common\",\n        // 40%\n        \"Flower\": \"Uncommon\",\n        // 30%\n        \"Star\": \"Rare\",\n        // 20% \n        \"Orbital\": \"Super Rare\",\n        // 8%\n        \"Galaxy\": \"Legendary\" // 2%\n      };\n\n      // Multiple layer canvases\n      let mainCanvas; // Main visible canvas with black background\n      let layerCanvases = []; // Array of layer graphics for each color\n      let finalOutput; // Final combined output\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let currentColorIndex = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n\n      // Layer tracking\n      let totalLayers = 5; // Match number of colors in palette\n      let currentLayer = 0;\n      let layerCompletionPoints = []; // Points at which to switch layers\n\n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Calculate the maximum boundaries of the pattern to ensure it fits\n      const calculatePatternBoundaries = () => {\n        let maxX = 0;\n        let maxY = 0;\n\n        // Sample many points to find the maximum extent\n        for (let step = 0; step < maxT; step += 0.1) {\n          let x = 0;\n          let y = 0;\n\n          // Calculate position based on shape type\n          switch (shapeType) {\n            case \"Classic\":\n              x = (params.R - params.r) * p.cos(step) + params.d * p.cos((params.R - params.r) / params.r * step);\n              y = (params.R - params.r) * p.sin(step) - params.d * p.sin((params.R - params.r) / params.r * step);\n              break;\n            case \"Flower\":\n              x = (params.R - params.r) * p.cos(step) + params.d * p.cos((params.R - params.r) / params.r * step);\n              y = (params.R - params.r) * p.sin(step) - params.d * p.sin((params.R - params.r) / params.r * step);\n\n              // Add petal effect\n              const petalFactor = p.sin(step * params.petals) * params.petalSize;\n              x *= 1 + petalFactor;\n              y *= 1 + petalFactor;\n              break;\n            case \"Star\":\n              const innerR = params.inner; // Inner radius for star effect\n              const outerR = params.outer; // Outer radius for star effect\n              const starPoints = params.points; // Number of points in the star\n\n              // Create star effect with sine modulation\n              const starR = innerR + (outerR - innerR) * p.abs(p.sin(step * starPoints / 2));\n              x = starR * p.cos(step);\n              y = starR * p.sin(step);\n\n              // Add spirograph motion\n              const orbX = params.orbSize * p.cos(step * params.orbSpeed);\n              const orbY = params.orbSize * p.sin(step * params.orbSpeed);\n              x += orbX;\n              y += orbY;\n              break;\n            case \"Orbital\":\n              // Primary orbit\n              const primaryX = params.primaryRadius * p.cos(step);\n              const primaryY = params.primaryRadius * p.sin(step);\n\n              // Secondary orbit\n              const secondaryX = params.secondaryRadius * p.cos(step * params.secondarySpeed);\n              const secondaryY = params.secondaryRadius * p.sin(step * params.secondarySpeed);\n\n              // Tertiary orbit\n              const tertiaryX = params.tertiaryRadius * p.cos(step * params.tertiarySpeed);\n              const tertiaryY = params.tertiaryRadius * p.sin(step * params.tertiarySpeed);\n\n              // Combine all orbits\n              x = primaryX + secondaryX + tertiaryX;\n              y = primaryY + secondaryY + tertiaryY;\n              break;\n            case \"Galaxy\":\n              // Spiral galaxy effect\n              const spiralR = params.baseRadius * p.exp(params.growthRate * step);\n              x = spiralR * p.cos(step);\n              y = spiralR * p.sin(step);\n\n              // Add warping effect\n              const warpX = params.warpAmount * p.sin(step * params.warpFrequency) * p.cos(step * 2);\n              const warpY = params.warpAmount * p.cos(step * params.warpFrequency) * p.sin(step * 2);\n              x += warpX;\n              y += warpY;\n              break;\n          }\n\n          // Update max boundaries\n          maxX = Math.max(maxX, Math.abs(x));\n          maxY = Math.max(maxY, Math.abs(y));\n        }\n        return {\n          maxX,\n          maxY\n        };\n      };\n\n      // Get the scale factor needed to fit the pattern\n      const getScaleFactor = () => {\n        const {\n          maxX,\n          maxY\n        } = calculatePatternBoundaries();\n        const maxExtent = Math.max(maxX, maxY);\n\n        // Canvas size is 600x600, center is at 300,300\n        // Leave a 50px margin on all sides\n        const maxAllowedExtent = 250; // (600/2 - 50)\n\n        // If pattern is too big, scale it down\n        if (maxExtent > maxAllowedExtent) {\n          return maxAllowedExtent / maxExtent;\n        }\n\n        // Otherwise, keep original scale\n        return 1.0;\n      };\n\n      // Get the final image when completed\n      const generateFinalOutput = () => {\n        // Create two separate graphics:\n        // 1. The background canvas (black)\n        let backgroundCanvas = p.createGraphics(600, 600);\n        backgroundCanvas.background(0); // BLACK BACKGROUND\n\n        // 2. The transparent spirograph with all layers merged (but no background)\n        let transparentSpiro = p.createGraphics(600, 600);\n        transparentSpiro.clear(); // Completely transparent\n\n        // Overlay all layers onto the transparent spirograph\n        for (let i = 0; i < layerCanvases.length; i++) {\n          transparentSpiro.image(layerCanvases[i], 0, 0);\n        }\n\n        // Return just the transparent spirograph - the black background stays in the canvas\n        return transparentSpiro;\n      };\n\n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Classic - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Flower - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Star - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // Orbital - Super Rare 8%\n        } else {\n          shapeIndex = 4; // Galaxy - Legendary 2%\n        }\n        params = {}; // Reset params\n\n        switch (shapeIndex) {\n          case 0:\n            // Classic (Hypotrochoid)\n            shapeType = \"Classic\";\n            params.R = p.random(180, 220); // Fixed circle radius\n            params.r = p.random(70, 90); // Moving circle radius\n            params.d = p.random(110, 140); // Pen offset\n\n            // Calculate number of cycles to complete the pattern\n            const gcd = findGCD(params.R, params.r);\n            const cycles = params.r / gcd;\n            maxT = p.TWO_PI * cycles;\n            break;\n          case 1:\n            // Flower (Modified Hypotrochoid)\n            shapeType = \"Flower\";\n            params.R = p.random(180, 220); // Fixed circle radius\n            params.r = p.random(70, 90); // Moving circle radius\n            params.d = p.random(110, 140); // Pen offset\n\n            // Flower-specific parameters\n            params.petals = p.int(p.random(4, 12)); // Number of petals\n            params.petalSize = p.random(0.05, 0.15); // Size of petal effect\n\n            // Calculate cycles\n            const gcd2 = findGCD(params.R, params.r);\n            const cycles2 = params.r / gcd2;\n            // Need more cycles to complete the pattern with petals\n            maxT = p.TWO_PI * cycles2 * 1.5;\n            break;\n          case 2:\n            // Star\n            shapeType = \"Star\";\n            params.inner = p.random(50, 100); // Inner radius\n            params.outer = p.random(150, 220); // Outer radius\n            params.points = p.int(p.random(5, 10)); // Number of star points\n\n            // Orbital motion parameters\n            params.orbSize = p.random(30, 60); // Size of orbit\n            params.orbSpeed = p.random(2, 5); // Speed of orbit\n\n            // Calculate cycles - need to complete star pattern\n            maxT = p.TWO_PI * 4; // Multiple rotations for more complex pattern\n            break;\n          case 3:\n            // Orbital (Multi-orbit system)\n            shapeType = \"Orbital\";\n\n            // Multiple orbit radiuses\n            params.primaryRadius = p.random(120, 160);\n            params.secondaryRadius = p.random(60, 90);\n            params.tertiaryRadius = p.random(20, 40);\n\n            // Orbit speeds\n            params.secondarySpeed = p.random(2, 4);\n            params.tertiarySpeed = p.random(5, 9);\n\n            // Calculate cycles - need to complete all orbits\n            const lcm1 = 1 * params.secondarySpeed / findGCD(1, params.secondarySpeed);\n            const lcm2 = lcm1 * params.tertiarySpeed / findGCD(lcm1, params.tertiarySpeed);\n            maxT = p.TWO_PI * lcm2;\n            break;\n          case 4:\n            // Galaxy (Logarithmic spiral with effects)\n            shapeType = \"Galaxy\";\n\n            // Spiral parameters\n            params.baseRadius = p.random(10, 25);\n            params.growthRate = p.random(0.01, 0.03);\n\n            // Warping effect parameters\n            params.warpAmount = p.random(30, 60);\n            params.warpFrequency = p.random(1, 3);\n\n            // Multiple rotations to create full galaxy\n            maxT = p.TWO_PI * 6;\n            break;\n        }\n\n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 4);\n\n        // Set up layer transitions - divide maxT into segments for each layer\n        layerCompletionPoints = [];\n        for (let i = 1; i < totalLayers; i++) {\n          layerCompletionPoints.push(i / totalLayers * maxT);\n        }\n        layerCompletionPoints.push(maxT); // Final completion point\n\n        rarityText = shapeRarity[shapeType];\n\n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: {\n            ...params\n          }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        // Clear all canvases\n        p.background(0);\n        mainCanvas.background(0);\n\n        // Reset layer canvases\n        layerCanvases = [];\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background for each layer\n          layerCanvases.push(layerCanvas);\n        }\n        p.randomSeed(currentSeed);\n\n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        totalLayers = palette.colors.length; // Match layers to palette colors\n\n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n\n        // Reset drawing variables\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        currentColorIndex = 0;\n        currentLayer = 0;\n\n        // Pick a shape type\n        selectShapeType();\n\n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n\n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function () {\n        // Create main canvas with black background\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        canvas.style('background-color', 'black'); // Ensure canvas always shows black\n\n        // Initialize main drawing canvas with black background\n        mainCanvas = p.createGraphics(600, 600);\n        mainCanvas.background(0);\n\n        // Initialize layer canvases - one for each color\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background\n          layerCanvases.push(layerCanvas);\n        }\n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n\n        // Apply same settings to all layer canvases\n        for (let canvas of layerCanvases) {\n          canvas.strokeJoin(p.ROUND);\n          canvas.strokeCap(p.ROUND);\n        }\n\n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n\n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function () {\n        // Clear main canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n\n        // Display in-progress work\n        p.image(mainCanvas, 0, 0);\n\n        // Display info\n        p.displayInfo();\n\n        // Get the appropriate scale factor to fit pattern in canvas\n        const scaleFactor = getScaleFactor();\n\n        // Draw on the main canvas\n        mainCanvas.push();\n        mainCanvas.translate(mainCanvas.width / 2, mainCanvas.height / 2);\n\n        // Add rotation that completes during drawing\n        let fullRotationAngle = t / maxT * p.TWO_PI;\n        mainCanvas.rotate(fullRotationAngle);\n\n        // Current layer canvas (for separate color layers)\n        let currentLayerCanvas = layerCanvases[currentLayer];\n        currentLayerCanvas.push();\n        currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n        currentLayerCanvas.rotate(fullRotationAngle);\n\n        // Set color for current layer\n        currentColor = palette.colors[currentLayer];\n        mainCanvas.stroke(currentColor);\n        currentLayerCanvas.stroke(currentColor);\n        mainCanvas.strokeWeight(1);\n        currentLayerCanvas.strokeWeight(1);\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch (shapeType) {\n          case \"Classic\":\n            x = (params.R - params.r) * p.cos(t) + params.d * p.cos((params.R - params.r) / params.r * t);\n            y = (params.R - params.r) * p.sin(t) - params.d * p.sin((params.R - params.r) / params.r * t);\n            break;\n          case \"Flower\":\n            x = (params.R - params.r) * p.cos(t) + params.d * p.cos((params.R - params.r) / params.r * t);\n            y = (params.R - params.r) * p.sin(t) - params.d * p.sin((params.R - params.r) / params.r * t);\n\n            // Add petal effect\n            const petalFactor = p.sin(t * params.petals) * params.petalSize;\n            x *= 1 + petalFactor;\n            y *= 1 + petalFactor;\n            break;\n          case \"Star\":\n            const innerR = params.inner; // Inner radius for star effect\n            const outerR = params.outer; // Outer radius for star effect\n            const starPoints = params.points; // Number of points in the star\n\n            // Create star effect with sine modulation\n            const starR = innerR + (outerR - innerR) * p.abs(p.sin(t * starPoints / 2));\n            x = starR * p.cos(t);\n            y = starR * p.sin(t);\n\n            // Add spirograph motion\n            const orbX = params.orbSize * p.cos(t * params.orbSpeed);\n            const orbY = params.orbSize * p.sin(t * params.orbSpeed);\n            x += orbX;\n            y += orbY;\n            break;\n          case \"Orbital\":\n            // Primary orbit\n            const primaryX = params.primaryRadius * p.cos(t);\n            const primaryY = params.primaryRadius * p.sin(t);\n\n            // Secondary orbit\n            const secondaryX = params.secondaryRadius * p.cos(t * params.secondarySpeed);\n            const secondaryY = params.secondaryRadius * p.sin(t * params.secondarySpeed);\n\n            // Tertiary orbit\n            const tertiaryX = params.tertiaryRadius * p.cos(t * params.tertiarySpeed);\n            const tertiaryY = params.tertiaryRadius * p.sin(t * params.tertiarySpeed);\n\n            // Combine all orbits\n            x = primaryX + secondaryX + tertiaryX;\n            y = primaryY + secondaryY + tertiaryY;\n            break;\n          case \"Galaxy\":\n            // Spiral galaxy effect\n            const spiralR = params.baseRadius * p.exp(params.growthRate * t);\n            x = spiralR * p.cos(t);\n            y = spiralR * p.sin(t);\n\n            // Add warping effect\n            const warpX = params.warpAmount * p.sin(t * params.warpFrequency) * p.cos(t * 2);\n            const warpY = params.warpAmount * p.cos(t * params.warpFrequency) * p.sin(t * 2);\n            x += warpX;\n            y += warpY;\n            break;\n        }\n\n        // Apply dynamic scaling to ensure pattern fits\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment on both canvases\n        if (prevX !== null) {\n          mainCanvas.line(prevX, prevY, x, y);\n          currentLayerCanvas.line(prevX, prevY, x, y);\n        }\n\n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n\n          // Check if we've reached a layer transition point\n          if (currentLayer < layerCompletionPoints.length - 1 && t >= layerCompletionPoints[currentLayer]) {\n            // Time to move to next layer\n            currentLayer++;\n            // Make sure we don't go beyond the array bounds\n            if (currentLayer < layerCanvases.length) {\n              currentLayerCanvas = layerCanvases[currentLayer];\n              currentLayerCanvas.push();\n              currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n              // Apply rotation to the new layer\n              let fullRotationAngle = t / maxT * p.TWO_PI;\n              currentLayerCanvas.rotate(fullRotationAngle);\n              currentColor = palette.colors[Math.min(currentLayer, palette.colors.length - 1)];\n              mainCanvas.stroke(currentColor);\n              currentLayerCanvas.stroke(currentColor);\n            }\n          }\n\n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n\n          // Re-calculate based on shape type with updated t\n          switch (shapeType) {\n            case \"Classic\":\n              nextX = (params.R - params.r) * p.cos(t) + params.d * p.cos((params.R - params.r) / params.r * t);\n              nextY = (params.R - params.r) * p.sin(t) - params.d * p.sin((params.R - params.r) / params.r * t);\n              break;\n            case \"Flower\":\n              nextX = (params.R - params.r) * p.cos(t) + params.d * p.cos((params.R - params.r) / params.r * t);\n              nextY = (params.R - params.r) * p.sin(t) - params.d * p.sin((params.R - params.r) / params.r * t);\n\n              // Add petal effect\n              const petalFactor = p.sin(t * params.petals) * params.petalSize;\n              nextX *= 1 + petalFactor;\n              nextY *= 1 + petalFactor;\n              break;\n            case \"Star\":\n              const innerR = params.inner; // Inner radius for star effect\n              const outerR = params.outer; // Outer radius for star effect\n              const starPoints = params.points; // Number of points in the star\n\n              // Create star effect with sine modulation\n              const starR = innerR + (outerR - innerR) * p.abs(p.sin(t * starPoints / 2));\n              nextX = starR * p.cos(t);\n              nextY = starR * p.sin(t);\n\n              // Add spirograph motion\n              const orbX = params.orbSize * p.cos(t * params.orbSpeed);\n              const orbY = params.orbSize * p.sin(t * params.orbSpeed);\n              nextX += orbX;\n              nextY += orbY;\n              break;\n            case \"Orbital\":\n              // Primary orbit\n              const primaryX = params.primaryRadius * p.cos(t);\n              const primaryY = params.primaryRadius * p.sin(t);\n\n              // Secondary orbit\n              const secondaryX = params.secondaryRadius * p.cos(t * params.secondarySpeed);\n              const secondaryY = params.secondaryRadius * p.sin(t * params.secondarySpeed);\n\n              // Tertiary orbit\n              const tertiaryX = params.tertiaryRadius * p.cos(t * params.tertiarySpeed);\n              const tertiaryY = params.tertiaryRadius * p.sin(t * params.tertiarySpeed);\n\n              // Combine all orbits\n              nextX = primaryX + secondaryX + tertiaryX;\n              nextY = primaryY + secondaryY + tertiaryY;\n              break;\n            case \"Galaxy\":\n              // Spiral galaxy effect\n              const spiralR = params.baseRadius * p.exp(params.growthRate * t);\n              nextX = spiralR * p.cos(t);\n              nextY = spiralR * p.sin(t);\n\n              // Add warping effect\n              const warpX = params.warpAmount * p.sin(t * params.warpFrequency) * p.cos(t * 2);\n              const warpY = params.warpAmount * p.cos(t * params.warpFrequency) * p.sin(t * 2);\n              nextX += warpX;\n              nextY += warpY;\n              break;\n          }\n\n          // Apply dynamic scaling to ensure pattern fits\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n\n          // Draw the line on both canvases\n          mainCanvas.line(prevX, prevY, nextX, nextY);\n          currentLayerCanvas.line(prevX, prevY, nextX, nextY);\n\n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n\n        // Increment time\n        t += 0.015;\n\n        // Update global rotation\n        globalAngle = t / maxT * p.TWO_PI;\n\n        // Update progress\n        const currentProgress = Math.min(100, Math.round(t / maxT * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n\n        // End current push transforms\n        mainCanvas.pop();\n        currentLayerCanvas.pop();\n\n        // Check if drawing is complete\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n\n          // Make sure to end all open transforms\n          try {\n            mainCanvas.pop();\n          } catch (e) {\n            // Ignore if already popped\n          }\n\n          // Safely pop any open layer transforms\n          for (let i = 0; i < layerCanvases.length; i++) {\n            try {\n              layerCanvases[i].pop();\n            } catch (e) {\n              // Ignore errors if there's no matching push\n              console.log(\"Note: Layer\", i, \"didn't need popping\");\n            }\n          }\n\n          // Generate final output with black background and all layers\n          finalOutput = generateFinalOutput();\n\n          // Notify parent that drawing is complete\n          onDrawingComplete && onDrawingComplete(finalOutput);\n        }\n      };\n\n      // Display info on the canvas\n      p.displayInfo = function () {\n        // Create a semi-transparent background for the text\n        p.fill(0, 200);\n        p.noStroke();\n        p.rect(10, 10, 380, 100, 10);\n\n        // Display NFT info\n        p.textSize(24);\n        p.fill(255);\n        p.text(`Spyro #${currentSeed}`, 20, 40);\n        p.textSize(16);\n        p.fill(palette.colors[0]);\n        p.text(`ðŸŒŸ ${shapeType} Â· ${rarityText}`, 20, 70);\n        p.fill(palette.colors[1]);\n        p.text(`ðŸŽ¨ Palette: ${palette.name} Â· ${palette.rarity}`, 20, 95);\n      };\n\n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n\n      // Change to a specific seed\n      p.setSeed = newSeed => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n\n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spiro-canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: canvasRef,\n      className: \"canvas-wrapper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 729,\n      columnNumber: 7\n    }, this), isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"progress-text\",\n        children: [progress, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 9\n    }, this), !isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-complete\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Drawing complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 737,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 728,\n    columnNumber: 5\n  }, this);\n};\n_s(SpiroCanvas, \"vG581M3D6HIZspCQRmOO1WkIWxY=\");\n_c = SpiroCanvas;\nexport default SpiroCanvas;\nvar _c;\n$RefreshReg$(_c, \"SpiroCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","p5","jsxDEV","_jsxDEV","SpiroCanvas","seed","setSeed","onShapeChange","onPaletteChange","onDrawingComplete","_s","canvasRef","p5Instance","isDrawing","setIsDrawing","progress","setProgress","sketch","p","palettes","name","colors","rarity","shapeRarity","mainCanvas","layerCanvases","finalOutput","shapeType","params","palette","currentColor","t","maxT","prevX","prevY","globalAngle","currentColorIndex","rarityText","currentSeed","Math","floor","random","totalLayers","currentLayer","layerCompletionPoints","findGCD","a","b","round","calculatePatternBoundaries","maxX","maxY","step","x","y","R","r","cos","d","sin","petalFactor","petals","petalSize","innerR","inner","outerR","outer","starPoints","points","starR","abs","orbX","orbSize","orbSpeed","orbY","primaryX","primaryRadius","primaryY","secondaryX","secondaryRadius","secondarySpeed","secondaryY","tertiaryX","tertiaryRadius","tertiarySpeed","tertiaryY","spiralR","baseRadius","exp","growthRate","warpX","warpAmount","warpFrequency","warpY","max","getScaleFactor","maxExtent","maxAllowedExtent","generateFinalOutput","backgroundCanvas","createGraphics","background","transparentSpiro","clear","i","length","image","selectShapeType","shapeRoll","shapeIndex","gcd","cycles","TWO_PI","int","gcd2","cycles2","lcm1","lcm2","push","type","resetSketch","layerCanvas","randomSeed","paletteRoll","strokeWeight","noFill","console","log","isLooping","loop","setup","canvas","createCanvas","style","frameRate","strokeJoin","ROUND","strokeCap","draw","frameCount","displayInfo","scaleFactor","translate","width","height","fullRotationAngle","rotate","currentLayerCanvas","stroke","line","stepsPerFrame","min","nextX","nextY","currentProgress","pop","noLoop","e","fill","noStroke","rect","textSize","text","generateNewSeed","newSeed","current","remove","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\n\nconst SpiroCanvas = ({ \n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = (p) => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [\n        {name: \"Neon Mirage\", colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"], rarity: \"Common\"},\n        {name: \"Digital Dream\", colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"], rarity: \"Uncommon\"},\n        {name: \"Crystal Sunset\", colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"], rarity: \"Rare\"},\n        {name: \"Cyber Haze\", colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"], rarity: \"Super Rare\"},\n        {name: \"Pastel Vapor\", colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"], rarity: \"Legendary\"}\n      ];\n\n      // Shape rarity distribution - 5 beautiful spirograph patterns\n      const shapeRarity = {\n        \"Classic\": \"Common\", // 40%\n        \"Flower\": \"Uncommon\", // 30%\n        \"Star\": \"Rare\", // 20% \n        \"Orbital\": \"Super Rare\", // 8%\n        \"Galaxy\": \"Legendary\" // 2%\n      };\n\n      // Multiple layer canvases\n      let mainCanvas; // Main visible canvas with black background\n      let layerCanvases = []; // Array of layer graphics for each color\n      let finalOutput; // Final combined output\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let currentColorIndex = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n      \n      // Layer tracking\n      let totalLayers = 5; // Match number of colors in palette\n      let currentLayer = 0;\n      let layerCompletionPoints = []; // Points at which to switch layers\n      \n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Calculate the maximum boundaries of the pattern to ensure it fits\n      const calculatePatternBoundaries = () => {\n        let maxX = 0;\n        let maxY = 0;\n        \n        // Sample many points to find the maximum extent\n        for (let step = 0; step < maxT; step += 0.1) {\n          let x = 0;\n          let y = 0;\n          \n          // Calculate position based on shape type\n          switch(shapeType) {\n            case \"Classic\":\n              x = (params.R - params.r) * p.cos(step) + params.d * p.cos(((params.R - params.r) / params.r) * step);\n              y = (params.R - params.r) * p.sin(step) - params.d * p.sin(((params.R - params.r) / params.r) * step);\n              break;\n            case \"Flower\":\n              x = (params.R - params.r) * p.cos(step) + params.d * p.cos(((params.R - params.r) / params.r) * step);\n              y = (params.R - params.r) * p.sin(step) - params.d * p.sin(((params.R - params.r) / params.r) * step);\n              \n              // Add petal effect\n              const petalFactor = p.sin(step * params.petals) * params.petalSize;\n              x *= (1 + petalFactor);\n              y *= (1 + petalFactor);\n              break;\n            case \"Star\":\n              const innerR = params.inner; // Inner radius for star effect\n              const outerR = params.outer; // Outer radius for star effect\n              const starPoints = params.points; // Number of points in the star\n              \n              // Create star effect with sine modulation\n              const starR = innerR + (outerR - innerR) * p.abs(p.sin(step * starPoints / 2));\n              x = starR * p.cos(step);\n              y = starR * p.sin(step);\n              \n              // Add spirograph motion\n              const orbX = params.orbSize * p.cos(step * params.orbSpeed);\n              const orbY = params.orbSize * p.sin(step * params.orbSpeed);\n              \n              x += orbX;\n              y += orbY;\n              break;\n            case \"Orbital\":\n              // Primary orbit\n              const primaryX = params.primaryRadius * p.cos(step);\n              const primaryY = params.primaryRadius * p.sin(step);\n              \n              // Secondary orbit\n              const secondaryX = params.secondaryRadius * p.cos(step * params.secondarySpeed);\n              const secondaryY = params.secondaryRadius * p.sin(step * params.secondarySpeed);\n              \n              // Tertiary orbit\n              const tertiaryX = params.tertiaryRadius * p.cos(step * params.tertiarySpeed);\n              const tertiaryY = params.tertiaryRadius * p.sin(step * params.tertiarySpeed);\n              \n              // Combine all orbits\n              x = primaryX + secondaryX + tertiaryX;\n              y = primaryY + secondaryY + tertiaryY;\n              break;\n            case \"Galaxy\":\n              // Spiral galaxy effect\n              const spiralR = params.baseRadius * p.exp(params.growthRate * step);\n              x = spiralR * p.cos(step);\n              y = spiralR * p.sin(step);\n              \n              // Add warping effect\n              const warpX = params.warpAmount * p.sin(step * params.warpFrequency) * p.cos(step * 2);\n              const warpY = params.warpAmount * p.cos(step * params.warpFrequency) * p.sin(step * 2);\n              \n              x += warpX;\n              y += warpY;\n              break;\n          }\n          \n          // Update max boundaries\n          maxX = Math.max(maxX, Math.abs(x));\n          maxY = Math.max(maxY, Math.abs(y));\n        }\n        \n        return { maxX, maxY };\n      };\n\n      // Get the scale factor needed to fit the pattern\n      const getScaleFactor = () => {\n        const { maxX, maxY } = calculatePatternBoundaries();\n        const maxExtent = Math.max(maxX, maxY);\n        \n        // Canvas size is 600x600, center is at 300,300\n        // Leave a 50px margin on all sides\n        const maxAllowedExtent = 250; // (600/2 - 50)\n        \n        // If pattern is too big, scale it down\n        if (maxExtent > maxAllowedExtent) {\n          return maxAllowedExtent / maxExtent;\n        }\n        \n        // Otherwise, keep original scale\n        return 1.0;\n      };\n\n      // Get the final image when completed\n      const generateFinalOutput = () => {\n        // Create two separate graphics:\n        // 1. The background canvas (black)\n        let backgroundCanvas = p.createGraphics(600, 600);\n        backgroundCanvas.background(0); // BLACK BACKGROUND\n        \n        // 2. The transparent spirograph with all layers merged (but no background)\n        let transparentSpiro = p.createGraphics(600, 600);\n        transparentSpiro.clear(); // Completely transparent\n        \n        // Overlay all layers onto the transparent spirograph\n        for (let i = 0; i < layerCanvases.length; i++) {\n          transparentSpiro.image(layerCanvases[i], 0, 0);\n        }\n        \n        // Return just the transparent spirograph - the black background stays in the canvas\n        return transparentSpiro;\n      };\n      \n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        \n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Classic - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Flower - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Star - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // Orbital - Super Rare 8%\n        } else {\n          shapeIndex = 4; // Galaxy - Legendary 2%\n        }\n        \n        params = {}; // Reset params\n        \n        switch(shapeIndex) {\n          case 0: // Classic (Hypotrochoid)\n            shapeType = \"Classic\";\n            params.R = p.random(180, 220); // Fixed circle radius\n            params.r = p.random(70, 90); // Moving circle radius\n            params.d = p.random(110, 140); // Pen offset\n            \n            // Calculate number of cycles to complete the pattern\n            const gcd = findGCD(params.R, params.r);\n            const cycles = params.r / gcd;\n            maxT = p.TWO_PI * cycles;\n            break;\n            \n          case 1: // Flower (Modified Hypotrochoid)\n            shapeType = \"Flower\";\n            params.R = p.random(180, 220); // Fixed circle radius\n            params.r = p.random(70, 90); // Moving circle radius\n            params.d = p.random(110, 140); // Pen offset\n            \n            // Flower-specific parameters\n            params.petals = p.int(p.random(4, 12)); // Number of petals\n            params.petalSize = p.random(0.05, 0.15); // Size of petal effect\n            \n            // Calculate cycles\n            const gcd2 = findGCD(params.R, params.r);\n            const cycles2 = params.r / gcd2;\n            // Need more cycles to complete the pattern with petals\n            maxT = p.TWO_PI * cycles2 * 1.5;\n            break;\n            \n          case 2: // Star\n            shapeType = \"Star\";\n            params.inner = p.random(50, 100); // Inner radius\n            params.outer = p.random(150, 220); // Outer radius\n            params.points = p.int(p.random(5, 10)); // Number of star points\n            \n            // Orbital motion parameters\n            params.orbSize = p.random(30, 60); // Size of orbit\n            params.orbSpeed = p.random(2, 5); // Speed of orbit\n            \n            // Calculate cycles - need to complete star pattern\n            maxT = p.TWO_PI * 4; // Multiple rotations for more complex pattern\n            break;\n            \n          case 3: // Orbital (Multi-orbit system)\n            shapeType = \"Orbital\";\n            \n            // Multiple orbit radiuses\n            params.primaryRadius = p.random(120, 160);\n            params.secondaryRadius = p.random(60, 90);\n            params.tertiaryRadius = p.random(20, 40);\n            \n            // Orbit speeds\n            params.secondarySpeed = p.random(2, 4);\n            params.tertiarySpeed = p.random(5, 9);\n            \n            // Calculate cycles - need to complete all orbits\n            const lcm1 = (1 * params.secondarySpeed) / findGCD(1, params.secondarySpeed);\n            const lcm2 = (lcm1 * params.tertiarySpeed) / findGCD(lcm1, params.tertiarySpeed);\n            maxT = p.TWO_PI * lcm2;\n            break;\n            \n          case 4: // Galaxy (Logarithmic spiral with effects)\n            shapeType = \"Galaxy\";\n            \n            // Spiral parameters\n            params.baseRadius = p.random(10, 25);\n            params.growthRate = p.random(0.01, 0.03);\n            \n            // Warping effect parameters\n            params.warpAmount = p.random(30, 60);\n            params.warpFrequency = p.random(1, 3);\n            \n            // Multiple rotations to create full galaxy\n            maxT = p.TWO_PI * 6;\n            break;\n        }\n        \n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 4);\n        \n        // Set up layer transitions - divide maxT into segments for each layer\n        layerCompletionPoints = [];\n        for (let i = 1; i < totalLayers; i++) {\n          layerCompletionPoints.push((i / totalLayers) * maxT);\n        }\n        layerCompletionPoints.push(maxT); // Final completion point\n        \n        rarityText = shapeRarity[shapeType];\n        \n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: { ...params }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        // Clear all canvases\n        p.background(0);\n        mainCanvas.background(0);\n        \n        // Reset layer canvases\n        layerCanvases = [];\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background for each layer\n          layerCanvases.push(layerCanvas);\n        }\n        \n        p.randomSeed(currentSeed);\n        \n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        \n        totalLayers = palette.colors.length; // Match layers to palette colors\n        \n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n        \n        // Reset drawing variables\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        currentColorIndex = 0;\n        currentLayer = 0;\n        \n        // Pick a shape type\n        selectShapeType();\n        \n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        \n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n        \n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        \n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function() {\n        // Create main canvas with black background\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        canvas.style('background-color', 'black'); // Ensure canvas always shows black\n        \n        // Initialize main drawing canvas with black background\n        mainCanvas = p.createGraphics(600, 600);\n        mainCanvas.background(0);\n        \n        // Initialize layer canvases - one for each color\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background\n          layerCanvases.push(layerCanvas);\n        }\n        \n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n        \n        // Apply same settings to all layer canvases\n        for (let canvas of layerCanvases) {\n          canvas.strokeJoin(p.ROUND);\n          canvas.strokeCap(p.ROUND);\n        }\n        \n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n        \n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function() {\n        // Clear main canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n        \n        // Display in-progress work\n        p.image(mainCanvas, 0, 0);\n        \n        // Display info\n        p.displayInfo();\n        \n        // Get the appropriate scale factor to fit pattern in canvas\n        const scaleFactor = getScaleFactor();\n        \n        // Draw on the main canvas\n        mainCanvas.push();\n        mainCanvas.translate(mainCanvas.width / 2, mainCanvas.height / 2);\n        \n        // Add rotation that completes during drawing\n        let fullRotationAngle = (t / maxT) * p.TWO_PI;\n        mainCanvas.rotate(fullRotationAngle);\n        \n        // Current layer canvas (for separate color layers)\n        let currentLayerCanvas = layerCanvases[currentLayer];\n        currentLayerCanvas.push();\n        currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n        currentLayerCanvas.rotate(fullRotationAngle);\n        \n        // Set color for current layer\n        currentColor = palette.colors[currentLayer];\n        mainCanvas.stroke(currentColor);\n        currentLayerCanvas.stroke(currentColor);\n        mainCanvas.strokeWeight(1);\n        currentLayerCanvas.strokeWeight(1);\n\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch(shapeType) {\n          case \"Classic\":\n            x = (params.R - params.r) * p.cos(t) + params.d * p.cos(((params.R - params.r) / params.r) * t);\n            y = (params.R - params.r) * p.sin(t) - params.d * p.sin(((params.R - params.r) / params.r) * t);\n            break;\n          case \"Flower\":\n            x = (params.R - params.r) * p.cos(t) + params.d * p.cos(((params.R - params.r) / params.r) * t);\n            y = (params.R - params.r) * p.sin(t) - params.d * p.sin(((params.R - params.r) / params.r) * t);\n              \n            // Add petal effect\n            const petalFactor = p.sin(t * params.petals) * params.petalSize;\n            x *= (1 + petalFactor);\n            y *= (1 + petalFactor);\n            break;\n          case \"Star\":\n            const innerR = params.inner; // Inner radius for star effect\n            const outerR = params.outer; // Outer radius for star effect\n            const starPoints = params.points; // Number of points in the star\n              \n            // Create star effect with sine modulation\n            const starR = innerR + (outerR - innerR) * p.abs(p.sin(t * starPoints / 2));\n            x = starR * p.cos(t);\n            y = starR * p.sin(t);\n              \n            // Add spirograph motion\n            const orbX = params.orbSize * p.cos(t * params.orbSpeed);\n            const orbY = params.orbSize * p.sin(t * params.orbSpeed);\n              \n            x += orbX;\n            y += orbY;\n            break;\n          case \"Orbital\":\n            // Primary orbit\n            const primaryX = params.primaryRadius * p.cos(t);\n            const primaryY = params.primaryRadius * p.sin(t);\n              \n            // Secondary orbit\n            const secondaryX = params.secondaryRadius * p.cos(t * params.secondarySpeed);\n            const secondaryY = params.secondaryRadius * p.sin(t * params.secondarySpeed);\n              \n            // Tertiary orbit\n            const tertiaryX = params.tertiaryRadius * p.cos(t * params.tertiarySpeed);\n            const tertiaryY = params.tertiaryRadius * p.sin(t * params.tertiarySpeed);\n              \n            // Combine all orbits\n            x = primaryX + secondaryX + tertiaryX;\n            y = primaryY + secondaryY + tertiaryY;\n            break;\n          case \"Galaxy\":\n            // Spiral galaxy effect\n            const spiralR = params.baseRadius * p.exp(params.growthRate * t);\n            x = spiralR * p.cos(t);\n            y = spiralR * p.sin(t);\n              \n            // Add warping effect\n            const warpX = params.warpAmount * p.sin(t * params.warpFrequency) * p.cos(t * 2);\n            const warpY = params.warpAmount * p.cos(t * params.warpFrequency) * p.sin(t * 2);\n              \n            x += warpX;\n            y += warpY;\n            break;\n        }\n\n        // Apply dynamic scaling to ensure pattern fits\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment on both canvases\n        if (prevX !== null) {\n          mainCanvas.line(prevX, prevY, x, y);\n          currentLayerCanvas.line(prevX, prevY, x, y);\n        }\n        \n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n          \n          // Check if we've reached a layer transition point\n          if (currentLayer < layerCompletionPoints.length-1 && t >= layerCompletionPoints[currentLayer]) {\n            // Time to move to next layer\n            currentLayer++;\n            // Make sure we don't go beyond the array bounds\n            if (currentLayer < layerCanvases.length) {\n              currentLayerCanvas = layerCanvases[currentLayer];\n              currentLayerCanvas.push();\n              currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n              // Apply rotation to the new layer\n              let fullRotationAngle = (t / maxT) * p.TWO_PI;\n              currentLayerCanvas.rotate(fullRotationAngle);\n              currentColor = palette.colors[Math.min(currentLayer, palette.colors.length - 1)];\n              mainCanvas.stroke(currentColor);\n              currentLayerCanvas.stroke(currentColor);\n            }\n          }\n          \n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n          \n          // Re-calculate based on shape type with updated t\n          switch(shapeType) {\n            case \"Classic\":\n              nextX = (params.R - params.r) * p.cos(t) + params.d * p.cos(((params.R - params.r) / params.r) * t);\n              nextY = (params.R - params.r) * p.sin(t) - params.d * p.sin(((params.R - params.r) / params.r) * t);\n              break;\n            case \"Flower\":\n              nextX = (params.R - params.r) * p.cos(t) + params.d * p.cos(((params.R - params.r) / params.r) * t);\n              nextY = (params.R - params.r) * p.sin(t) - params.d * p.sin(((params.R - params.r) / params.r) * t);\n                \n              // Add petal effect\n              const petalFactor = p.sin(t * params.petals) * params.petalSize;\n              nextX *= (1 + petalFactor);\n              nextY *= (1 + petalFactor);\n              break;\n            case \"Star\":\n              const innerR = params.inner; // Inner radius for star effect\n              const outerR = params.outer; // Outer radius for star effect\n              const starPoints = params.points; // Number of points in the star\n                \n              // Create star effect with sine modulation\n              const starR = innerR + (outerR - innerR) * p.abs(p.sin(t * starPoints / 2));\n              nextX = starR * p.cos(t);\n              nextY = starR * p.sin(t);\n                \n              // Add spirograph motion\n              const orbX = params.orbSize * p.cos(t * params.orbSpeed);\n              const orbY = params.orbSize * p.sin(t * params.orbSpeed);\n                \n              nextX += orbX;\n              nextY += orbY;\n              break;\n            case \"Orbital\":\n              // Primary orbit\n              const primaryX = params.primaryRadius * p.cos(t);\n              const primaryY = params.primaryRadius * p.sin(t);\n                \n              // Secondary orbit\n              const secondaryX = params.secondaryRadius * p.cos(t * params.secondarySpeed);\n              const secondaryY = params.secondaryRadius * p.sin(t * params.secondarySpeed);\n                \n              // Tertiary orbit\n              const tertiaryX = params.tertiaryRadius * p.cos(t * params.tertiarySpeed);\n              const tertiaryY = params.tertiaryRadius * p.sin(t * params.tertiarySpeed);\n                \n              // Combine all orbits\n              nextX = primaryX + secondaryX + tertiaryX;\n              nextY = primaryY + secondaryY + tertiaryY;\n              break;\n            case \"Galaxy\":\n              // Spiral galaxy effect\n              const spiralR = params.baseRadius * p.exp(params.growthRate * t);\n              nextX = spiralR * p.cos(t);\n              nextY = spiralR * p.sin(t);\n                \n              // Add warping effect\n              const warpX = params.warpAmount * p.sin(t * params.warpFrequency) * p.cos(t * 2);\n              const warpY = params.warpAmount * p.cos(t * params.warpFrequency) * p.sin(t * 2);\n                \n              nextX += warpX;\n              nextY += warpY;\n              break;\n          }\n          \n          // Apply dynamic scaling to ensure pattern fits\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n          \n          // Draw the line on both canvases\n          mainCanvas.line(prevX, prevY, nextX, nextY);\n          currentLayerCanvas.line(prevX, prevY, nextX, nextY);\n          \n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n        \n        // Increment time\n        t += 0.015;\n        \n        // Update global rotation\n        globalAngle = (t / maxT) * p.TWO_PI;\n        \n        // Update progress\n        const currentProgress = Math.min(100, Math.round((t / maxT) * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n        \n        // End current push transforms\n        mainCanvas.pop();\n        currentLayerCanvas.pop();\n\n        // Check if drawing is complete\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n          \n          // Make sure to end all open transforms\n          try {\n            mainCanvas.pop();\n          } catch(e) {\n            // Ignore if already popped\n          }\n          \n          // Safely pop any open layer transforms\n          for (let i = 0; i < layerCanvases.length; i++) {\n            try {\n              layerCanvases[i].pop();\n            } catch (e) {\n              // Ignore errors if there's no matching push\n              console.log(\"Note: Layer\", i, \"didn't need popping\");\n            }\n          }\n          \n          // Generate final output with black background and all layers\n          finalOutput = generateFinalOutput();\n          \n          // Notify parent that drawing is complete\n          onDrawingComplete && onDrawingComplete(finalOutput);\n        }\n      };\n      \n      // Display info on the canvas\n      p.displayInfo = function() {\n        // Create a semi-transparent background for the text\n        p.fill(0, 200);\n        p.noStroke();\n        p.rect(10, 10, 380, 100, 10);\n        \n        // Display NFT info\n        p.textSize(24);\n        p.fill(255);\n        p.text(`Spyro #${currentSeed}`, 20, 40);\n        \n        p.textSize(16);\n        p.fill(palette.colors[0]);\n        p.text(`ðŸŒŸ ${shapeType} Â· ${rarityText}`, 20, 70);\n        \n        p.fill(palette.colors[1]);\n        p.text(`ðŸŽ¨ Palette: ${palette.name} Â· ${palette.rarity}`, 20, 95);\n      };\n      \n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n      \n      // Change to a specific seed\n      p.setSeed = (newSeed) => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n    \n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return (\n    <div className=\"spiro-canvas-container\">\n      <div ref={canvasRef} className=\"canvas-wrapper\"></div>\n      {isDrawing && (\n        <div className=\"progress-bar-container\">\n          <div className=\"progress-bar\" style={{ width: `${progress}%` }}></div>\n          <span className=\"progress-text\">{progress}%</span>\n        </div>\n      )}\n      {!isDrawing && (\n        <div className=\"canvas-complete\">\n          <span>Drawing complete!</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpiroCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}