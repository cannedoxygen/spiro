{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/pages/Create.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SpiroCanvas from '../components/SpiroCanvas';\nimport WalletConnect from '../components/WalletConnect';\nimport { isSeedAvailable, reserveSeed, getMintedCount, findAvailableSeed } from '../services/nftService';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Create = () => {\n  _s();\n  // Spirograph state\n  const [seed, setSeed] = useState(null);\n  const [shape, setShape] = useState(null);\n  const [palette, setPalette] = useState(null);\n  const [image, setImage] = useState(null);\n  const [strokeWeight, setStrokeWeight] = useState(2);\n\n  // NFT and wallet state\n  const [isMinting, setIsMinting] = useState(false);\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [hasToken, setHasToken] = useState(false);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mintStatus, setMintStatus] = useState(null); // 'success', 'error', or null\n  const [mintedCount, setMintedCount] = useState(0);\n  const [availabilityMessage, setAvailabilityMessage] = useState('');\n\n  // Check NFT availability on load\n  useEffect(() => {\n    setMintedCount(getMintedCount());\n  }, []);\n\n  // Check seed availability when it changes\n  useEffect(() => {\n    if (seed) {\n      const available = isSeedAvailable(seed);\n      if (!available) {\n        setAvailabilityMessage('This design has already been minted! Generate a new one.');\n      } else {\n        setAvailabilityMessage('');\n      }\n    }\n  }, [seed]);\n\n  // Handle wallet connection\n  const handleWalletConnect = (address, tokenOwnership) => {\n    setWalletAddress(address);\n    setIsWalletConnected(!!address);\n    setHasToken(tokenOwnership);\n  };\n\n  // Handle shape change\n  const handleShapeChange = shapeData => {\n    setShape(shapeData);\n  };\n\n  // Handle palette change\n  const handlePaletteChange = paletteData => {\n    setPalette(paletteData);\n  };\n\n  // Handle drawing completion\n  const handleDrawingComplete = canvasImage => {\n    // Store the completed image\n    setImage(canvasImage);\n  };\n\n  // Generate a new random design\n  const handleGenerateNew = () => {\n    // Clear previous state\n    setImage(null);\n    setMintStatus(null);\n    setAvailabilityMessage('');\n\n    // Find an available seed\n    const newSeed = findAvailableSeed();\n    if (newSeed) {\n      setSeed(newSeed);\n    } else {\n      setAvailabilityMessage('All 10,000 designs have been minted!');\n    }\n  };\n\n  // Mint the current design as an NFT\n  const handleMint = async () => {\n    // Can't mint without wallet or token\n    if (!isWalletConnected) {\n      alert(\"Please connect your wallet first!\");\n      return;\n    }\n    if (!hasToken) {\n      alert(\"You need the special token to mint for free!\");\n      return;\n    }\n\n    // Ensure we have a completed drawing\n    if (!image) {\n      alert(\"Please wait for the drawing to complete before minting.\");\n      return;\n    }\n\n    // Check availability\n    if (!isSeedAvailable(seed)) {\n      setAvailabilityMessage('This design has already been minted! Generate a new one.');\n      return;\n    }\n    try {\n      var _shape$params, _shape$params2, _shape$params3, _image$canvas, _image$canvas$toDataU;\n      setIsMinting(true);\n      setMintStatus(null);\n\n      // Reserve the seed\n      const reservationResult = reserveSeed(seed);\n      if (!reservationResult.success) {\n        throw new Error(reservationResult.message);\n      }\n\n      // In a real implementation, this would upload to IPFS and mint an NFT\n      console.log(\"Minting with parameters:\", {\n        seed,\n        shape: shape === null || shape === void 0 ? void 0 : shape.type,\n        rarity: shape === null || shape === void 0 ? void 0 : shape.rarity,\n        palette: palette === null || palette === void 0 ? void 0 : palette.name\n      });\n\n      // Simulate minting process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Success!\n      setMintStatus('success');\n      setMintedCount(getMintedCount());\n\n      // Store in local storage for collection page\n      const userNFTs = JSON.parse(localStorage.getItem('userNFTs')) || [];\n      userNFTs.push({\n        id: seed,\n        params: {\n          shape: shape === null || shape === void 0 ? void 0 : shape.type,\n          rarity: shape === null || shape === void 0 ? void 0 : shape.rarity,\n          fixedRadius: shape === null || shape === void 0 ? void 0 : (_shape$params = shape.params) === null || _shape$params === void 0 ? void 0 : _shape$params.R,\n          movingRadius: shape === null || shape === void 0 ? void 0 : (_shape$params2 = shape.params) === null || _shape$params2 === void 0 ? void 0 : _shape$params2.r1,\n          offset: shape === null || shape === void 0 ? void 0 : (_shape$params3 = shape.params) === null || _shape$params3 === void 0 ? void 0 : _shape$params3.d,\n          colors: palette === null || palette === void 0 ? void 0 : palette.colors,\n          strokeWeight\n        },\n        imageUrl: (image === null || image === void 0 ? void 0 : (_image$canvas = image.canvas) === null || _image$canvas === void 0 ? void 0 : (_image$canvas$toDataU = _image$canvas.toDataURL) === null || _image$canvas$toDataU === void 0 ? void 0 : _image$canvas$toDataU.call(_image$canvas)) || null,\n        mintDate: new Date().toISOString()\n      });\n      localStorage.setItem('userNFTs', JSON.stringify(userNFTs));\n    } catch (error) {\n      console.error(\"Error minting NFT:\", error);\n      setMintStatus('error');\n      setAvailabilityMessage(error.message || 'Error minting NFT');\n    } finally {\n      setIsMinting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Create Your Spirograph NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Design your unique mathematical pattern and mint it as an animated NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-availability\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"minted-count\",\n          children: [mintedCount, \"/10,000 Minted\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WalletConnect, {\n          onConnect: handleWalletConnect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-section\",\n        children: [/*#__PURE__*/_jsxDEV(SpiroCanvas, {\n          seed: seed,\n          setSeed: setSeed,\n          onShapeChange: handleShapeChange,\n          onPaletteChange: handlePaletteChange,\n          onDrawingComplete: handleDrawingComplete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), mintStatus === 'success' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mint-success\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Success! \\uD83C\\uDF89\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Your Spirograph NFT has been minted and sent to your wallet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Share your creation with friends!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"share-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"share-twitter\",\n              children: \"Share on X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"share-copy\",\n              children: \"Copy Link\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this), mintStatus === 'error' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mint-error\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Error Minting\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"There was a problem creating your NFT. Please try again.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spirograph-info\",\n          children: seed && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Your Spirograph\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Seed:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 20\n              }, this), \" #\", seed]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this), shape && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Shape:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 22\n              }, this), \" \", shape.type, \" (\", shape.rarity, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 19\n            }, this), palette && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Palette:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 22\n              }, this), \" \", palette.name, \" (\", palette.rarity, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 19\n            }, this), availabilityMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"availability-message\",\n              children: availabilityMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-primary\",\n            onClick: handleGenerateNew,\n            children: \"Generate New Design\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-secondary\",\n            onClick: handleMint,\n            disabled: !image || isMinting || !isSeedAvailable(seed),\n            children: isMinting ? 'Minting...' : 'Mint as NFT'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"token-gate-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Token Gate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This is a token-gated experience. You need to own our special token to mint NFTs for free.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), !isWalletConnected && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Connect your wallet to check if you have the token.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this), isWalletConnected && !hasToken && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"You don't have the required token yet.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"get-token-button\",\n              children: \"Get Token\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this), isWalletConnected && hasToken && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"token-success\",\n            children: \"You have the token! Mint as many NFTs as you want.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(Create, \"LevWHvA8Fw06Fk65jTDs35EyD0E=\");\n_c = Create;\nexport default Create;\nvar _c;\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"names":["React","useState","useEffect","SpiroCanvas","WalletConnect","isSeedAvailable","reserveSeed","getMintedCount","findAvailableSeed","jsxDEV","_jsxDEV","Fragment","_Fragment","Create","_s","seed","setSeed","shape","setShape","palette","setPalette","image","setImage","strokeWeight","setStrokeWeight","isMinting","setIsMinting","isWalletConnected","setIsWalletConnected","hasToken","setHasToken","walletAddress","setWalletAddress","mintStatus","setMintStatus","mintedCount","setMintedCount","availabilityMessage","setAvailabilityMessage","available","handleWalletConnect","address","tokenOwnership","handleShapeChange","shapeData","handlePaletteChange","paletteData","handleDrawingComplete","canvasImage","handleGenerateNew","newSeed","handleMint","alert","_shape$params","_shape$params2","_shape$params3","_image$canvas","_image$canvas$toDataU","reservationResult","success","Error","message","console","log","type","rarity","name","Promise","resolve","setTimeout","userNFTs","JSON","parse","localStorage","getItem","push","id","params","fixedRadius","R","movingRadius","r1","offset","d","colors","imageUrl","canvas","toDataURL","call","mintDate","Date","toISOString","setItem","stringify","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onConnect","onShapeChange","onPaletteChange","onDrawingComplete","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/pages/Create.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SpiroCanvas from '../components/SpiroCanvas';\nimport WalletConnect from '../components/WalletConnect';\nimport { \n  isSeedAvailable, \n  reserveSeed, \n  getMintedCount,\n  findAvailableSeed\n} from '../services/nftService';\nimport '../styles/components.css';\n\nconst Create = () => {\n  // Spirograph state\n  const [seed, setSeed] = useState(null);\n  const [shape, setShape] = useState(null);\n  const [palette, setPalette] = useState(null);\n  const [image, setImage] = useState(null);\n  const [strokeWeight, setStrokeWeight] = useState(2);\n  \n  // NFT and wallet state\n  const [isMinting, setIsMinting] = useState(false);\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [hasToken, setHasToken] = useState(false);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mintStatus, setMintStatus] = useState(null); // 'success', 'error', or null\n  const [mintedCount, setMintedCount] = useState(0);\n  const [availabilityMessage, setAvailabilityMessage] = useState('');\n\n  // Check NFT availability on load\n  useEffect(() => {\n    setMintedCount(getMintedCount());\n  }, []);\n\n  // Check seed availability when it changes\n  useEffect(() => {\n    if (seed) {\n      const available = isSeedAvailable(seed);\n      if (!available) {\n        setAvailabilityMessage('This design has already been minted! Generate a new one.');\n      } else {\n        setAvailabilityMessage('');\n      }\n    }\n  }, [seed]);\n\n  // Handle wallet connection\n  const handleWalletConnect = (address, tokenOwnership) => {\n    setWalletAddress(address);\n    setIsWalletConnected(!!address);\n    setHasToken(tokenOwnership);\n  };\n\n  // Handle shape change\n  const handleShapeChange = (shapeData) => {\n    setShape(shapeData);\n  };\n\n  // Handle palette change\n  const handlePaletteChange = (paletteData) => {\n    setPalette(paletteData);\n  };\n\n  // Handle drawing completion\n  const handleDrawingComplete = (canvasImage) => {\n    // Store the completed image\n    setImage(canvasImage);\n  };\n\n  // Generate a new random design\n  const handleGenerateNew = () => {\n    // Clear previous state\n    setImage(null);\n    setMintStatus(null);\n    setAvailabilityMessage('');\n    \n    // Find an available seed\n    const newSeed = findAvailableSeed();\n    \n    if (newSeed) {\n      setSeed(newSeed);\n    } else {\n      setAvailabilityMessage('All 10,000 designs have been minted!');\n    }\n  };\n\n  // Mint the current design as an NFT\n  const handleMint = async () => {\n    // Can't mint without wallet or token\n    if (!isWalletConnected) {\n      alert(\"Please connect your wallet first!\");\n      return;\n    }\n\n    if (!hasToken) {\n      alert(\"You need the special token to mint for free!\");\n      return;\n    }\n\n    // Ensure we have a completed drawing\n    if (!image) {\n      alert(\"Please wait for the drawing to complete before minting.\");\n      return;\n    }\n    \n    // Check availability\n    if (!isSeedAvailable(seed)) {\n      setAvailabilityMessage('This design has already been minted! Generate a new one.');\n      return;\n    }\n\n    try {\n      setIsMinting(true);\n      setMintStatus(null);\n\n      // Reserve the seed\n      const reservationResult = reserveSeed(seed);\n      \n      if (!reservationResult.success) {\n        throw new Error(reservationResult.message);\n      }\n      \n      // In a real implementation, this would upload to IPFS and mint an NFT\n      console.log(\"Minting with parameters:\", {\n        seed,\n        shape: shape?.type,\n        rarity: shape?.rarity,\n        palette: palette?.name\n      });\n\n      // Simulate minting process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Success!\n      setMintStatus('success');\n      setMintedCount(getMintedCount());\n      \n      // Store in local storage for collection page\n      const userNFTs = JSON.parse(localStorage.getItem('userNFTs')) || [];\n      userNFTs.push({\n        id: seed,\n        params: {\n          shape: shape?.type,\n          rarity: shape?.rarity,\n          fixedRadius: shape?.params?.R,\n          movingRadius: shape?.params?.r1,\n          offset: shape?.params?.d,\n          colors: palette?.colors,\n          strokeWeight\n        },\n        imageUrl: image?.canvas?.toDataURL?.() || null,\n        mintDate: new Date().toISOString()\n      });\n      localStorage.setItem('userNFTs', JSON.stringify(userNFTs));\n      \n    } catch (error) {\n      console.error(\"Error minting NFT:\", error);\n      setMintStatus('error');\n      setAvailabilityMessage(error.message || 'Error minting NFT');\n    } finally {\n      setIsMinting(false);\n    }\n  };\n\n  return (\n    <div className=\"create-page\">\n      <div className=\"create-header\">\n        <h1>Create Your Spirograph NFT</h1>\n        <p>Design your unique mathematical pattern and mint it as an animated NFT</p>\n        <div className=\"nft-availability\">\n          <span className=\"minted-count\">{mintedCount}/10,000 Minted</span>\n          <WalletConnect onConnect={handleWalletConnect} />\n        </div>\n      </div>\n\n      <div className=\"create-container\">\n        <div className=\"canvas-section\">\n          <SpiroCanvas\n            seed={seed}\n            setSeed={setSeed}\n            onShapeChange={handleShapeChange}\n            onPaletteChange={handlePaletteChange}\n            onDrawingComplete={handleDrawingComplete}\n          />\n          \n          {mintStatus === 'success' && (\n            <div className=\"mint-success\">\n              <h3>Success! 🎉</h3>\n              <p>Your Spirograph NFT has been minted and sent to your wallet.</p>\n              <p>Share your creation with friends!</p>\n              <div className=\"share-buttons\">\n                <button className=\"share-twitter\">Share on X</button>\n                <button className=\"share-copy\">Copy Link</button>\n              </div>\n            </div>\n          )}\n          \n          {mintStatus === 'error' && (\n            <div className=\"mint-error\">\n              <h3>Error Minting</h3>\n              <p>There was a problem creating your NFT. Please try again.</p>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"controls-section\">\n          <div className=\"spirograph-info\">\n            {seed && (\n              <>\n                <h3>Your Spirograph</h3>\n                <p><strong>Seed:</strong> #{seed}</p>\n                {shape && (\n                  <p><strong>Shape:</strong> {shape.type} ({shape.rarity})</p>\n                )}\n                {palette && (\n                  <p><strong>Palette:</strong> {palette.name} ({palette.rarity})</p>\n                )}\n                \n                {availabilityMessage && (\n                  <p className=\"availability-message\">{availabilityMessage}</p>\n                )}\n              </>\n            )}\n          </div>\n          \n          <div className=\"action-buttons\">\n            <button className=\"btn-primary\" onClick={handleGenerateNew}>\n              Generate New Design\n            </button>\n            <button \n              className=\"btn-secondary\" \n              onClick={handleMint}\n              disabled={!image || isMinting || !isSeedAvailable(seed)}\n            >\n              {isMinting ? 'Minting...' : 'Mint as NFT'}\n            </button>\n          </div>\n          \n          <div className=\"token-gate-info\">\n            <h3>Token Gate</h3>\n            <p>This is a token-gated experience. You need to own our special token to mint NFTs for free.</p>\n            {!isWalletConnected && (\n              <p>Connect your wallet to check if you have the token.</p>\n            )}\n            {isWalletConnected && !hasToken && (\n              <div>\n                <p>You don't have the required token yet.</p>\n                <button className=\"get-token-button\">Get Token</button>\n              </div>\n            )}\n            {isWalletConnected && hasToken && (\n              <p className=\"token-success\">You have the token! Mint as many NFTs as you want.</p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Create;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}