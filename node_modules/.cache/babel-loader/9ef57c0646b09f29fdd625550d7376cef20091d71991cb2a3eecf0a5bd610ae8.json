{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiroCanvas = ({\n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = p => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [{\n        name: \"Neon Mirage\",\n        colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"],\n        rarity: \"Common\"\n      }, {\n        name: \"Digital Dream\",\n        colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"],\n        rarity: \"Uncommon\"\n      }, {\n        name: \"Crystal Sunset\",\n        colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"],\n        rarity: \"Rare\"\n      }, {\n        name: \"Cyber Haze\",\n        colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"],\n        rarity: \"Super Rare\"\n      }, {\n        name: \"Pastel Vapor\",\n        colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"],\n        rarity: \"Legendary\"\n      }];\n\n      // Shape rarity distribution\n      const shapeRarity = {\n        \"Rhodonea\": \"Common\",\n        // 40%\n        \"Epitrochoid\": \"Uncommon\",\n        // 30%\n        \"Hypotrochoid\": \"Rare\",\n        // 20%\n        \"PolySpirograph\": \"Super Rare\",\n        // 8%\n        \"Lissajous\": \"Legendary\" // 2%\n      };\n\n      // Multiple layer canvases\n      let mainCanvas; // Main visible canvas with black background\n      let layerCanvases = []; // Array of layer graphics for each color\n      let finalOutput; // Final combined output\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let currentColorIndex = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n\n      // Layer tracking\n      let totalLayers = 5; // Match number of colors in palette\n      let currentLayer = 0;\n      let layerCompletionPoints = []; // Points at which to switch layers\n\n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Calculate the maximum boundaries of the pattern to ensure it fits\n      const calculatePatternBoundaries = () => {\n        let maxX = 0;\n        let maxY = 0;\n\n        // Sample many points to find the maximum extent\n        for (let step = 0; step < maxT; step += 0.1) {\n          let x = 0;\n          let y = 0;\n\n          // Calculate position based on shape type\n          switch (shapeType) {\n            case \"Hypotrochoid\":\n              x = (params.R - params.r1) * p.cos(step) + params.d * p.cos((params.R - params.r1) / params.r1 * step);\n              y = (params.R - params.r1) * p.sin(step) - params.d * p.sin((params.R - params.r1) / params.r1 * step);\n              break;\n            case \"Epitrochoid\":\n              x = (params.R + params.r1) * p.cos(step) - params.d * p.cos((params.R + params.r1) / params.r1 * step);\n              y = (params.R + params.r1) * p.sin(step) - params.d * p.sin((params.R + params.r1) / params.r1 * step);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * step);\n              x = rhodoneaRadius * p.cos(step);\n              y = rhodoneaRadius * p.sin(step);\n              break;\n            case \"Lissajous\":\n              x = params.A * p.sin(params.a * step + params.delta);\n              y = params.B * p.sin(params.b * step);\n              break;\n            case \"PolySpirograph\":\n              // Get base shape coordinate\n              const baseAngle = step * 0.5;\n              const baseCoord = getBaseShapeCoord(baseAngle, params.baseShape, params.baseSize);\n              const penAngle = params.baseSize / params.r * step + step * params.rotation;\n              x = baseCoord.x + params.d * Math.cos(penAngle);\n              y = baseCoord.y + params.d * Math.sin(penAngle);\n              break;\n          }\n\n          // Update max boundaries\n          maxX = Math.max(maxX, Math.abs(x));\n          maxY = Math.max(maxY, Math.abs(y));\n        }\n        return {\n          maxX,\n          maxY\n        };\n      };\n\n      // Get a more detailed description of the shape\n      const getShapeDescription = () => {\n        if (shapeType === \"PolySpirograph\") {\n          // Capitalize first letter\n          const shapeName = params.baseShape.charAt(0).toUpperCase() + params.baseShape.slice(1);\n          return `${shapeType} (${shapeName})`;\n        }\n        return shapeType;\n      };\n\n      // Function to get base shape coordinates at a given angle (for PolySpirograph)\n      const getBaseShapeCoord = (angle, shape, size) => {\n        // Add slight imperfection based on params.variation\n        const variation = 1 + Math.sin(angle * 5) * params.variation;\n        const adjustedSize = size * variation;\n        switch (shape) {\n          case \"square\":\n            // Convert angle to position on a square\n            const squareAngle = angle % (Math.PI / 2);\n            const quadrant = Math.floor(angle / (Math.PI / 2)) % 4;\n            let sqX, sqY;\n            if (squareAngle < Math.PI / 4) {\n              // Moving along edge\n              const ratio = Math.tan(squareAngle);\n              const norm = Math.sqrt(1 + ratio * ratio);\n              sqX = adjustedSize / norm;\n              sqY = sqX * ratio;\n            } else {\n              // Moving along edge\n              const ratio = Math.tan(Math.PI / 2 - squareAngle);\n              const norm = Math.sqrt(1 + ratio * ratio);\n              sqY = adjustedSize / norm;\n              sqX = sqY * ratio;\n            }\n\n            // Rotate based on quadrant\n            if (quadrant === 0) return {\n              x: sqX,\n              y: sqY\n            };\n            if (quadrant === 1) return {\n              x: -sqY,\n              y: sqX\n            };\n            if (quadrant === 2) return {\n              x: -sqX,\n              y: -sqY\n            };\n            return {\n              x: sqY,\n              y: -sqX\n            };\n          case \"triangle\":\n            // Equilateral triangle\n            const triSide = 3;\n            const triAngle = angle % (2 * Math.PI / triSide);\n            const triIndex = Math.floor(angle / (2 * Math.PI / triSide)) % triSide;\n\n            // Vertices of a triangle centered at 0,0\n            const vertices = [{\n              x: 0,\n              y: -adjustedSize * 2 / 3\n            },\n            // Top\n            {\n              x: adjustedSize * Math.sqrt(3) / 3,\n              y: adjustedSize / 3\n            },\n            // Bottom right\n            {\n              x: -adjustedSize * Math.sqrt(3) / 3,\n              y: adjustedSize / 3\n            } // Bottom left\n            ];\n\n            // Calculate point on the edge\n            const fromVtx = vertices[triIndex];\n            const toVtx = vertices[(triIndex + 1) % triSide];\n            const ratio = triAngle / (2 * Math.PI / triSide);\n            return {\n              x: fromVtx.x + (toVtx.x - fromVtx.x) * ratio,\n              y: fromVtx.y + (toVtx.y - fromVtx.y) * ratio\n            };\n          case \"diamond\":\n            // Diamond (rhombus)\n            const diamondAngle = angle % (Math.PI / 2);\n            const diamondQuadrant = Math.floor(angle / (Math.PI / 2)) % 4;\n            const sharpness = params.sharpness; // How pointy the diamond is\n\n            // Vertices for a diamond\n            const diamondVertices = [{\n              x: 0,\n              y: -adjustedSize\n            },\n            // Top\n            {\n              x: adjustedSize * sharpness,\n              y: 0\n            },\n            // Right\n            {\n              x: 0,\n              y: adjustedSize\n            },\n            // Bottom\n            {\n              x: -adjustedSize * sharpness,\n              y: 0\n            } // Left\n            ];\n\n            // Get vertices for the current edge\n            const fromPoint = diamondVertices[diamondQuadrant];\n            const toPoint = diamondVertices[(diamondQuadrant + 1) % 4];\n            const edgeRatio = diamondAngle / (Math.PI / 2);\n            return {\n              x: fromPoint.x + (toPoint.x - fromPoint.x) * edgeRatio,\n              y: fromPoint.y + (toPoint.y - fromPoint.y) * edgeRatio\n            };\n          case \"oval\":\n            // Oval (ellipse)\n            const aspectRatio = params.aspectRatio;\n            return {\n              x: adjustedSize * Math.cos(angle) * aspectRatio,\n              y: adjustedSize * Math.sin(angle)\n            };\n          default:\n            // Fallback to circle\n            return {\n              x: adjustedSize * Math.cos(angle),\n              y: adjustedSize * Math.sin(angle)\n            };\n        }\n      };\n\n      // Get the scale factor needed to fit the pattern\n      const getScaleFactor = () => {\n        const {\n          maxX,\n          maxY\n        } = calculatePatternBoundaries();\n        const maxExtent = Math.max(maxX, maxY);\n\n        // Canvas size is 600x600, center is at 300,300\n        // Leave a 50px margin on all sides\n        const maxAllowedExtent = 250; // (600/2 - 50)\n\n        // If pattern is too big, scale it down\n        if (maxExtent > maxAllowedExtent) {\n          return maxAllowedExtent / maxExtent;\n        }\n\n        // Otherwise, keep original scale\n        return 1.0;\n      };\n\n      // Get the final image when completed\n      const generateFinalOutput = () => {\n        // Create two separate graphics:\n        // 1. The background canvas (black)\n        let backgroundCanvas = p.createGraphics(600, 600);\n        backgroundCanvas.background(0); // BLACK BACKGROUND\n\n        // 2. The transparent spirograph with all layers merged (but no background)\n        let transparentSpiro = p.createGraphics(600, 600);\n        transparentSpiro.clear(); // Completely transparent\n\n        // Overlay all layers onto the transparent spirograph\n        for (let i = 0; i < layerCanvases.length; i++) {\n          transparentSpiro.image(layerCanvases[i], 0, 0);\n        }\n\n        // Return just the transparent spirograph - the black background stays in the canvas\n        return transparentSpiro;\n      };\n\n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Rhodonea - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Epitrochoid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Hypotrochoid - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // PolySpirograph - Super Rare 8%\n        } else {\n          shapeIndex = 4; // Lissajous - Legendary 2%\n        }\n        params = {}; // Reset params\n\n        switch (shapeIndex) {\n          case 0:\n            // Rhodonea (now Common)\n            shapeType = \"Rhodonea\";\n            params.k = p.int(p.random(4, 9));\n            maxT = params.k % 2 === 0 ? p.TWO_PI : p.PI;\n            break;\n          case 1:\n            // Epitrochoid (remains Uncommon)\n            shapeType = \"Epitrochoid\";\n            params.R = p.random(200, 300);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(80, 160);\n            const gcd2 = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd2);\n            break;\n          case 2:\n            // Hypotrochoid (now Rare)\n            shapeType = \"Hypotrochoid\";\n            params.R = p.random(250, 400);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(100, 180);\n            const gcd = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd);\n            break;\n          case 3:\n            // PolySpirograph (Super Rare)\n            shapeType = \"PolySpirograph\";\n\n            // Select a base shape randomly\n            const shapes = [\"square\", \"triangle\", \"diamond\", \"oval\"];\n            params.baseShape = shapes[Math.floor(p.random(shapes.length))];\n\n            // Base parameters\n            params.baseSize = p.random(150, 250); // Size of the base shape\n            params.r = p.random(40, 80); // Radius of moving circle\n            params.d = p.random(70, 130); // Pen offset\n            params.loops = p.int(p.random(5, 10)); // Number of loops\n            params.rotation = p.random(0.005, 0.02); // Additional rotation\n\n            // Specific parameters for certain shapes\n            if (params.baseShape === \"oval\") {\n              params.aspectRatio = p.random(0.6, 0.8); // Width to height ratio\n            }\n\n            // For diamond\n            if (params.baseShape === \"diamond\") {\n              params.sharpness = p.random(0.7, 1.3); // How pointy the diamond is\n            }\n\n            // For all shapes - add slight randomization to avoid perfect symmetry\n            params.variation = p.random(0.02, 0.08);\n\n            // Calculate max time based on loops\n            maxT = p.TWO_PI * params.loops;\n            break;\n          case 4:\n            // Lissajous (now Legendary)\n            shapeType = \"Lissajous\";\n            params.A = p.random(200, 350);\n            params.B = p.random(200, 350);\n            params.a = p.int(p.random(3, 7));\n            params.b = p.int(p.random(3, 7));\n            params.delta = p.random(0, p.PI);\n\n            // Find cycle length\n            const lcm = params.a * params.b / findGCD(params.a, params.b);\n            maxT = p.TWO_PI * lcm;\n            break;\n        }\n\n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 10);\n\n        // Set up layer transitions - divide maxT into segments for each layer\n        layerCompletionPoints = [];\n        for (let i = 1; i < totalLayers; i++) {\n          layerCompletionPoints.push(i / totalLayers * maxT);\n        }\n        layerCompletionPoints.push(maxT); // Final completion point\n\n        rarityText = shapeRarity[shapeType];\n\n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: {\n            ...params\n          }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        // Clear all canvases\n        p.background(0);\n        mainCanvas.background(0);\n\n        // Reset layer canvases\n        layerCanvases = [];\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background for each layer\n          layerCanvases.push(layerCanvas);\n        }\n        p.randomSeed(currentSeed);\n\n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        totalLayers = palette.colors.length; // Match layers to palette colors\n\n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n\n        // Reset drawing variables\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        currentColorIndex = 0;\n        currentLayer = 0;\n\n        // Pick a shape type\n        selectShapeType();\n\n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        console.log(`Spirograph #${currentSeed} â€” ${getShapeDescription()} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n\n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function () {\n        // Create main canvas with black background\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        canvas.style('background-color', 'black'); // Ensure canvas always shows black\n\n        // Initialize main drawing canvas with black background\n        mainCanvas = p.createGraphics(600, 600);\n        mainCanvas.background(0);\n\n        // Initialize layer canvases - one for each color\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background\n          layerCanvases.push(layerCanvas);\n        }\n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n\n        // Apply same settings to all layer canvases\n        for (let canvas of layerCanvases) {\n          canvas.strokeJoin(p.ROUND);\n          canvas.strokeCap(p.ROUND);\n        }\n\n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n\n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function () {\n        // Clear main canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n\n        // Display in-progress work\n        p.image(mainCanvas, 0, 0);\n\n        // Get the appropriate scale factor to fit pattern in canvas\n        const scaleFactor = getScaleFactor();\n\n        // Draw on the main canvas\n        mainCanvas.push();\n        mainCanvas.translate(mainCanvas.width / 2, mainCanvas.height / 2);\n\n        // Add rotation that completes during drawing\n        let fullRotationAngle = t / maxT * p.TWO_PI;\n        mainCanvas.rotate(fullRotationAngle);\n\n        // Current layer canvas (for separate color layers)\n        let currentLayerCanvas = layerCanvases[currentLayer];\n        currentLayerCanvas.push();\n        currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n        currentLayerCanvas.rotate(fullRotationAngle);\n\n        // Set color for current layer\n        currentColor = palette.colors[currentLayer];\n        mainCanvas.stroke(currentColor);\n        currentLayerCanvas.stroke(currentColor);\n        mainCanvas.strokeWeight(1);\n        currentLayerCanvas.strokeWeight(1);\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch (shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r1) * p.cos(t) + params.d * p.cos((params.R - params.r1) / params.r1 * t);\n            y = (params.R - params.r1) * p.sin(t) - params.d * p.sin((params.R - params.r1) / params.r1 * t);\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r1) * p.cos(t) - params.d * p.cos((params.R + params.r1) / params.r1 * t);\n            y = (params.R + params.r1) * p.sin(t) - params.d * p.sin((params.R + params.r1) / params.r1 * t);\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = 250 * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n            break;\n          case \"PolySpirograph\":\n            // Get the base shape coordinate at current angle\n            const baseAngle = t * 0.5; // Move slower around the base shape\n            const baseCoord = getBaseShapeCoord(baseAngle, params.baseShape, params.baseSize);\n\n            // Moving circle center coordinates\n            const centerX = baseCoord.x;\n            const centerY = baseCoord.y;\n\n            // Position of the pen\n            const penAngle = params.baseSize / params.r * t + t * params.rotation;\n            x = centerX + params.d * Math.cos(penAngle);\n            y = centerY + params.d * Math.sin(penAngle);\n            break;\n        }\n\n        // Apply dynamic scaling to ensure pattern fits\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment on both canvases\n        if (prevX !== null) {\n          mainCanvas.line(prevX, prevY, x, y);\n          currentLayerCanvas.line(prevX, prevY, x, y);\n        }\n\n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n\n          // Check if we've reached a layer transition point\n          if (currentLayer < layerCompletionPoints.length - 1 && t >= layerCompletionPoints[currentLayer]) {\n            // Time to move to next layer\n            currentLayer++;\n            // Make sure we don't go beyond the array bounds\n            if (currentLayer < layerCanvases.length) {\n              currentLayerCanvas = layerCanvases[currentLayer];\n              currentLayerCanvas.push();\n              currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n              // Apply rotation to the new layer\n              let fullRotationAngle = t / maxT * p.TWO_PI;\n              currentLayerCanvas.rotate(fullRotationAngle);\n              currentColor = palette.colors[Math.min(currentLayer, palette.colors.length - 1)];\n              mainCanvas.stroke(currentColor);\n              currentLayerCanvas.stroke(currentColor);\n            }\n          }\n\n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n\n          // Re-calculate based on shape type with updated t\n          switch (shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r1) * p.cos(t) + params.d * p.cos((params.R - params.r1) / params.r1 * t);\n              nextY = (params.R - params.r1) * p.sin(t) - params.d * p.sin((params.R - params.r1) / params.r1 * t);\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r1) * p.cos(t) - params.d * p.cos((params.R + params.r1) / params.r1 * t);\n              nextY = (params.R + params.r1) * p.sin(t) - params.d * p.sin((params.R + params.r1) / params.r1 * t);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n              break;\n            case \"PolySpirograph\":\n              // Get the base shape coordinate\n              const baseAngle = t * 0.5;\n              const baseCoord = getBaseShapeCoord(baseAngle, params.baseShape, params.baseSize);\n\n              // Calculate pen position\n              const penAngle = params.baseSize / params.r * t + t * params.rotation;\n              nextX = baseCoord.x + params.d * Math.cos(penAngle);\n              nextY = baseCoord.y + params.d * Math.sin(penAngle);\n              break;\n          }\n\n          // Apply dynamic scaling to ensure pattern fits\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n\n          // Draw the line on both canvases\n          mainCanvas.line(prevX, prevY, nextX, nextY);\n          currentLayerCanvas.line(prevX, prevY, nextX, nextY);\n\n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n\n        // Increment time\n        t += 0.015;\n\n        // Update global rotation\n        globalAngle = t / maxT * p.TWO_PI;\n\n        // Update progress\n        const currentProgress = Math.min(100, Math.round(t / maxT * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n\n        // End current push transforms\n        mainCanvas.pop();\n        currentLayerCanvas.pop();\n\n        // Check if drawing is complete\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n\n          // Make sure to end all open transforms\n          mainCanvas.pop();\n          // Safely pop any open layer transforms\n          for (let i = 0; i < layerCanvases.length; i++) {\n            try {\n              layerCanvases[i].pop();\n            } catch (e) {\n              // Ignore errors if there's no matching push\n              console.log(\"Note: Layer\", i, \"didn't need popping\");\n            }\n          }\n\n          // Generate final output with black background and all layers\n          finalOutput = generateFinalOutput();\n\n          // Notify parent that drawing is complete\n          onDrawingComplete && onDrawingComplete(finalOutput);\n        }\n      };\n\n      // Display info on the canvas\n      p.displayInfo = function () {\n        // Create a semi-transparent background for the text\n        p.fill(0, 200);\n        p.noStroke();\n        p.rect(10, 10, 380, 100, 10);\n\n        // Display NFT info\n        p.textSize(24);\n        p.fill(255);\n        p.text(`Spyro #${currentSeed}`, 20, 40);\n        p.textSize(16);\n        p.fill(palette.colors[0]);\n        p.text(`ðŸŒŸ ${getShapeDescription()} Â· ${rarityText}`, 20, 70);\n        p.fill(palette.colors[1]);\n        p.text(`ðŸŽ¨ Palette: ${palette.name} Â· ${palette.rarity}`, 20, 95);\n      };\n\n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n\n      // Change to a specific seed\n      p.setSeed = newSeed => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n\n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spiro-canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: canvasRef,\n      className: \"canvas-wrapper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 726,\n      columnNumber: 7\n    }, this), isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"progress-text\",\n        children: [progress, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 728,\n      columnNumber: 9\n    }, this), !isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-complete\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Drawing complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 734,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 725,\n    columnNumber: 5\n  }, this);\n};\n_s(SpiroCanvas, \"vG581M3D6HIZspCQRmOO1WkIWxY=\");\n_c = SpiroCanvas;\nexport default SpiroCanvas;\nvar _c;\n$RefreshReg$(_c, \"SpiroCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","p5","jsxDEV","_jsxDEV","SpiroCanvas","seed","setSeed","onShapeChange","onPaletteChange","onDrawingComplete","_s","canvasRef","p5Instance","isDrawing","setIsDrawing","progress","setProgress","sketch","p","palettes","name","colors","rarity","shapeRarity","mainCanvas","layerCanvases","finalOutput","shapeType","params","palette","currentColor","t","maxT","prevX","prevY","globalAngle","currentColorIndex","rarityText","currentSeed","Math","floor","random","totalLayers","currentLayer","layerCompletionPoints","findGCD","a","b","round","calculatePatternBoundaries","maxX","maxY","step","x","y","R","r1","cos","d","sin","rhodoneaRadius","k","A","delta","B","baseAngle","baseCoord","getBaseShapeCoord","baseShape","baseSize","penAngle","r","rotation","max","abs","getShapeDescription","shapeName","charAt","toUpperCase","slice","angle","shape","size","variation","adjustedSize","squareAngle","PI","quadrant","sqX","sqY","ratio","tan","norm","sqrt","triSide","triAngle","triIndex","vertices","fromVtx","toVtx","diamondAngle","diamondQuadrant","sharpness","diamondVertices","fromPoint","toPoint","edgeRatio","aspectRatio","getScaleFactor","maxExtent","maxAllowedExtent","generateFinalOutput","backgroundCanvas","createGraphics","background","transparentSpiro","clear","i","length","image","selectShapeType","shapeRoll","shapeIndex","int","TWO_PI","gcd2","gcd","shapes","loops","lcm","push","type","resetSketch","layerCanvas","randomSeed","paletteRoll","strokeWeight","noFill","console","log","isLooping","loop","setup","canvas","createCanvas","style","frameRate","strokeJoin","ROUND","strokeCap","draw","frameCount","scaleFactor","translate","width","height","fullRotationAngle","rotate","currentLayerCanvas","stroke","centerX","centerY","line","stepsPerFrame","min","nextX","nextY","currentProgress","pop","noLoop","e","displayInfo","fill","noStroke","rect","textSize","text","generateNewSeed","newSeed","current","remove","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\n\nconst SpiroCanvas = ({ \n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = (p) => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [\n        {name: \"Neon Mirage\", colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"], rarity: \"Common\"},\n        {name: \"Digital Dream\", colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"], rarity: \"Uncommon\"},\n        {name: \"Crystal Sunset\", colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"], rarity: \"Rare\"},\n        {name: \"Cyber Haze\", colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"], rarity: \"Super Rare\"},\n        {name: \"Pastel Vapor\", colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"], rarity: \"Legendary\"}\n      ];\n\n      // Shape rarity distribution\n      const shapeRarity = {\n        \"Rhodonea\": \"Common\", // 40%\n        \"Epitrochoid\": \"Uncommon\", // 30%\n        \"Hypotrochoid\": \"Rare\", // 20%\n        \"PolySpirograph\": \"Super Rare\", // 8%\n        \"Lissajous\": \"Legendary\" // 2%\n      };\n\n      // Multiple layer canvases\n      let mainCanvas; // Main visible canvas with black background\n      let layerCanvases = []; // Array of layer graphics for each color\n      let finalOutput; // Final combined output\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let currentColorIndex = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n      \n      // Layer tracking\n      let totalLayers = 5; // Match number of colors in palette\n      let currentLayer = 0;\n      let layerCompletionPoints = []; // Points at which to switch layers\n      \n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Calculate the maximum boundaries of the pattern to ensure it fits\n      const calculatePatternBoundaries = () => {\n        let maxX = 0;\n        let maxY = 0;\n        \n        // Sample many points to find the maximum extent\n        for (let step = 0; step < maxT; step += 0.1) {\n          let x = 0;\n          let y = 0;\n          \n          // Calculate position based on shape type\n          switch(shapeType) {\n            case \"Hypotrochoid\":\n              x = (params.R - params.r1) * p.cos(step) + params.d * p.cos(((params.R - params.r1) / params.r1) * step);\n              y = (params.R - params.r1) * p.sin(step) - params.d * p.sin(((params.R - params.r1) / params.r1) * step);\n              break;\n            case \"Epitrochoid\":\n              x = (params.R + params.r1) * p.cos(step) - params.d * p.cos(((params.R + params.r1) / params.r1) * step);\n              y = (params.R + params.r1) * p.sin(step) - params.d * p.sin(((params.R + params.r1) / params.r1) * step);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * step);\n              x = rhodoneaRadius * p.cos(step);\n              y = rhodoneaRadius * p.sin(step);\n              break;\n            case \"Lissajous\":\n              x = params.A * p.sin(params.a * step + params.delta);\n              y = params.B * p.sin(params.b * step);\n              break;\n            case \"PolySpirograph\":\n              // Get base shape coordinate\n              const baseAngle = step * 0.5;\n              const baseCoord = getBaseShapeCoord(baseAngle, params.baseShape, params.baseSize);\n              const penAngle = ((params.baseSize / params.r) * step) + (step * params.rotation);\n              x = baseCoord.x + params.d * Math.cos(penAngle);\n              y = baseCoord.y + params.d * Math.sin(penAngle);\n              break;\n          }\n          \n          // Update max boundaries\n          maxX = Math.max(maxX, Math.abs(x));\n          maxY = Math.max(maxY, Math.abs(y));\n        }\n        \n        return { maxX, maxY };\n      };\n\n      // Get a more detailed description of the shape\n      const getShapeDescription = () => {\n        if (shapeType === \"PolySpirograph\") {\n          // Capitalize first letter\n          const shapeName = params.baseShape.charAt(0).toUpperCase() + params.baseShape.slice(1);\n          return `${shapeType} (${shapeName})`;\n        }\n        return shapeType;\n      };\n\n      // Function to get base shape coordinates at a given angle (for PolySpirograph)\n      const getBaseShapeCoord = (angle, shape, size) => {\n        // Add slight imperfection based on params.variation\n        const variation = 1 + Math.sin(angle * 5) * params.variation;\n        const adjustedSize = size * variation;\n        \n        switch(shape) {\n          case \"square\":\n            // Convert angle to position on a square\n            const squareAngle = angle % (Math.PI/2);\n            const quadrant = Math.floor(angle / (Math.PI/2)) % 4;\n            \n            let sqX, sqY;\n            if (squareAngle < Math.PI/4) {\n              // Moving along edge\n              const ratio = Math.tan(squareAngle);\n              const norm = Math.sqrt(1 + ratio*ratio);\n              sqX = adjustedSize / norm;\n              sqY = sqX * ratio;\n            } else {\n              // Moving along edge\n              const ratio = Math.tan(Math.PI/2 - squareAngle);\n              const norm = Math.sqrt(1 + ratio*ratio);\n              sqY = adjustedSize / norm;\n              sqX = sqY * ratio;\n            }\n            \n            // Rotate based on quadrant\n            if (quadrant === 0) return { x: sqX, y: sqY };\n            if (quadrant === 1) return { x: -sqY, y: sqX };\n            if (quadrant === 2) return { x: -sqX, y: -sqY };\n            return { x: sqY, y: -sqX };\n          \n          case \"triangle\":\n            // Equilateral triangle\n            const triSide = 3;\n            const triAngle = angle % (2*Math.PI/triSide);\n            const triIndex = Math.floor(angle / (2*Math.PI/triSide)) % triSide;\n            \n            // Vertices of a triangle centered at 0,0\n            const vertices = [\n              { x: 0, y: -adjustedSize * 2/3 }, // Top\n              { x: adjustedSize * Math.sqrt(3)/3, y: adjustedSize/3 }, // Bottom right\n              { x: -adjustedSize * Math.sqrt(3)/3, y: adjustedSize/3 }  // Bottom left\n            ];\n            \n            // Calculate point on the edge\n            const fromVtx = vertices[triIndex];\n            const toVtx = vertices[(triIndex + 1) % triSide];\n            const ratio = triAngle / (2*Math.PI/triSide);\n            \n            return {\n              x: fromVtx.x + (toVtx.x - fromVtx.x) * ratio,\n              y: fromVtx.y + (toVtx.y - fromVtx.y) * ratio\n            };\n          \n          case \"diamond\":\n            // Diamond (rhombus)\n            const diamondAngle = angle % (Math.PI/2);\n            const diamondQuadrant = Math.floor(angle / (Math.PI/2)) % 4;\n            const sharpness = params.sharpness; // How pointy the diamond is\n            \n            // Vertices for a diamond\n            const diamondVertices = [\n              { x: 0, y: -adjustedSize }, // Top\n              { x: adjustedSize * sharpness, y: 0 }, // Right\n              { x: 0, y: adjustedSize }, // Bottom\n              { x: -adjustedSize * sharpness, y: 0 } // Left\n            ];\n            \n            // Get vertices for the current edge\n            const fromPoint = diamondVertices[diamondQuadrant];\n            const toPoint = diamondVertices[(diamondQuadrant + 1) % 4];\n            const edgeRatio = diamondAngle / (Math.PI/2);\n            \n            return {\n              x: fromPoint.x + (toPoint.x - fromPoint.x) * edgeRatio,\n              y: fromPoint.y + (toPoint.y - fromPoint.y) * edgeRatio\n            };\n          \n          case \"oval\":\n            // Oval (ellipse)\n            const aspectRatio = params.aspectRatio;\n            return {\n              x: adjustedSize * Math.cos(angle) * aspectRatio,\n              y: adjustedSize * Math.sin(angle)\n            };\n          \n          default:\n            // Fallback to circle\n            return {\n              x: adjustedSize * Math.cos(angle),\n              y: adjustedSize * Math.sin(angle)\n            };\n        }\n      };\n\n      // Get the scale factor needed to fit the pattern\n      const getScaleFactor = () => {\n        const { maxX, maxY } = calculatePatternBoundaries();\n        const maxExtent = Math.max(maxX, maxY);\n        \n        // Canvas size is 600x600, center is at 300,300\n        // Leave a 50px margin on all sides\n        const maxAllowedExtent = 250; // (600/2 - 50)\n        \n        // If pattern is too big, scale it down\n        if (maxExtent > maxAllowedExtent) {\n          return maxAllowedExtent / maxExtent;\n        }\n        \n        // Otherwise, keep original scale\n        return 1.0;\n      };\n\n      // Get the final image when completed\n      const generateFinalOutput = () => {\n        // Create two separate graphics:\n        // 1. The background canvas (black)\n        let backgroundCanvas = p.createGraphics(600, 600);\n        backgroundCanvas.background(0); // BLACK BACKGROUND\n        \n        // 2. The transparent spirograph with all layers merged (but no background)\n        let transparentSpiro = p.createGraphics(600, 600);\n        transparentSpiro.clear(); // Completely transparent\n        \n        // Overlay all layers onto the transparent spirograph\n        for (let i = 0; i < layerCanvases.length; i++) {\n          transparentSpiro.image(layerCanvases[i], 0, 0);\n        }\n        \n        // Return just the transparent spirograph - the black background stays in the canvas\n        return transparentSpiro;\n      };\n      \n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        \n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Rhodonea - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Epitrochoid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Hypotrochoid - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // PolySpirograph - Super Rare 8%\n        } else {\n          shapeIndex = 4; // Lissajous - Legendary 2%\n        }\n        \n        params = {}; // Reset params\n        \n        switch(shapeIndex) {\n          case 0: // Rhodonea (now Common)\n            shapeType = \"Rhodonea\";\n            params.k = p.int(p.random(4, 9));\n            \n            maxT = (params.k % 2 === 0) ? p.TWO_PI : p.PI;\n            break;\n            \n          case 1: // Epitrochoid (remains Uncommon)\n            shapeType = \"Epitrochoid\";\n            params.R = p.random(200, 300);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(80, 160);\n            \n            const gcd2 = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd2);\n            break;\n            \n          case 2: // Hypotrochoid (now Rare)\n            shapeType = \"Hypotrochoid\";\n            params.R = p.random(250, 400);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(100, 180);\n            \n            const gcd = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd);\n            break;\n            \n          case 3: // PolySpirograph (Super Rare)\n            shapeType = \"PolySpirograph\";\n            \n            // Select a base shape randomly\n            const shapes = [\"square\", \"triangle\", \"diamond\", \"oval\"];\n            params.baseShape = shapes[Math.floor(p.random(shapes.length))];\n            \n            // Base parameters\n            params.baseSize = p.random(150, 250); // Size of the base shape\n            params.r = p.random(40, 80);          // Radius of moving circle\n            params.d = p.random(70, 130);         // Pen offset\n            params.loops = p.int(p.random(5, 10)); // Number of loops\n            params.rotation = p.random(0.005, 0.02); // Additional rotation\n            \n            // Specific parameters for certain shapes\n            if (params.baseShape === \"oval\") {\n              params.aspectRatio = p.random(0.6, 0.8); // Width to height ratio\n            }\n            \n            // For diamond\n            if (params.baseShape === \"diamond\") {\n              params.sharpness = p.random(0.7, 1.3); // How pointy the diamond is\n            }\n            \n            // For all shapes - add slight randomization to avoid perfect symmetry\n            params.variation = p.random(0.02, 0.08);\n            \n            // Calculate max time based on loops\n            maxT = p.TWO_PI * params.loops;\n            break;\n            \n          case 4: // Lissajous (now Legendary)\n            shapeType = \"Lissajous\";\n            params.A = p.random(200, 350);\n            params.B = p.random(200, 350);\n            params.a = p.int(p.random(3, 7));\n            params.b = p.int(p.random(3, 7));\n            params.delta = p.random(0, p.PI);\n            \n            // Find cycle length\n            const lcm = (params.a * params.b) / findGCD(params.a, params.b);\n            maxT = p.TWO_PI * lcm;\n            break;\n        }\n        \n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 10);\n        \n        // Set up layer transitions - divide maxT into segments for each layer\n        layerCompletionPoints = [];\n        for (let i = 1; i < totalLayers; i++) {\n          layerCompletionPoints.push((i / totalLayers) * maxT);\n        }\n        layerCompletionPoints.push(maxT); // Final completion point\n        \n        rarityText = shapeRarity[shapeType];\n        \n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: { ...params }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        // Clear all canvases\n        p.background(0);\n        mainCanvas.background(0);\n        \n        // Reset layer canvases\n        layerCanvases = [];\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background for each layer\n          layerCanvases.push(layerCanvas);\n        }\n        \n        p.randomSeed(currentSeed);\n        \n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        \n        totalLayers = palette.colors.length; // Match layers to palette colors\n        \n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n        \n        // Reset drawing variables\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        currentColorIndex = 0;\n        currentLayer = 0;\n        \n        // Pick a shape type\n        selectShapeType();\n        \n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        \n        console.log(`Spirograph #${currentSeed} â€” ${getShapeDescription()} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n        \n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        \n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function() {\n        // Create main canvas with black background\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        canvas.style('background-color', 'black'); // Ensure canvas always shows black\n        \n        // Initialize main drawing canvas with black background\n        mainCanvas = p.createGraphics(600, 600);\n        mainCanvas.background(0);\n        \n        // Initialize layer canvases - one for each color\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background\n          layerCanvases.push(layerCanvas);\n        }\n        \n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n        \n        // Apply same settings to all layer canvases\n        for (let canvas of layerCanvases) {\n          canvas.strokeJoin(p.ROUND);\n          canvas.strokeCap(p.ROUND);\n        }\n        \n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n        \n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function() {\n        // Clear main canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n        \n        // Display in-progress work\n        p.image(mainCanvas, 0, 0);\n        \n        // Get the appropriate scale factor to fit pattern in canvas\n        const scaleFactor = getScaleFactor();\n        \n        // Draw on the main canvas\n        mainCanvas.push();\n        mainCanvas.translate(mainCanvas.width / 2, mainCanvas.height / 2);\n        \n        // Add rotation that completes during drawing\n        let fullRotationAngle = (t / maxT) * p.TWO_PI;\n        mainCanvas.rotate(fullRotationAngle);\n        \n        // Current layer canvas (for separate color layers)\n        let currentLayerCanvas = layerCanvases[currentLayer];\n        currentLayerCanvas.push();\n        currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n        currentLayerCanvas.rotate(fullRotationAngle);\n        \n        // Set color for current layer\n        currentColor = palette.colors[currentLayer];\n        mainCanvas.stroke(currentColor);\n        currentLayerCanvas.stroke(currentColor);\n        mainCanvas.strokeWeight(1);\n        currentLayerCanvas.strokeWeight(1);\n\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch(shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r1) * p.cos(t) + params.d * p.cos(((params.R - params.r1) / params.r1) * t);\n            y = (params.R - params.r1) * p.sin(t) - params.d * p.sin(((params.R - params.r1) / params.r1) * t);\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r1) * p.cos(t) - params.d * p.cos(((params.R + params.r1) / params.r1) * t);\n            y = (params.R + params.r1) * p.sin(t) - params.d * p.sin(((params.R + params.r1) / params.r1) * t);\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = 250 * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n            break;\n          case \"PolySpirograph\":\n            // Get the base shape coordinate at current angle\n            const baseAngle = t * 0.5; // Move slower around the base shape\n            const baseCoord = getBaseShapeCoord(baseAngle, params.baseShape, params.baseSize);\n            \n            // Moving circle center coordinates\n            const centerX = baseCoord.x;\n            const centerY = baseCoord.y;\n            \n            // Position of the pen\n            const penAngle = ((params.baseSize / params.r) * t) + (t * params.rotation);\n            x = centerX + params.d * Math.cos(penAngle);\n            y = centerY + params.d * Math.sin(penAngle);\n            break;\n        }\n\n        // Apply dynamic scaling to ensure pattern fits\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment on both canvases\n        if (prevX !== null) {\n          mainCanvas.line(prevX, prevY, x, y);\n          currentLayerCanvas.line(prevX, prevY, x, y);\n        }\n        \n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n          \n          // Check if we've reached a layer transition point\n          if (currentLayer < layerCompletionPoints.length-1 && t >= layerCompletionPoints[currentLayer]) {\n            // Time to move to next layer\n            currentLayer++;\n            // Make sure we don't go beyond the array bounds\n            if (currentLayer < layerCanvases.length) {\n              currentLayerCanvas = layerCanvases[currentLayer];\n              currentLayerCanvas.push();\n              currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n              // Apply rotation to the new layer\n              let fullRotationAngle = (t / maxT) * p.TWO_PI;\n              currentLayerCanvas.rotate(fullRotationAngle);\n              currentColor = palette.colors[Math.min(currentLayer, palette.colors.length - 1)];\n              mainCanvas.stroke(currentColor);\n              currentLayerCanvas.stroke(currentColor);\n            }\n          }\n          \n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n          \n          // Re-calculate based on shape type with updated t\n          switch(shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r1) * p.cos(t) + params.d * p.cos(((params.R - params.r1) / params.r1) * t);\n              nextY = (params.R - params.r1) * p.sin(t) - params.d * p.sin(((params.R - params.r1) / params.r1) * t);\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r1) * p.cos(t) - params.d * p.cos(((params.R + params.r1) / params.r1) * t);\n              nextY = (params.R + params.r1) * p.sin(t) - params.d * p.sin(((params.R + params.r1) / params.r1) * t);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n              break;\n            case \"PolySpirograph\":\n              // Get the base shape coordinate\n              const baseAngle = t * 0.5;\n              const baseCoord = getBaseShapeCoord(baseAngle, params.baseShape, params.baseSize);\n              \n              // Calculate pen position\n              const penAngle = ((params.baseSize / params.r) * t) + (t * params.rotation);\n              nextX = baseCoord.x + params.d * Math.cos(penAngle);\n              nextY = baseCoord.y + params.d * Math.sin(penAngle);\n              break;\n          }\n          \n          // Apply dynamic scaling to ensure pattern fits\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n          \n          // Draw the line on both canvases\n          mainCanvas.line(prevX, prevY, nextX, nextY);\n          currentLayerCanvas.line(prevX, prevY, nextX, nextY);\n          \n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n        \n        // Increment time\n        t += 0.015;\n        \n        // Update global rotation\n        globalAngle = (t / maxT) * p.TWO_PI;\n        \n        // Update progress\n        const currentProgress = Math.min(100, Math.round((t / maxT) * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n        \n        // End current push transforms\n        mainCanvas.pop();\n        currentLayerCanvas.pop();\n\n        // Check if drawing is complete\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n          \n          // Make sure to end all open transforms\n          mainCanvas.pop();\n          // Safely pop any open layer transforms\n          for (let i = 0; i < layerCanvases.length; i++) {\n            try {\n              layerCanvases[i].pop();\n            } catch (e) {\n              // Ignore errors if there's no matching push\n              console.log(\"Note: Layer\", i, \"didn't need popping\");\n            }\n          }\n          \n          // Generate final output with black background and all layers\n          finalOutput = generateFinalOutput();\n          \n          // Notify parent that drawing is complete\n          onDrawingComplete && onDrawingComplete(finalOutput);\n        }\n      };\n      \n      // Display info on the canvas\n      p.displayInfo = function() {\n        // Create a semi-transparent background for the text\n        p.fill(0, 200);\n        p.noStroke();\n        p.rect(10, 10, 380, 100, 10);\n        \n        // Display NFT info\n        p.textSize(24);\n        p.fill(255);\n        p.text(`Spyro #${currentSeed}`, 20, 40);\n        \n        p.textSize(16);\n        p.fill(palette.colors[0]);\n        p.text(`ðŸŒŸ ${getShapeDescription()} Â· ${rarityText}`, 20, 70);\n        \n        p.fill(palette.colors[1]);\n        p.text(`ðŸŽ¨ Palette: ${palette.name} Â· ${palette.rarity}`, 20, 95);\n      };\n      \n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n      \n      // Change to a specific seed\n      p.setSeed = (newSeed) => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n    \n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return (\n    <div className=\"spiro-canvas-container\">\n      <div ref={canvasRef} className=\"canvas-wrapper\"></div>\n      {isDrawing && (\n        <div className=\"progress-bar-container\">\n          <div className=\"progress-bar\" style={{ width: `${progress}%` }}></div>\n          <span className=\"progress-text\">{progress}%</span>\n        </div>\n      )}\n      {!isDrawing && (\n        <div className=\"canvas-complete\">\n          <span>Drawing complete!</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpiroCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}