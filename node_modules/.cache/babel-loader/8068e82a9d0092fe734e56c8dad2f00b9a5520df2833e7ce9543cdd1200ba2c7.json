{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiroCanvas = ({\n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = p => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [{\n        name: \"Neon Mirage\",\n        colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"],\n        rarity: \"Common\"\n      }, {\n        name: \"Digital Dream\",\n        colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"],\n        rarity: \"Uncommon\"\n      }, {\n        name: \"Crystal Sunset\",\n        colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"],\n        rarity: \"Rare\"\n      }, {\n        name: \"Cyber Haze\",\n        colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"],\n        rarity: \"Super Rare\"\n      }, {\n        name: \"Pastel Vapor\",\n        colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"],\n        rarity: \"Legendary\"\n      }];\n\n      // Shape rarity distribution - 5 premium spirograph types, ranked by real-world rarity\n      const shapeRarity = {\n        \"HyperTrochoid\": \"Common\",\n        // 40%\n        \"DoubleEpicycloid\": \"Uncommon\",\n        // 30% \n        \"CompoundRose\": \"Rare\",\n        // 20%\n        \"Harmonograph\": \"Super Rare\",\n        // 8%\n        \"MultiCycloid\": \"Legendary\" // 2%\n      };\n\n      // Multiple layer canvases\n      let mainCanvas; // Main visible canvas with black background\n      let layerCanvases = []; // Array of layer graphics for each color\n      let finalOutput; // Final combined output\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let currentColorIndex = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n\n      // Layer tracking\n      let totalLayers = 5; // Match number of colors in palette\n      let currentLayer = 0;\n      let layerCompletionPoints = []; // Points at which to switch layers\n\n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Helper function to find least common multiple\n      const findLCM = (a, b) => {\n        return a * b / findGCD(a, b);\n      };\n\n      // Calculate the maximum boundaries of the pattern to ensure it fits\n      const calculatePatternBoundaries = () => {\n        let maxX = 0;\n        let maxY = 0;\n\n        // Sample many points to find the maximum extent\n        for (let step = 0; step < maxT; step += 0.1) {\n          let x = 0;\n          let y = 0;\n\n          // Calculate position based on shape type\n          switch (shapeType) {\n            case \"HyperTrochoid\":\n              // Complex hypotrochoid with additional modulation\n              const baseX = (params.R - params.r) * p.cos(step) + params.d * p.cos((params.R - params.r) / params.r * step);\n              const baseY = (params.R - params.r) * p.sin(step) - params.d * p.sin((params.R - params.r) / params.r * step);\n\n              // Add secondary motion\n              const secondX = params.modSize * p.cos(step * params.modFreq + params.modPhase);\n              const secondY = params.modSize * p.sin(step * params.modFreq + params.modPhase);\n              x = baseX + secondX;\n              y = baseY + secondY;\n              break;\n            case \"DoubleEpicycloid\":\n              // Primary epicycloid\n              const epi1X = (params.R1 + params.r1) * p.cos(step) - params.d1 * p.cos((params.R1 + params.r1) / params.r1 * step);\n              const epi1Y = (params.R1 + params.r1) * p.sin(step) - params.d1 * p.sin((params.R1 + params.r1) / params.r1 * step);\n\n              // Secondary epicycloid (smaller, faster)\n              const epi2X = (params.R2 + params.r2) * p.cos(step * params.speedRatio) - params.d2 * p.cos((params.R2 + params.r2) / params.r2 * step * params.speedRatio);\n              const epi2Y = (params.R2 + params.r2) * p.sin(step * params.speedRatio) - params.d2 * p.sin((params.R2 + params.r2) / params.r2 * step * params.speedRatio);\n\n              // Blend the two patterns with size ratio\n              x = epi1X + epi2X * params.sizeRatio;\n              y = epi1Y + epi2Y * params.sizeRatio;\n              break;\n            case \"CompoundRose\":\n              // Primary rose curve\n              const roseRadius1 = params.amplitude1 * p.cos(params.k1 * step);\n              const rose1X = roseRadius1 * p.cos(step);\n              const rose1Y = roseRadius1 * p.sin(step);\n\n              // Secondary rose curve\n              const roseRadius2 = params.amplitude2 * p.cos(params.k2 * step + params.phase);\n              const rose2X = roseRadius2 * p.cos(step * params.frequency);\n              const rose2Y = roseRadius2 * p.sin(step * params.frequency);\n\n              // Combine the patterns\n              x = rose1X + rose2X;\n              y = rose1Y + rose2Y;\n              break;\n            case \"Harmonograph\":\n              // A harmonograph uses multiple damped pendulums to create the pattern\n              // 2D harmonograph with 2 pendulums (4 degrees of freedom)\n              const dx = p.exp(-params.dampingX * step);\n              const dy = p.exp(-params.dampingY * step);\n\n              // X-direction: combination of two pendulums\n              x = params.amplitudeX1 * p.sin(step * params.frequencyX1 + params.phaseX1) * dx + params.amplitudeX2 * p.sin(step * params.frequencyX2 + params.phaseX2) * dx;\n\n              // Y-direction: combination of two pendulums\n              y = params.amplitudeY1 * p.sin(step * params.frequencyY1 + params.phaseY1) * dy + params.amplitudeY2 * p.sin(step * params.frequencyY2 + params.phaseY2) * dy;\n              break;\n            case \"MultiCycloid\":\n              // The most complex pattern - combination of multiple cycloids\n              // Initialize coordinates\n              x = 0;\n              y = 0;\n\n              // Add base motion\n              x += params.baseAmplitude * p.cos(step);\n              y += params.baseAmplitude * p.sin(step);\n\n              // Add multiple cycloid components\n              for (let i = 0; i < params.components.length; i++) {\n                const comp = params.components[i];\n\n                // Calculate contribution from this component\n                const angle = step * comp.frequency + comp.phase;\n                const radius = comp.amplitude;\n                if (comp.type === \"epicycloid\") {\n                  x += radius * p.cos(angle);\n                  y += radius * p.sin(angle);\n                } else if (comp.type === \"epitrochoid\") {\n                  const innerRadius = radius * 0.6;\n                  const offset = radius * 0.4;\n                  x += (radius + innerRadius) * p.cos(angle) - offset * p.cos((radius + innerRadius) / innerRadius * angle);\n                  y += (radius + innerRadius) * p.sin(angle) - offset * p.sin((radius + innerRadius) / innerRadius * angle);\n                } else if (comp.type === \"hypotrochoid\") {\n                  const innerRadius = radius * 0.4;\n                  const offset = radius * 0.6;\n                  x += (radius - innerRadius) * p.cos(angle) + offset * p.cos((radius - innerRadius) / innerRadius * angle);\n                  y += (radius - innerRadius) * p.sin(angle) - offset * p.sin((radius - innerRadius) / innerRadius * angle);\n                }\n              }\n              break;\n          }\n\n          // Update max boundaries\n          maxX = Math.max(maxX, Math.abs(x));\n          maxY = Math.max(maxY, Math.abs(y));\n        }\n        return {\n          maxX,\n          maxY\n        };\n      };\n\n      // Get the scale factor needed to fit the pattern\n      const getScaleFactor = () => {\n        const {\n          maxX,\n          maxY\n        } = calculatePatternBoundaries();\n        const maxExtent = Math.max(maxX, maxY);\n\n        // Canvas size is 600x600, center is at 300,300\n        // Leave a 50px margin on all sides\n        const maxAllowedExtent = 250; // (600/2 - 50)\n\n        // If pattern is too big, scale it down\n        if (maxExtent > maxAllowedExtent) {\n          return maxAllowedExtent / maxExtent;\n        }\n\n        // Otherwise, keep original scale\n        return 1.0;\n      };\n\n      // Get the final image when completed\n      const generateFinalOutput = () => {\n        // Create two separate graphics:\n        // 1. The background canvas (black)\n        let backgroundCanvas = p.createGraphics(600, 600);\n        backgroundCanvas.background(0); // BLACK BACKGROUND\n\n        // 2. The transparent spirograph with all layers merged (but no background)\n        let transparentSpiro = p.createGraphics(600, 600);\n        transparentSpiro.clear(); // Completely transparent\n\n        // Overlay all layers onto the transparent spirograph\n        for (let i = 0; i < layerCanvases.length; i++) {\n          transparentSpiro.image(layerCanvases[i], 0, 0);\n        }\n\n        // Return just the transparent spirograph - the black background stays in the canvas\n        return transparentSpiro;\n      };\n\n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        if (shapeRoll < 40) {\n          shapeIndex = 0; // HyperTrochoid - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // DoubleEpicycloid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // CompoundRose - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // Harmonograph - Super Rare 8%\n        } else {\n          shapeIndex = 4; // MultiCycloid - Legendary 2%\n        }\n        params = {}; // Reset params\n\n        switch (shapeIndex) {\n          case 0:\n            // HyperTrochoid (Complex hypotrochoid with modulation) - Common but cool\n            shapeType = \"HyperTrochoid\";\n\n            // Base hypotrochoid parameters (carefully chosen for interesting patterns)\n            params.R = p.int(p.random(100, 180)); // Fixed circle radius\n            params.r = p.int(p.random(30, 70)); // Moving circle radius\n\n            // Make sure R and r produce complex patterns\n            if (params.R % params.r === 0 || params.r % params.R === 0) {\n              params.r = p.int(p.random(41, 67)); // Prime-number-ish range\n            }\n\n            // Pen offset (controls loop size)\n            params.d = p.int(p.random(30, 90));\n\n            // Modulation parameters (for the secondary motion)\n            params.modSize = p.random(15, 30); // Size of the modulation\n            params.modFreq = p.random(3, 7); // Frequency of modulation\n            params.modPhase = p.random(0, p.TWO_PI); // Phase offset\n\n            // Calculate how many cycles needed to complete the pattern\n            const gcd = findGCD(params.R, params.r);\n            maxT = p.TWO_PI * (params.r / gcd) * 1.5; // Extra cycles for the modulation\n            break;\n          case 1:\n            // DoubleEpicycloid (Two epicycloids combined) - Uncommon\n            shapeType = \"DoubleEpicycloid\";\n\n            // Primary epicycloid\n            params.R1 = p.int(p.random(70, 120)); // Primary fixed circle\n            params.r1 = p.int(p.random(20, 50)); // Primary moving circle\n            params.d1 = p.int(p.random(30, 70)); // Primary pen distance\n\n            // Secondary epicycloid (smaller, faster)\n            params.R2 = p.int(p.random(30, 60)); // Secondary fixed circle\n            params.r2 = p.int(p.random(10, 30)); // Secondary moving circle\n            params.d2 = p.int(p.random(15, 40)); // Secondary pen distance\n\n            // Relationship between the two patterns\n            params.speedRatio = p.random(1.5, 3.5); // How much faster the second one moves\n            params.sizeRatio = p.random(0.3, 0.6); // How big the second one is compared to first\n\n            // Calculate cycle length based on both patterns\n            const gcd1 = findGCD(params.R1, params.r1);\n            const cycles1 = params.r1 / gcd1;\n            const gcd2 = findGCD(params.R2, params.r2);\n            const cycles2 = params.r2 / gcd2 * params.speedRatio;\n            const lcm = findLCM(cycles1, cycles2);\n            maxT = p.TWO_PI * lcm;\n            break;\n          case 2:\n            // CompoundRose (Two rose curves overlaid) - Rare\n            shapeType = \"CompoundRose\";\n\n            // Primary rose parameters\n            params.k1 = p.random(3, 9) / p.random(1, 5); // Ratio determines petals\n            params.amplitude1 = p.random(120, 180); // Size of primary rose\n\n            // Secondary rose parameters\n            params.k2 = p.random(2, 7) / p.random(1, 4); // Different ratio for overlay\n            params.amplitude2 = p.random(50, 100); // Size of secondary rose\n            params.phase = p.random(0, p.TWO_PI); // Phase offset between patterns\n            params.frequency = p.random(0.5, 2.5); // Frequency multiplier for second pattern\n\n            // Make sure we get interesting ratios\n            if (Math.abs(params.k1 - params.k2) < 0.3) {\n              params.k2 += 0.5; // Ensure different petal counts\n            }\n\n            // Calculate cycle time based on the two patterns\n            maxT = p.TWO_PI * 4; // Multiple rotations to complete pattern\n            break;\n          case 3:\n            // Harmonograph (Damped pendulum system) - Super Rare\n            shapeType = \"Harmonograph\";\n\n            // X-direction pendulums\n            params.amplitudeX1 = p.random(100, 200);\n            params.frequencyX1 = p.random(1, 5);\n            params.phaseX1 = p.random(0, p.TWO_PI);\n            params.amplitudeX2 = p.random(50, 150);\n            params.frequencyX2 = p.random(1, 5);\n            params.phaseX2 = p.random(0, p.TWO_PI);\n\n            // Y-direction pendulums\n            params.amplitudeY1 = p.random(100, 200);\n            params.frequencyY1 = p.random(1, 5);\n            params.phaseY1 = p.random(0, p.TWO_PI);\n            params.amplitudeY2 = p.random(50, 150);\n            params.frequencyY2 = p.random(1, 5);\n            params.phaseY2 = p.random(0, p.TWO_PI);\n\n            // Damping factors (how quickly oscillations die down)\n            params.dampingX = p.random(0.005, 0.02);\n            params.dampingY = p.random(0.005, 0.02);\n\n            // Ensure we get interesting frequency ratios\n            // Check if frequencies are too close to each other\n            if (Math.abs(params.frequencyX1 - params.frequencyX2) < 0.3) {\n              params.frequencyX2 += 0.5;\n            }\n            if (Math.abs(params.frequencyY1 - params.frequencyY2) < 0.3) {\n              params.frequencyY2 += 0.5;\n            }\n\n            // Calculate time needed for drawing\n            // For harmonographs, we draw until oscillations dampen significantly\n            const dampingFactor = Math.min(params.dampingX, params.dampingY);\n            maxT = 5 / dampingFactor; // Draw until amplitude is about 1% of original\n            break;\n          case 4:\n            // MultiCycloid (Multiple combined cycloids) - Legendary\n            shapeType = \"MultiCycloid\";\n\n            // Base parameters\n            params.baseAmplitude = p.random(80, 150); // Size of the base circle\n\n            // Number of components to combine\n            const numComponents = p.int(p.random(4, 7));\n\n            // Component array\n            params.components = [];\n\n            // Track frequency values to ensure proper LCM calculation\n            const frequencies = [];\n\n            // Generate parameters for each component\n            for (let i = 0; i < numComponents; i++) {\n              // Each component is progressively smaller\n              const scaleFactor = 1 - i * 0.1;\n\n              // Determine component type\n              const typeRoll = p.random(3);\n              let type;\n              if (typeRoll < 1) type = \"epicycloid\";else if (typeRoll < 2) type = \"epitrochoid\";else type = \"hypotrochoid\";\n\n              // Prime-number-inspired frequencies for complex patterns\n              const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23];\n              const frequency = primes[p.int(p.random(primes.length))];\n              frequencies.push(frequency);\n\n              // Create component\n              params.components.push({\n                type: type,\n                amplitude: p.random(20, 60) * scaleFactor,\n                frequency: frequency / 10,\n                // Scale down for smoother motion\n                phase: p.random(0, p.TWO_PI)\n              });\n            }\n\n            // Calculate total cycles based on all components\n            let totalCycles = frequencies[0];\n            for (let i = 1; i < frequencies.length; i++) {\n              totalCycles = findLCM(totalCycles, frequencies[i]);\n            }\n            maxT = p.TWO_PI * (totalCycles / 10) * 1.5; // Account for frequency scaling\n            break;\n        }\n\n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 4);\n\n        // Set up layer transitions - divide maxT into segments for each layer\n        layerCompletionPoints = [];\n        for (let i = 1; i < totalLayers; i++) {\n          layerCompletionPoints.push(i / totalLayers * maxT);\n        }\n        layerCompletionPoints.push(maxT); // Final completion point\n\n        rarityText = shapeRarity[shapeType];\n\n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: {\n            ...params\n          }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        // Clear all canvases\n        p.background(0);\n        mainCanvas.background(0);\n\n        // Reset layer canvases\n        layerCanvases = [];\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background for each layer\n          layerCanvases.push(layerCanvas);\n        }\n        p.randomSeed(currentSeed);\n\n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        totalLayers = palette.colors.length; // Match layers to palette colors\n\n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n\n        // Reset drawing variables\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        currentColorIndex = 0;\n        currentLayer = 0;\n\n        // Pick a shape type\n        selectShapeType();\n\n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n\n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function () {\n        // Create main canvas with black background\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        canvas.style('background-color', 'black'); // Ensure canvas always shows black\n\n        // Initialize main drawing canvas with black background\n        mainCanvas = p.createGraphics(600, 600);\n        mainCanvas.background(0);\n\n        // Initialize layer canvases - one for each color\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background\n          layerCanvases.push(layerCanvas);\n        }\n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n\n        // Apply same settings to all layer canvases\n        for (let canvas of layerCanvases) {\n          canvas.strokeJoin(p.ROUND);\n          canvas.strokeCap(p.ROUND);\n        }\n\n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n\n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function () {\n        // Clear main canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n\n        // Display in-progress work\n        p.image(mainCanvas, 0, 0);\n\n        // Display info\n        p.displayInfo();\n\n        // Get the appropriate scale factor to fit pattern in canvas\n        const scaleFactor = getScaleFactor();\n\n        // Draw on the main canvas\n        mainCanvas.push();\n        mainCanvas.translate(mainCanvas.width / 2, mainCanvas.height / 2);\n\n        // Add rotation that completes during drawing\n        let fullRotationAngle = t / maxT * p.TWO_PI * 0.1; // Small rotation for subtle effect\n        mainCanvas.rotate(fullRotationAngle);\n\n        // Current layer canvas (for separate color layers)\n        let currentLayerCanvas = layerCanvases[currentLayer];\n        currentLayerCanvas.push();\n        currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n        currentLayerCanvas.rotate(fullRotationAngle);\n\n        // Set color for current layer\n        currentColor = palette.colors[currentLayer];\n        mainCanvas.stroke(currentColor);\n        currentLayerCanvas.stroke(currentColor);\n        mainCanvas.strokeWeight(1);\n        currentLayerCanvas.strokeWeight(1);\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch (shapeType) {\n          case \"HyperTrochoid\":\n            // Complex hypotrochoid with additional modulation\n            const baseX = (params.R - params.r) * p.cos(t) + params.d * p.cos((params.R - params.r) / params.r * t);\n            const baseY = (params.R - params.r) * p.sin(t) - params.d * p.sin((params.R - params.r) / params.r * t);\n\n            // Add secondary motion\n            const secondX = params.modSize * p.cos(t * params.modFreq + params.modPhase);\n            const secondY = params.modSize * p.sin(t * params.modFreq + params.modPhase);\n            x = baseX + secondX;\n            y = baseY + secondY;\n            break;\n          case \"DoubleEpicycloid\":\n            // Primary epicycloid\n            const epi1X = (params.R1 + params.r1) * p.cos(t) - params.d1 * p.cos((params.R1 + params.r1) / params.r1 * t);\n            const epi1Y = (params.R1 + params.r1) * p.sin(t) - params.d1 * p.sin((params.R1 + params.r1) / params.r1 * t);\n\n            // Secondary epicycloid (smaller, faster)\n            const epi2X = (params.R2 + params.r2) * p.cos(t * params.speedRatio) - params.d2 * p.cos((params.R2 + params.r2) / params.r2 * t * params.speedRatio);\n            const epi2Y = (params.R2 + params.r2) * p.sin(t * params.speedRatio) - params.d2 * p.sin((params.R2 + params.r2) / params.r2 * t * params.speedRatio);\n\n            // Blend the two patterns with size ratio\n            x = epi1X + epi2X * params.sizeRatio;\n            y = epi1Y + epi2Y * params.sizeRatio;\n            break;\n          case \"CompoundRose\":\n            // Primary rose curve\n            const roseRadius1 = params.amplitude1 * p.cos(params.k1 * t);\n            const rose1X = roseRadius1 * p.cos(t);\n            const rose1Y = roseRadius1 * p.sin(t);\n\n            // Secondary rose curve\n            const roseRadius2 = params.amplitude2 * p.cos(params.k2 * t + params.phase);\n            const rose2X = roseRadius2 * p.cos(t * params.frequency);\n            const rose2Y = roseRadius2 * p.sin(t * params.frequency);\n\n            // Combine the patterns\n            x = rose1X + rose2X;\n            y = rose1Y + rose2Y;\n            break;\n          case \"Harmonograph\":\n            // A harmonograph uses multiple damped pendulums to create the pattern\n            // 2D harmonograph with 2 pendulums (4 degrees of freedom)\n            const dx = p.exp(-params.dampingX * t);\n            const dy = p.exp(-params.dampingY * t);\n\n            // X-direction: combination of two pendulums\n            x = params.amplitudeX1 * p.sin(t * params.frequencyX1 + params.phaseX1) * dx + params.amplitudeX2 * p.sin(t * params.frequencyX2 + params.phaseX2) * dx;\n\n            // Y-direction: combination of two pendulums\n            y = params.amplitudeY1 * p.sin(t * params.frequencyY1 + params.phaseY1) * dy + params.amplitudeY2 * p.sin(t * params.frequencyY2 + params.phaseY2) * dy;\n            break;\n          case \"MultiCycloid\":\n            // The most complex pattern - combination of multiple cycloids\n            // Initialize coordinates\n            x = 0;\n            y = 0;\n\n            // Add base motion\n            x += params.baseAmplitude * p.cos(t);\n            y += params.baseAmplitude * p.sin(t);\n\n            // Add multiple cycloid components\n            for (let i = 0; i < params.components.length; i++) {\n              const comp = params.components[i];\n\n              // Calculate contribution from this component\n              const angle = t * comp.frequency + comp.phase;\n              const radius = comp.amplitude;\n              if (comp.type === \"epicycloid\") {\n                x += radius * p.cos(angle);\n                y += radius * p.sin(angle);\n              } else if (comp.type === \"epitrochoid\") {\n                const innerRadius = radius * 0.6;\n                const offset = radius * 0.4;\n                x += (radius + innerRadius) * p.cos(angle) - offset * p.cos((radius + innerRadius) / innerRadius * angle);\n                y += (radius + innerRadius) * p.sin(angle) - offset * p.sin((radius + innerRadius) / innerRadius * angle);\n              } else if (comp.type === \"hypotrochoid\") {\n                const innerRadius = radius * 0.4;\n                const offset = radius * 0.6;\n                x += (radius - innerRadius) * p.cos(angle) + offset * p.cos((radius - innerRadius) / innerRadius * angle);\n                y += (radius - innerRadius) * p.sin(angle) - offset * p.sin((radius - innerRadius) / innerRadius * angle);\n              }\n            }\n            break;\n        }\n\n        // Apply dynamic scaling to ensure pattern fits\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment on both canvases\n        if (prevX !== null) {\n          mainCanvas.line(prevX, prevY, x, y);\n          currentLayerCanvas.line(prevX, prevY, x, y);\n        }\n\n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n\n          // Check if we've reached a layer transition point\n          if (currentLayer < layerCompletionPoints.length - 1 && t >= layerCompletionPoints[currentLayer]) {\n            // Time to move to next layer\n            currentLayer++;\n            // Make sure we don't go beyond the array bounds\n            if (currentLayer < layerCanvases.length) {\n              currentLayerCanvas = layerCanvases[currentLayer];\n              currentLayerCanvas.push();\n              currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n              // Apply rotation to the new layer\n              let fullRotationAngle = t / maxT * p.TWO_PI * 0.1;\n              currentLayerCanvas.rotate(fullRotationAngle);\n              currentColor = palette.colors[Math.min(currentLayer, palette.colors.length - 1)];\n              mainCanvas.stroke(currentColor);\n              currentLayerCanvas.stroke(currentColor);\n            }\n          }\n\n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n\n          // Re-calculate based on shape type with updated t\n          switch (shapeType) {\n            case \"HyperTrochoid\":\n              // Complex hypotrochoid with additional modulation\n              const baseX = (params.R - params.r) * p.cos(t) + params.d * p.cos((params.R - params.r) / params.r * t);\n              const baseY = (params.R - params.r) * p.sin(t) - params.d * p.sin((params.R - params.r) / params.r * t);\n\n              // Add secondary motion\n              const secondX = params.modSize * p.cos(t * params.modFreq + params.modPhase);\n              const secondY = params.modSize * p.sin(t * params.modFreq + params.modPhase);\n              nextX = baseX + secondX;\n              nextY = baseY + secondY;\n              break;\n            case \"DoubleEpicycloid\":\n              // Primary epicycloid\n              const epi1X = (params.R1 + params.r1) * p.cos(t) - params.d1 * p.cos((params.R1 + params.r1) / params.r1 * t);\n              const epi1Y = (params.R1 + params.r1) * p.sin(t) - params.d1 * p.sin((params.R1 + params.r1) / params.r1 * t);\n\n              // Secondary epicycloid (smaller, faster)\n              const epi2X = (params.R2 + params.r2) * p.cos(t * params.speedRatio) - params.d2 * p.cos((params.R2 + params.r2) / params.r2 * t * params.speedRatio);\n              const epi2Y = (params.R2 + params.r2) * p.sin(t * params.speedRatio) - params.d2 * p.sin((params.R2 + params.r2) / params.r2 * t * params.speedRatio);\n\n              // Blend the two patterns with size ratio\n              nextX = epi1X + epi2X * params.sizeRatio;\n              nextY = epi1Y + epi2Y * params.sizeRatio;\n              break;\n            case \"CompoundRose\":\n              // Primary rose curve\n              const roseRadius1 = params.amplitude1 * p.cos(params.k1 * t);\n              const rose1X = roseRadius1 * p.cos(t);\n              const rose1Y = roseRadius1 * p.sin(t);\n\n              // Secondary rose curve\n              const roseRadius2 = params.amplitude2 * p.cos(params.k2 * t + params.phase);\n              const rose2X = roseRadius2 * p.cos(t * params.frequency);\n              const rose2Y = roseRadius2 * p.sin(t * params.frequency);\n\n              // Combine the patterns\n              nextX = rose1X + rose2X;\n              nextY = rose1Y + rose2Y;\n              break;\n            case \"Harmonograph\":\n              // A harmonograph uses multiple damped pendulums to create the pattern\n              // 2D harmonograph with 2 pendulums (4 degrees of freedom)\n              const dx = p.exp(-params.dampingX * t);\n              const dy = p.exp(-params.dampingY * t);\n\n              // X-direction: combination of two pendulums\n              nextX = params.amplitudeX1 * p.sin(t * params.frequencyX1 + params.phaseX1) * dx + params.amplitudeX2 * p.sin(t * params.frequencyX2 + params.phaseX2) * dx;\n\n              // Y-direction: combination of two pendulums\n              nextY = params.amplitudeY1 * p.sin(t * params.frequencyY1 + params.phaseY1) * dy + params.amplitudeY2 * p.sin(t * params.frequencyY2 + params.phaseY2) * dy;\n              break;\n            case \"MultiCycloid\":\n              // The most complex pattern - combination of multiple cycloids\n              // Initialize coordinates\n              nextX = 0;\n              nextY = 0;\n\n              // Add base motion\n              nextX += params.baseAmplitude * p.cos(t);\n              nextY += params.baseAmplitude * p.sin(t);\n\n              // Add multiple cycloid components\n              for (let i = 0; i < params.components.length; i++) {\n                const comp = params.components[i];\n\n                // Calculate contribution from this component\n                const angle = t * comp.frequency + comp.phase;\n                const radius = comp.amplitude;\n                if (comp.type === \"epicycloid\") {\n                  nextX += radius * p.cos(angle);\n                  nextY += radius * p.sin(angle);\n                } else if (comp.type === \"epitrochoid\") {\n                  const innerRadius = radius * 0.6;\n                  const offset = radius * 0.4;\n                  nextX += (radius + innerRadius) * p.cos(angle) - offset * p.cos((radius + innerRadius) / innerRadius * angle);\n                  nextY += (radius + innerRadius) * p.sin(angle) - offset * p.sin((radius + innerRadius) / innerRadius * angle);\n                } else if (comp.type === \"hypotrochoid\") {\n                  const innerRadius = radius * 0.4;\n                  const offset = radius * 0.6;\n                  nextX += (radius - innerRadius) * p.cos(angle) + offset * p.cos((radius - innerRadius) / innerRadius * angle);\n                  nextY += (radius - innerRadius) * p.sin(angle) - offset * p.sin((radius - innerRadius) / innerRadius * angle);\n                }\n              }\n              break;\n          }\n\n          // Apply dynamic scaling to ensure pattern fits\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n\n          // Draw the line on both canvases\n          mainCanvas.line(prevX, prevY, nextX, nextY);\n          currentLayerCanvas.line(prevX, prevY, nextX, nextY);\n\n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n\n        // Increment time\n        t += 0.015;\n\n        // Update global rotation\n        globalAngle = t / maxT * p.TWO_PI;\n\n        // Update progress\n        const currentProgress = Math.min(100, Math.round(t / maxT * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n\n        // End current push transforms\n        mainCanvas.pop();\n        currentLayerCanvas.pop();\n\n        // Check if drawing is complete\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n\n          // Make sure to end all open transforms\n          try {\n            mainCanvas.pop();\n          } catch (e) {\n            // Ignore if already popped\n          }\n\n          // Safely pop any open layer transforms\n          for (let i = 0; i < layerCanvases.length; i++) {\n            try {\n              layerCanvases[i].pop();\n            } catch (e) {\n              // Ignore errors if there's no matching push\n              console.log(\"Note: Layer\", i, \"didn't need popping\");\n            }\n          }\n\n          // Generate final output with black background and all layers\n          finalOutput = generateFinalOutput();\n\n          // Notify parent that drawing is complete\n          onDrawingComplete && onDrawingComplete(finalOutput);\n        }\n      };\n\n      // Display info on the canvas\n      p.displayInfo = function () {\n        // Create a semi-transparent background for the text\n        p.fill(0, 200);\n        p.noStroke();\n        p.rect(10, 10, 380, 100, 10);\n\n        // Display NFT info\n        p.textSize(24);\n        p.fill(255);\n        p.text(`Spyro #${currentSeed}`, 20, 40);\n        p.textSize(16);\n        p.fill(palette.colors[0]);\n        p.text(`ðŸŒŸ ${shapeType} Â· ${rarityText}`, 20, 70);\n        p.fill(palette.colors[1]);\n        p.text(`ðŸŽ¨ Palette: ${palette.name} Â· ${palette.rarity}`, 20, 95);\n      };\n\n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n\n      // Change to a specific seed\n      p.setSeed = newSeed => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n\n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spiro-canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: canvasRef,\n      className: \"canvas-wrapper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 907,\n      columnNumber: 7\n    }, this), isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 910,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"progress-text\",\n        children: [progress, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 911,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 909,\n      columnNumber: 9\n    }, this), !isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-complete\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Drawing complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 916,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 915,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 906,\n    columnNumber: 5\n  }, this);\n};\n_s(SpiroCanvas, \"vG581M3D6HIZspCQRmOO1WkIWxY=\");\n_c = SpiroCanvas;\nexport default SpiroCanvas;\nvar _c;\n$RefreshReg$(_c, \"SpiroCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","p5","jsxDEV","_jsxDEV","SpiroCanvas","seed","setSeed","onShapeChange","onPaletteChange","onDrawingComplete","_s","canvasRef","p5Instance","isDrawing","setIsDrawing","progress","setProgress","sketch","p","palettes","name","colors","rarity","shapeRarity","mainCanvas","layerCanvases","finalOutput","shapeType","params","palette","currentColor","t","maxT","prevX","prevY","globalAngle","currentColorIndex","rarityText","currentSeed","Math","floor","random","totalLayers","currentLayer","layerCompletionPoints","findGCD","a","b","round","findLCM","calculatePatternBoundaries","maxX","maxY","step","x","y","baseX","R","r","cos","d","baseY","sin","secondX","modSize","modFreq","modPhase","secondY","epi1X","R1","r1","d1","epi1Y","epi2X","R2","r2","speedRatio","d2","epi2Y","sizeRatio","roseRadius1","amplitude1","k1","rose1X","rose1Y","roseRadius2","amplitude2","k2","phase","rose2X","frequency","rose2Y","dx","exp","dampingX","dy","dampingY","amplitudeX1","frequencyX1","phaseX1","amplitudeX2","frequencyX2","phaseX2","amplitudeY1","frequencyY1","phaseY1","amplitudeY2","frequencyY2","phaseY2","baseAmplitude","i","components","length","comp","angle","radius","amplitude","type","innerRadius","offset","max","abs","getScaleFactor","maxExtent","maxAllowedExtent","generateFinalOutput","backgroundCanvas","createGraphics","background","transparentSpiro","clear","image","selectShapeType","shapeRoll","shapeIndex","int","TWO_PI","gcd","gcd1","cycles1","gcd2","cycles2","lcm","dampingFactor","min","numComponents","frequencies","scaleFactor","typeRoll","primes","push","totalCycles","resetSketch","layerCanvas","randomSeed","paletteRoll","strokeWeight","noFill","console","log","isLooping","loop","setup","canvas","createCanvas","style","frameRate","strokeJoin","ROUND","strokeCap","draw","frameCount","displayInfo","translate","width","height","fullRotationAngle","rotate","currentLayerCanvas","stroke","line","stepsPerFrame","nextX","nextY","currentProgress","pop","noLoop","e","fill","noStroke","rect","textSize","text","generateNewSeed","newSeed","current","remove","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\n\nconst SpiroCanvas = ({ \n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = (p) => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [\n        {name: \"Neon Mirage\", colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"], rarity: \"Common\"},\n        {name: \"Digital Dream\", colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"], rarity: \"Uncommon\"},\n        {name: \"Crystal Sunset\", colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"], rarity: \"Rare\"},\n        {name: \"Cyber Haze\", colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"], rarity: \"Super Rare\"},\n        {name: \"Pastel Vapor\", colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"], rarity: \"Legendary\"}\n      ];\n\n      // Shape rarity distribution - 5 premium spirograph types, ranked by real-world rarity\n      const shapeRarity = {\n        \"HyperTrochoid\": \"Common\", // 40%\n        \"DoubleEpicycloid\": \"Uncommon\", // 30% \n        \"CompoundRose\": \"Rare\", // 20%\n        \"Harmonograph\": \"Super Rare\", // 8%\n        \"MultiCycloid\": \"Legendary\" // 2%\n      };\n\n      // Multiple layer canvases\n      let mainCanvas; // Main visible canvas with black background\n      let layerCanvases = []; // Array of layer graphics for each color\n      let finalOutput; // Final combined output\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let currentColorIndex = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n      \n      // Layer tracking\n      let totalLayers = 5; // Match number of colors in palette\n      let currentLayer = 0;\n      let layerCompletionPoints = []; // Points at which to switch layers\n      \n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Helper function to find least common multiple\n      const findLCM = (a, b) => {\n        return (a * b) / findGCD(a, b);\n      };\n\n      // Calculate the maximum boundaries of the pattern to ensure it fits\n      const calculatePatternBoundaries = () => {\n        let maxX = 0;\n        let maxY = 0;\n        \n        // Sample many points to find the maximum extent\n        for (let step = 0; step < maxT; step += 0.1) {\n          let x = 0;\n          let y = 0;\n          \n          // Calculate position based on shape type\n          switch(shapeType) {\n            case \"HyperTrochoid\":\n              // Complex hypotrochoid with additional modulation\n              const baseX = (params.R - params.r) * p.cos(step) + params.d * p.cos(((params.R - params.r) / params.r) * step);\n              const baseY = (params.R - params.r) * p.sin(step) - params.d * p.sin(((params.R - params.r) / params.r) * step);\n              \n              // Add secondary motion\n              const secondX = params.modSize * p.cos(step * params.modFreq + params.modPhase);\n              const secondY = params.modSize * p.sin(step * params.modFreq + params.modPhase);\n              \n              x = baseX + secondX;\n              y = baseY + secondY;\n              break;\n            case \"DoubleEpicycloid\":\n              // Primary epicycloid\n              const epi1X = (params.R1 + params.r1) * p.cos(step) - params.d1 * p.cos(((params.R1 + params.r1) / params.r1) * step);\n              const epi1Y = (params.R1 + params.r1) * p.sin(step) - params.d1 * p.sin(((params.R1 + params.r1) / params.r1) * step);\n              \n              // Secondary epicycloid (smaller, faster)\n              const epi2X = (params.R2 + params.r2) * p.cos(step * params.speedRatio) - params.d2 * p.cos(((params.R2 + params.r2) / params.r2) * step * params.speedRatio);\n              const epi2Y = (params.R2 + params.r2) * p.sin(step * params.speedRatio) - params.d2 * p.sin(((params.R2 + params.r2) / params.r2) * step * params.speedRatio);\n              \n              // Blend the two patterns with size ratio\n              x = epi1X + epi2X * params.sizeRatio;\n              y = epi1Y + epi2Y * params.sizeRatio;\n              break;\n            case \"CompoundRose\":\n              // Primary rose curve\n              const roseRadius1 = params.amplitude1 * p.cos(params.k1 * step);\n              const rose1X = roseRadius1 * p.cos(step);\n              const rose1Y = roseRadius1 * p.sin(step);\n              \n              // Secondary rose curve\n              const roseRadius2 = params.amplitude2 * p.cos(params.k2 * step + params.phase);\n              const rose2X = roseRadius2 * p.cos(step * params.frequency);\n              const rose2Y = roseRadius2 * p.sin(step * params.frequency);\n              \n              // Combine the patterns\n              x = rose1X + rose2X;\n              y = rose1Y + rose2Y;\n              break;\n            case \"Harmonograph\":\n              // A harmonograph uses multiple damped pendulums to create the pattern\n              // 2D harmonograph with 2 pendulums (4 degrees of freedom)\n              const dx = p.exp(-params.dampingX * step);\n              const dy = p.exp(-params.dampingY * step);\n              \n              // X-direction: combination of two pendulums\n              x = params.amplitudeX1 * p.sin(step * params.frequencyX1 + params.phaseX1) * dx +\n                  params.amplitudeX2 * p.sin(step * params.frequencyX2 + params.phaseX2) * dx;\n              \n              // Y-direction: combination of two pendulums\n              y = params.amplitudeY1 * p.sin(step * params.frequencyY1 + params.phaseY1) * dy +\n                  params.amplitudeY2 * p.sin(step * params.frequencyY2 + params.phaseY2) * dy;\n              break;\n            case \"MultiCycloid\":\n              // The most complex pattern - combination of multiple cycloids\n              // Initialize coordinates\n              x = 0;\n              y = 0;\n              \n              // Add base motion\n              x += params.baseAmplitude * p.cos(step);\n              y += params.baseAmplitude * p.sin(step);\n              \n              // Add multiple cycloid components\n              for (let i = 0; i < params.components.length; i++) {\n                const comp = params.components[i];\n                \n                // Calculate contribution from this component\n                const angle = step * comp.frequency + comp.phase;\n                const radius = comp.amplitude;\n                \n                if (comp.type === \"epicycloid\") {\n                  x += radius * p.cos(angle);\n                  y += radius * p.sin(angle);\n                } else if (comp.type === \"epitrochoid\") {\n                  const innerRadius = radius * 0.6;\n                  const offset = radius * 0.4;\n                  x += (radius + innerRadius) * p.cos(angle) - offset * p.cos(((radius + innerRadius) / innerRadius) * angle);\n                  y += (radius + innerRadius) * p.sin(angle) - offset * p.sin(((radius + innerRadius) / innerRadius) * angle);\n                } else if (comp.type === \"hypotrochoid\") {\n                  const innerRadius = radius * 0.4;\n                  const offset = radius * 0.6;\n                  x += (radius - innerRadius) * p.cos(angle) + offset * p.cos(((radius - innerRadius) / innerRadius) * angle);\n                  y += (radius - innerRadius) * p.sin(angle) - offset * p.sin(((radius - innerRadius) / innerRadius) * angle);\n                }\n              }\n              break;\n          }\n          \n          // Update max boundaries\n          maxX = Math.max(maxX, Math.abs(x));\n          maxY = Math.max(maxY, Math.abs(y));\n        }\n        \n        return { maxX, maxY };\n      };\n\n      // Get the scale factor needed to fit the pattern\n      const getScaleFactor = () => {\n        const { maxX, maxY } = calculatePatternBoundaries();\n        const maxExtent = Math.max(maxX, maxY);\n        \n        // Canvas size is 600x600, center is at 300,300\n        // Leave a 50px margin on all sides\n        const maxAllowedExtent = 250; // (600/2 - 50)\n        \n        // If pattern is too big, scale it down\n        if (maxExtent > maxAllowedExtent) {\n          return maxAllowedExtent / maxExtent;\n        }\n        \n        // Otherwise, keep original scale\n        return 1.0;\n      };\n\n      // Get the final image when completed\n      const generateFinalOutput = () => {\n        // Create two separate graphics:\n        // 1. The background canvas (black)\n        let backgroundCanvas = p.createGraphics(600, 600);\n        backgroundCanvas.background(0); // BLACK BACKGROUND\n        \n        // 2. The transparent spirograph with all layers merged (but no background)\n        let transparentSpiro = p.createGraphics(600, 600);\n        transparentSpiro.clear(); // Completely transparent\n        \n        // Overlay all layers onto the transparent spirograph\n        for (let i = 0; i < layerCanvases.length; i++) {\n          transparentSpiro.image(layerCanvases[i], 0, 0);\n        }\n        \n        // Return just the transparent spirograph - the black background stays in the canvas\n        return transparentSpiro;\n      };\n      \n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        \n        if (shapeRoll < 40) {\n          shapeIndex = 0; // HyperTrochoid - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // DoubleEpicycloid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // CompoundRose - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // Harmonograph - Super Rare 8%\n        } else {\n          shapeIndex = 4; // MultiCycloid - Legendary 2%\n        }\n        \n        params = {}; // Reset params\n        \n        switch(shapeIndex) {\n          case 0: // HyperTrochoid (Complex hypotrochoid with modulation) - Common but cool\n            shapeType = \"HyperTrochoid\";\n            \n            // Base hypotrochoid parameters (carefully chosen for interesting patterns)\n            params.R = p.int(p.random(100, 180)); // Fixed circle radius\n            params.r = p.int(p.random(30, 70)); // Moving circle radius\n            \n            // Make sure R and r produce complex patterns\n            if (params.R % params.r === 0 || params.r % params.R === 0) {\n              params.r = p.int(p.random(41, 67)); // Prime-number-ish range\n            }\n            \n            // Pen offset (controls loop size)\n            params.d = p.int(p.random(30, 90));\n            \n            // Modulation parameters (for the secondary motion)\n            params.modSize = p.random(15, 30); // Size of the modulation\n            params.modFreq = p.random(3, 7); // Frequency of modulation\n            params.modPhase = p.random(0, p.TWO_PI); // Phase offset\n            \n            // Calculate how many cycles needed to complete the pattern\n            const gcd = findGCD(params.R, params.r);\n            maxT = p.TWO_PI * (params.r / gcd) * 1.5; // Extra cycles for the modulation\n            break;\n            \n          case 1: // DoubleEpicycloid (Two epicycloids combined) - Uncommon\n            shapeType = \"DoubleEpicycloid\";\n            \n            // Primary epicycloid\n            params.R1 = p.int(p.random(70, 120)); // Primary fixed circle\n            params.r1 = p.int(p.random(20, 50)); // Primary moving circle\n            params.d1 = p.int(p.random(30, 70)); // Primary pen distance\n            \n            // Secondary epicycloid (smaller, faster)\n            params.R2 = p.int(p.random(30, 60)); // Secondary fixed circle\n            params.r2 = p.int(p.random(10, 30)); // Secondary moving circle\n            params.d2 = p.int(p.random(15, 40)); // Secondary pen distance\n            \n            // Relationship between the two patterns\n            params.speedRatio = p.random(1.5, 3.5); // How much faster the second one moves\n            params.sizeRatio = p.random(0.3, 0.6); // How big the second one is compared to first\n            \n            // Calculate cycle length based on both patterns\n            const gcd1 = findGCD(params.R1, params.r1);\n            const cycles1 = params.r1 / gcd1;\n            \n            const gcd2 = findGCD(params.R2, params.r2);\n            const cycles2 = params.r2 / gcd2 * params.speedRatio;\n            \n            const lcm = findLCM(cycles1, cycles2);\n            maxT = p.TWO_PI * lcm;\n            break;\n            \n          case 2: // CompoundRose (Two rose curves overlaid) - Rare\n            shapeType = \"CompoundRose\";\n            \n            // Primary rose parameters\n            params.k1 = p.random(3, 9) / p.random(1, 5); // Ratio determines petals\n            params.amplitude1 = p.random(120, 180); // Size of primary rose\n            \n            // Secondary rose parameters\n            params.k2 = p.random(2, 7) / p.random(1, 4); // Different ratio for overlay\n            params.amplitude2 = p.random(50, 100); // Size of secondary rose\n            params.phase = p.random(0, p.TWO_PI); // Phase offset between patterns\n            params.frequency = p.random(0.5, 2.5); // Frequency multiplier for second pattern\n            \n            // Make sure we get interesting ratios\n            if (Math.abs(params.k1 - params.k2) < 0.3) {\n              params.k2 += 0.5; // Ensure different petal counts\n            }\n            \n            // Calculate cycle time based on the two patterns\n            maxT = p.TWO_PI * 4; // Multiple rotations to complete pattern\n            break;\n            \n          case 3: // Harmonograph (Damped pendulum system) - Super Rare\n            shapeType = \"Harmonograph\";\n            \n            // X-direction pendulums\n            params.amplitudeX1 = p.random(100, 200);\n            params.frequencyX1 = p.random(1, 5);\n            params.phaseX1 = p.random(0, p.TWO_PI);\n            \n            params.amplitudeX2 = p.random(50, 150);\n            params.frequencyX2 = p.random(1, 5);\n            params.phaseX2 = p.random(0, p.TWO_PI);\n            \n            // Y-direction pendulums\n            params.amplitudeY1 = p.random(100, 200);\n            params.frequencyY1 = p.random(1, 5);\n            params.phaseY1 = p.random(0, p.TWO_PI);\n            \n            params.amplitudeY2 = p.random(50, 150);\n            params.frequencyY2 = p.random(1, 5);\n            params.phaseY2 = p.random(0, p.TWO_PI);\n            \n            // Damping factors (how quickly oscillations die down)\n            params.dampingX = p.random(0.005, 0.02);\n            params.dampingY = p.random(0.005, 0.02);\n            \n            // Ensure we get interesting frequency ratios\n            // Check if frequencies are too close to each other\n            if (Math.abs(params.frequencyX1 - params.frequencyX2) < 0.3) {\n              params.frequencyX2 += 0.5;\n            }\n            if (Math.abs(params.frequencyY1 - params.frequencyY2) < 0.3) {\n              params.frequencyY2 += 0.5;\n            }\n            \n            // Calculate time needed for drawing\n            // For harmonographs, we draw until oscillations dampen significantly\n            const dampingFactor = Math.min(params.dampingX, params.dampingY);\n            maxT = 5 / dampingFactor; // Draw until amplitude is about 1% of original\n            break;\n            \n          case 4: // MultiCycloid (Multiple combined cycloids) - Legendary\n            shapeType = \"MultiCycloid\";\n            \n            // Base parameters\n            params.baseAmplitude = p.random(80, 150); // Size of the base circle\n            \n            // Number of components to combine\n            const numComponents = p.int(p.random(4, 7));\n            \n            // Component array\n            params.components = [];\n            \n            // Track frequency values to ensure proper LCM calculation\n            const frequencies = [];\n            \n            // Generate parameters for each component\n            for (let i = 0; i < numComponents; i++) {\n              // Each component is progressively smaller\n              const scaleFactor = 1 - (i * 0.1);\n              \n              // Determine component type\n              const typeRoll = p.random(3);\n              let type;\n              if (typeRoll < 1) type = \"epicycloid\";\n              else if (typeRoll < 2) type = \"epitrochoid\";\n              else type = \"hypotrochoid\";\n              \n              // Prime-number-inspired frequencies for complex patterns\n              const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23];\n              const frequency = primes[p.int(p.random(primes.length))];\n              frequencies.push(frequency);\n              \n              // Create component\n              params.components.push({\n                type: type,\n                amplitude: p.random(20, 60) * scaleFactor,\n                frequency: frequency / 10, // Scale down for smoother motion\n                phase: p.random(0, p.TWO_PI)\n              });\n            }\n            \n            // Calculate total cycles based on all components\n            let totalCycles = frequencies[0];\n            for (let i = 1; i < frequencies.length; i++) {\n              totalCycles = findLCM(totalCycles, frequencies[i]);\n            }\n            \n            maxT = p.TWO_PI * (totalCycles / 10) * 1.5; // Account for frequency scaling\n            break;\n        }\n        \n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 4);\n        \n        // Set up layer transitions - divide maxT into segments for each layer\n        layerCompletionPoints = [];\n        for (let i = 1; i < totalLayers; i++) {\n          layerCompletionPoints.push((i / totalLayers) * maxT);\n        }\n        layerCompletionPoints.push(maxT); // Final completion point\n        \n        rarityText = shapeRarity[shapeType];\n        \n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: { ...params }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        // Clear all canvases\n        p.background(0);\n        mainCanvas.background(0);\n        \n        // Reset layer canvases\n        layerCanvases = [];\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background for each layer\n          layerCanvases.push(layerCanvas);\n        }\n        \n        p.randomSeed(currentSeed);\n        \n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        \n        totalLayers = palette.colors.length; // Match layers to palette colors\n        \n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n        \n        // Reset drawing variables\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        currentColorIndex = 0;\n        currentLayer = 0;\n        \n        // Pick a shape type\n        selectShapeType();\n        \n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        \n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n        \n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        \n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function() {\n        // Create main canvas with black background\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        canvas.style('background-color', 'black'); // Ensure canvas always shows black\n        \n        // Initialize main drawing canvas with black background\n        mainCanvas = p.createGraphics(600, 600);\n        mainCanvas.background(0);\n        \n        // Initialize layer canvases - one for each color\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background\n          layerCanvases.push(layerCanvas);\n        }\n        \n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n        \n        // Apply same settings to all layer canvases\n        for (let canvas of layerCanvases) {\n          canvas.strokeJoin(p.ROUND);\n          canvas.strokeCap(p.ROUND);\n        }\n        \n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n        \n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function() {\n        // Clear main canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n        \n        // Display in-progress work\n        p.image(mainCanvas, 0, 0);\n        \n        // Display info\n        p.displayInfo();\n        \n        // Get the appropriate scale factor to fit pattern in canvas\n        const scaleFactor = getScaleFactor();\n        \n        // Draw on the main canvas\n        mainCanvas.push();\n        mainCanvas.translate(mainCanvas.width / 2, mainCanvas.height / 2);\n        \n        // Add rotation that completes during drawing\n        let fullRotationAngle = (t / maxT) * p.TWO_PI * 0.1; // Small rotation for subtle effect\n        mainCanvas.rotate(fullRotationAngle);\n        \n        // Current layer canvas (for separate color layers)\n        let currentLayerCanvas = layerCanvases[currentLayer];\n        currentLayerCanvas.push();\n        currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n        currentLayerCanvas.rotate(fullRotationAngle);\n        \n        // Set color for current layer\n        currentColor = palette.colors[currentLayer];\n        mainCanvas.stroke(currentColor);\n        currentLayerCanvas.stroke(currentColor);\n        mainCanvas.strokeWeight(1);\n        currentLayerCanvas.strokeWeight(1);\n\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch(shapeType) {\n          case \"HyperTrochoid\":\n            // Complex hypotrochoid with additional modulation\n            const baseX = (params.R - params.r) * p.cos(t) + params.d * p.cos(((params.R - params.r) / params.r) * t);\n            const baseY = (params.R - params.r) * p.sin(t) - params.d * p.sin(((params.R - params.r) / params.r) * t);\n            \n            // Add secondary motion\n            const secondX = params.modSize * p.cos(t * params.modFreq + params.modPhase);\n            const secondY = params.modSize * p.sin(t * params.modFreq + params.modPhase);\n            \n            x = baseX + secondX;\n            y = baseY + secondY;\n            break;\n          case \"DoubleEpicycloid\":\n            // Primary epicycloid\n            const epi1X = (params.R1 + params.r1) * p.cos(t) - params.d1 * p.cos(((params.R1 + params.r1) / params.r1) * t);\n            const epi1Y = (params.R1 + params.r1) * p.sin(t) - params.d1 * p.sin(((params.R1 + params.r1) / params.r1) * t);\n            \n            // Secondary epicycloid (smaller, faster)\n            const epi2X = (params.R2 + params.r2) * p.cos(t * params.speedRatio) - params.d2 * p.cos(((params.R2 + params.r2) / params.r2) * t * params.speedRatio);\n            const epi2Y = (params.R2 + params.r2) * p.sin(t * params.speedRatio) - params.d2 * p.sin(((params.R2 + params.r2) / params.r2) * t * params.speedRatio);\n            \n            // Blend the two patterns with size ratio\n            x = epi1X + epi2X * params.sizeRatio;\n            y = epi1Y + epi2Y * params.sizeRatio;\n            break;\n          case \"CompoundRose\":\n            // Primary rose curve\n            const roseRadius1 = params.amplitude1 * p.cos(params.k1 * t);\n            const rose1X = roseRadius1 * p.cos(t);\n            const rose1Y = roseRadius1 * p.sin(t);\n            \n            // Secondary rose curve\n            const roseRadius2 = params.amplitude2 * p.cos(params.k2 * t + params.phase);\n            const rose2X = roseRadius2 * p.cos(t * params.frequency);\n            const rose2Y = roseRadius2 * p.sin(t * params.frequency);\n            \n            // Combine the patterns\n            x = rose1X + rose2X;\n            y = rose1Y + rose2Y;\n            break;\n          case \"Harmonograph\":\n            // A harmonograph uses multiple damped pendulums to create the pattern\n            // 2D harmonograph with 2 pendulums (4 degrees of freedom)\n            const dx = p.exp(-params.dampingX * t);\n            const dy = p.exp(-params.dampingY * t);\n            \n            // X-direction: combination of two pendulums\n            x = params.amplitudeX1 * p.sin(t * params.frequencyX1 + params.phaseX1) * dx +\n                params.amplitudeX2 * p.sin(t * params.frequencyX2 + params.phaseX2) * dx;\n            \n            // Y-direction: combination of two pendulums\n            y = params.amplitudeY1 * p.sin(t * params.frequencyY1 + params.phaseY1) * dy +\n                params.amplitudeY2 * p.sin(t * params.frequencyY2 + params.phaseY2) * dy;\n            break;\n          case \"MultiCycloid\":\n            // The most complex pattern - combination of multiple cycloids\n            // Initialize coordinates\n            x = 0;\n            y = 0;\n            \n            // Add base motion\n            x += params.baseAmplitude * p.cos(t);\n            y += params.baseAmplitude * p.sin(t);\n            \n            // Add multiple cycloid components\n            for (let i = 0; i < params.components.length; i++) {\n              const comp = params.components[i];\n              \n              // Calculate contribution from this component\n              const angle = t * comp.frequency + comp.phase;\n              const radius = comp.amplitude;\n              \n              if (comp.type === \"epicycloid\") {\n                x += radius * p.cos(angle);\n                y += radius * p.sin(angle);\n              } else if (comp.type === \"epitrochoid\") {\n                const innerRadius = radius * 0.6;\n                const offset = radius * 0.4;\n                x += (radius + innerRadius) * p.cos(angle) - offset * p.cos(((radius + innerRadius) / innerRadius) * angle);\n                y += (radius + innerRadius) * p.sin(angle) - offset * p.sin(((radius + innerRadius) / innerRadius) * angle);\n              } else if (comp.type === \"hypotrochoid\") {\n                const innerRadius = radius * 0.4;\n                const offset = radius * 0.6;\n                x += (radius - innerRadius) * p.cos(angle) + offset * p.cos(((radius - innerRadius) / innerRadius) * angle);\n                y += (radius - innerRadius) * p.sin(angle) - offset * p.sin(((radius - innerRadius) / innerRadius) * angle);\n              }\n            }\n            break;\n        }\n\n        // Apply dynamic scaling to ensure pattern fits\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment on both canvases\n        if (prevX !== null) {\n          mainCanvas.line(prevX, prevY, x, y);\n          currentLayerCanvas.line(prevX, prevY, x, y);\n        }\n        \n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n          \n          // Check if we've reached a layer transition point\n          if (currentLayer < layerCompletionPoints.length-1 && t >= layerCompletionPoints[currentLayer]) {\n            // Time to move to next layer\n            currentLayer++;\n            // Make sure we don't go beyond the array bounds\n            if (currentLayer < layerCanvases.length) {\n              currentLayerCanvas = layerCanvases[currentLayer];\n              currentLayerCanvas.push();\n              currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n              // Apply rotation to the new layer\n              let fullRotationAngle = (t / maxT) * p.TWO_PI * 0.1;\n              currentLayerCanvas.rotate(fullRotationAngle);\n              currentColor = palette.colors[Math.min(currentLayer, palette.colors.length - 1)];\n              mainCanvas.stroke(currentColor);\n              currentLayerCanvas.stroke(currentColor);\n            }\n          }\n          \n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n          \n          // Re-calculate based on shape type with updated t\n          switch(shapeType) {\n            case \"HyperTrochoid\":\n              // Complex hypotrochoid with additional modulation\n              const baseX = (params.R - params.r) * p.cos(t) + params.d * p.cos(((params.R - params.r) / params.r) * t);\n              const baseY = (params.R - params.r) * p.sin(t) - params.d * p.sin(((params.R - params.r) / params.r) * t);\n              \n              // Add secondary motion\n              const secondX = params.modSize * p.cos(t * params.modFreq + params.modPhase);\n              const secondY = params.modSize * p.sin(t * params.modFreq + params.modPhase);\n              \n              nextX = baseX + secondX;\n              nextY = baseY + secondY;\n              break;\n            case \"DoubleEpicycloid\":\n              // Primary epicycloid\n              const epi1X = (params.R1 + params.r1) * p.cos(t) - params.d1 * p.cos(((params.R1 + params.r1) / params.r1) * t);\n              const epi1Y = (params.R1 + params.r1) * p.sin(t) - params.d1 * p.sin(((params.R1 + params.r1) / params.r1) * t);\n              \n              // Secondary epicycloid (smaller, faster)\n              const epi2X = (params.R2 + params.r2) * p.cos(t * params.speedRatio) - params.d2 * p.cos(((params.R2 + params.r2) / params.r2) * t * params.speedRatio);\n              const epi2Y = (params.R2 + params.r2) * p.sin(t * params.speedRatio) - params.d2 * p.sin(((params.R2 + params.r2) / params.r2) * t * params.speedRatio);\n              \n              // Blend the two patterns with size ratio\n              nextX = epi1X + epi2X * params.sizeRatio;\n              nextY = epi1Y + epi2Y * params.sizeRatio;\n              break;\n            case \"CompoundRose\":\n              // Primary rose curve\n              const roseRadius1 = params.amplitude1 * p.cos(params.k1 * t);\n              const rose1X = roseRadius1 * p.cos(t);\n              const rose1Y = roseRadius1 * p.sin(t);\n              \n              // Secondary rose curve\n              const roseRadius2 = params.amplitude2 * p.cos(params.k2 * t + params.phase);\n              const rose2X = roseRadius2 * p.cos(t * params.frequency);\n              const rose2Y = roseRadius2 * p.sin(t * params.frequency);\n              \n              // Combine the patterns\n              nextX = rose1X + rose2X;\n              nextY = rose1Y + rose2Y;\n              break;\n            case \"Harmonograph\":\n              // A harmonograph uses multiple damped pendulums to create the pattern\n              // 2D harmonograph with 2 pendulums (4 degrees of freedom)\n              const dx = p.exp(-params.dampingX * t);\n              const dy = p.exp(-params.dampingY * t);\n              \n              // X-direction: combination of two pendulums\n              nextX = params.amplitudeX1 * p.sin(t * params.frequencyX1 + params.phaseX1) * dx +\n                      params.amplitudeX2 * p.sin(t * params.frequencyX2 + params.phaseX2) * dx;\n              \n              // Y-direction: combination of two pendulums\n              nextY = params.amplitudeY1 * p.sin(t * params.frequencyY1 + params.phaseY1) * dy +\n                      params.amplitudeY2 * p.sin(t * params.frequencyY2 + params.phaseY2) * dy;\n              break;\n            case \"MultiCycloid\":\n              // The most complex pattern - combination of multiple cycloids\n              // Initialize coordinates\n              nextX = 0;\n              nextY = 0;\n              \n              // Add base motion\n              nextX += params.baseAmplitude * p.cos(t);\n              nextY += params.baseAmplitude * p.sin(t);\n              \n              // Add multiple cycloid components\n              for (let i = 0; i < params.components.length; i++) {\n                const comp = params.components[i];\n                \n                // Calculate contribution from this component\n                const angle = t * comp.frequency + comp.phase;\n                const radius = comp.amplitude;\n                \n                if (comp.type === \"epicycloid\") {\n                  nextX += radius * p.cos(angle);\n                  nextY += radius * p.sin(angle);\n                } else if (comp.type === \"epitrochoid\") {\n                  const innerRadius = radius * 0.6;\n                  const offset = radius * 0.4;\n                  nextX += (radius + innerRadius) * p.cos(angle) - offset * p.cos(((radius + innerRadius) / innerRadius) * angle);\n                  nextY += (radius + innerRadius) * p.sin(angle) - offset * p.sin(((radius + innerRadius) / innerRadius) * angle);\n                } else if (comp.type === \"hypotrochoid\") {\n                  const innerRadius = radius * 0.4;\n                  const offset = radius * 0.6;\n                  nextX += (radius - innerRadius) * p.cos(angle) + offset * p.cos(((radius - innerRadius) / innerRadius) * angle);\n                  nextY += (radius - innerRadius) * p.sin(angle) - offset * p.sin(((radius - innerRadius) / innerRadius) * angle);\n                }\n              }\n              break;\n          }\n          \n          // Apply dynamic scaling to ensure pattern fits\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n          \n          // Draw the line on both canvases\n          mainCanvas.line(prevX, prevY, nextX, nextY);\n          currentLayerCanvas.line(prevX, prevY, nextX, nextY);\n          \n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n        \n        // Increment time\n        t += 0.015;\n        \n        // Update global rotation\n        globalAngle = (t / maxT) * p.TWO_PI;\n        \n        // Update progress\n        const currentProgress = Math.min(100, Math.round((t / maxT) * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n        \n        // End current push transforms\n        mainCanvas.pop();\n        currentLayerCanvas.pop();\n\n        // Check if drawing is complete\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n          \n          // Make sure to end all open transforms\n          try {\n            mainCanvas.pop();\n          } catch(e) {\n            // Ignore if already popped\n          }\n          \n          // Safely pop any open layer transforms\n          for (let i = 0; i < layerCanvases.length; i++) {\n            try {\n              layerCanvases[i].pop();\n            } catch (e) {\n              // Ignore errors if there's no matching push\n              console.log(\"Note: Layer\", i, \"didn't need popping\");\n            }\n          }\n          \n          // Generate final output with black background and all layers\n          finalOutput = generateFinalOutput();\n          \n          // Notify parent that drawing is complete\n          onDrawingComplete && onDrawingComplete(finalOutput);\n        }\n      };\n      \n      // Display info on the canvas\n      p.displayInfo = function() {\n        // Create a semi-transparent background for the text\n        p.fill(0, 200);\n        p.noStroke();\n        p.rect(10, 10, 380, 100, 10);\n        \n        // Display NFT info\n        p.textSize(24);\n        p.fill(255);\n        p.text(`Spyro #${currentSeed}`, 20, 40);\n        \n        p.textSize(16);\n        p.fill(palette.colors[0]);\n        p.text(`ðŸŒŸ ${shapeType} Â· ${rarityText}`, 20, 70);\n        \n        p.fill(palette.colors[1]);\n        p.text(`ðŸŽ¨ Palette: ${palette.name} Â· ${palette.rarity}`, 20, 95);\n      };\n      \n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n      \n      // Change to a specific seed\n      p.setSeed = (newSeed) => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n    \n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return (\n    <div className=\"spiro-canvas-container\">\n      <div ref={canvasRef} className=\"canvas-wrapper\"></div>\n      {isDrawing && (\n        <div className=\"progress-bar-container\">\n          <div className=\"progress-bar\" style={{ width: `${progress}%` }}></div>\n          <span className=\"progress-text\">{progress}%</span>\n        </div>\n      )}\n      {!isDrawing && (\n        <div className=\"canvas-complete\">\n          <span>Drawing complete!</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpiroCanvas;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,EAAE,MAAM,IAAI;AACnB,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,WAAW,GAAGA,CAAC;EACnBC,IAAI;EACJC,OAAO;EACPC,aAAa;EACbC,eAAe;EACfC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,SAAS,GAAGb,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMc,UAAU,GAAGd,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;;EAE3C;EACAD,SAAS,CAAC,MAAM;IACd;IACA,MAAMkB,MAAM,GAAIC,CAAC,IAAK;MACpB;MACA,MAAMC,QAAQ,GAAG,CACf;QAACC,IAAI,EAAE,aAAa;QAAEC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QAAEC,MAAM,EAAE;MAAQ,CAAC,EACxG;QAACF,IAAI,EAAE,eAAe;QAAEC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QAAEC,MAAM,EAAE;MAAU,CAAC,EAC5G;QAACF,IAAI,EAAE,gBAAgB;QAAEC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QAAEC,MAAM,EAAE;MAAM,CAAC,EACzG;QAACF,IAAI,EAAE,YAAY;QAAEC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QAAEC,MAAM,EAAE;MAAY,CAAC,EAC3G;QAACF,IAAI,EAAE,cAAc;QAAEC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QAAEC,MAAM,EAAE;MAAW,CAAC,CAC7G;;MAED;MACA,MAAMC,WAAW,GAAG;QAClB,eAAe,EAAE,QAAQ;QAAE;QAC3B,kBAAkB,EAAE,UAAU;QAAE;QAChC,cAAc,EAAE,MAAM;QAAE;QACxB,cAAc,EAAE,YAAY;QAAE;QAC9B,cAAc,EAAE,WAAW,CAAC;MAC9B,CAAC;;MAED;MACA,IAAIC,UAAU,CAAC,CAAC;MAChB,IAAIC,aAAa,GAAG,EAAE,CAAC,CAAC;MACxB,IAAIC,WAAW,CAAC,CAAC;;MAEjB;MACA,IAAIC,SAAS,GAAG,EAAE;MAClB,IAAIC,MAAM,GAAG,CAAC,CAAC;MACf,IAAIC,OAAO;MACX,IAAIC,YAAY;MAChB,IAAIC,CAAC,GAAG,CAAC;MACT,IAAIC,IAAI;MACR,IAAIC,KAAK,GAAG,IAAI;MAChB,IAAIC,KAAK,GAAG,IAAI;MAChB,IAAIC,WAAW,GAAG,CAAC;MACnB,IAAIC,iBAAiB,GAAG,CAAC;MACzB,IAAIC,UAAU,GAAG,EAAE;MACnB,IAAIC,WAAW,GAAGjC,IAAI,IAAIkC,IAAI,CAACC,KAAK,CAACtB,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;;MAExD;MACA,IAAIC,WAAW,GAAG,CAAC,CAAC,CAAC;MACrB,IAAIC,YAAY,GAAG,CAAC;MACpB,IAAIC,qBAAqB,GAAG,EAAE,CAAC,CAAC;;MAEhC;MACA,MAAMC,OAAO,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;QACxBD,CAAC,GAAGP,IAAI,CAACS,KAAK,CAACF,CAAC,CAAC;QACjBC,CAAC,GAAGR,IAAI,CAACS,KAAK,CAACD,CAAC,CAAC;QACjB,OAAOA,CAAC,KAAK,CAAC,GAAGD,CAAC,GAAGD,OAAO,CAACE,CAAC,EAAED,CAAC,GAAGC,CAAC,CAAC;MACxC,CAAC;;MAED;MACA,MAAME,OAAO,GAAGA,CAACH,CAAC,EAAEC,CAAC,KAAK;QACxB,OAAQD,CAAC,GAAGC,CAAC,GAAIF,OAAO,CAACC,CAAC,EAAEC,CAAC,CAAC;MAChC,CAAC;;MAED;MACA,MAAMG,0BAA0B,GAAGA,CAAA,KAAM;QACvC,IAAIC,IAAI,GAAG,CAAC;QACZ,IAAIC,IAAI,GAAG,CAAC;;QAEZ;QACA,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGrB,IAAI,EAAEqB,IAAI,IAAI,GAAG,EAAE;UAC3C,IAAIC,CAAC,GAAG,CAAC;UACT,IAAIC,CAAC,GAAG,CAAC;;UAET;UACA,QAAO5B,SAAS;YACd,KAAK,eAAe;cAClB;cACA,MAAM6B,KAAK,GAAG,CAAC5B,MAAM,CAAC6B,CAAC,GAAG7B,MAAM,CAAC8B,CAAC,IAAIxC,CAAC,CAACyC,GAAG,CAACN,IAAI,CAAC,GAAGzB,MAAM,CAACgC,CAAC,GAAG1C,CAAC,CAACyC,GAAG,CAAE,CAAC/B,MAAM,CAAC6B,CAAC,GAAG7B,MAAM,CAAC8B,CAAC,IAAI9B,MAAM,CAAC8B,CAAC,GAAIL,IAAI,CAAC;cAC/G,MAAMQ,KAAK,GAAG,CAACjC,MAAM,CAAC6B,CAAC,GAAG7B,MAAM,CAAC8B,CAAC,IAAIxC,CAAC,CAAC4C,GAAG,CAACT,IAAI,CAAC,GAAGzB,MAAM,CAACgC,CAAC,GAAG1C,CAAC,CAAC4C,GAAG,CAAE,CAAClC,MAAM,CAAC6B,CAAC,GAAG7B,MAAM,CAAC8B,CAAC,IAAI9B,MAAM,CAAC8B,CAAC,GAAIL,IAAI,CAAC;;cAE/G;cACA,MAAMU,OAAO,GAAGnC,MAAM,CAACoC,OAAO,GAAG9C,CAAC,CAACyC,GAAG,CAACN,IAAI,GAAGzB,MAAM,CAACqC,OAAO,GAAGrC,MAAM,CAACsC,QAAQ,CAAC;cAC/E,MAAMC,OAAO,GAAGvC,MAAM,CAACoC,OAAO,GAAG9C,CAAC,CAAC4C,GAAG,CAACT,IAAI,GAAGzB,MAAM,CAACqC,OAAO,GAAGrC,MAAM,CAACsC,QAAQ,CAAC;cAE/EZ,CAAC,GAAGE,KAAK,GAAGO,OAAO;cACnBR,CAAC,GAAGM,KAAK,GAAGM,OAAO;cACnB;YACF,KAAK,kBAAkB;cACrB;cACA,MAAMC,KAAK,GAAG,CAACxC,MAAM,CAACyC,EAAE,GAAGzC,MAAM,CAAC0C,EAAE,IAAIpD,CAAC,CAACyC,GAAG,CAACN,IAAI,CAAC,GAAGzB,MAAM,CAAC2C,EAAE,GAAGrD,CAAC,CAACyC,GAAG,CAAE,CAAC/B,MAAM,CAACyC,EAAE,GAAGzC,MAAM,CAAC0C,EAAE,IAAI1C,MAAM,CAAC0C,EAAE,GAAIjB,IAAI,CAAC;cACrH,MAAMmB,KAAK,GAAG,CAAC5C,MAAM,CAACyC,EAAE,GAAGzC,MAAM,CAAC0C,EAAE,IAAIpD,CAAC,CAAC4C,GAAG,CAACT,IAAI,CAAC,GAAGzB,MAAM,CAAC2C,EAAE,GAAGrD,CAAC,CAAC4C,GAAG,CAAE,CAAClC,MAAM,CAACyC,EAAE,GAAGzC,MAAM,CAAC0C,EAAE,IAAI1C,MAAM,CAAC0C,EAAE,GAAIjB,IAAI,CAAC;;cAErH;cACA,MAAMoB,KAAK,GAAG,CAAC7C,MAAM,CAAC8C,EAAE,GAAG9C,MAAM,CAAC+C,EAAE,IAAIzD,CAAC,CAACyC,GAAG,CAACN,IAAI,GAAGzB,MAAM,CAACgD,UAAU,CAAC,GAAGhD,MAAM,CAACiD,EAAE,GAAG3D,CAAC,CAACyC,GAAG,CAAE,CAAC/B,MAAM,CAAC8C,EAAE,GAAG9C,MAAM,CAAC+C,EAAE,IAAI/C,MAAM,CAAC+C,EAAE,GAAItB,IAAI,GAAGzB,MAAM,CAACgD,UAAU,CAAC;cAC7J,MAAME,KAAK,GAAG,CAAClD,MAAM,CAAC8C,EAAE,GAAG9C,MAAM,CAAC+C,EAAE,IAAIzD,CAAC,CAAC4C,GAAG,CAACT,IAAI,GAAGzB,MAAM,CAACgD,UAAU,CAAC,GAAGhD,MAAM,CAACiD,EAAE,GAAG3D,CAAC,CAAC4C,GAAG,CAAE,CAAClC,MAAM,CAAC8C,EAAE,GAAG9C,MAAM,CAAC+C,EAAE,IAAI/C,MAAM,CAAC+C,EAAE,GAAItB,IAAI,GAAGzB,MAAM,CAACgD,UAAU,CAAC;;cAE7J;cACAtB,CAAC,GAAGc,KAAK,GAAGK,KAAK,GAAG7C,MAAM,CAACmD,SAAS;cACpCxB,CAAC,GAAGiB,KAAK,GAAGM,KAAK,GAAGlD,MAAM,CAACmD,SAAS;cACpC;YACF,KAAK,cAAc;cACjB;cACA,MAAMC,WAAW,GAAGpD,MAAM,CAACqD,UAAU,GAAG/D,CAAC,CAACyC,GAAG,CAAC/B,MAAM,CAACsD,EAAE,GAAG7B,IAAI,CAAC;cAC/D,MAAM8B,MAAM,GAAGH,WAAW,GAAG9D,CAAC,CAACyC,GAAG,CAACN,IAAI,CAAC;cACxC,MAAM+B,MAAM,GAAGJ,WAAW,GAAG9D,CAAC,CAAC4C,GAAG,CAACT,IAAI,CAAC;;cAExC;cACA,MAAMgC,WAAW,GAAGzD,MAAM,CAAC0D,UAAU,GAAGpE,CAAC,CAACyC,GAAG,CAAC/B,MAAM,CAAC2D,EAAE,GAAGlC,IAAI,GAAGzB,MAAM,CAAC4D,KAAK,CAAC;cAC9E,MAAMC,MAAM,GAAGJ,WAAW,GAAGnE,CAAC,CAACyC,GAAG,CAACN,IAAI,GAAGzB,MAAM,CAAC8D,SAAS,CAAC;cAC3D,MAAMC,MAAM,GAAGN,WAAW,GAAGnE,CAAC,CAAC4C,GAAG,CAACT,IAAI,GAAGzB,MAAM,CAAC8D,SAAS,CAAC;;cAE3D;cACApC,CAAC,GAAG6B,MAAM,GAAGM,MAAM;cACnBlC,CAAC,GAAG6B,MAAM,GAAGO,MAAM;cACnB;YACF,KAAK,cAAc;cACjB;cACA;cACA,MAAMC,EAAE,GAAG1E,CAAC,CAAC2E,GAAG,CAAC,CAACjE,MAAM,CAACkE,QAAQ,GAAGzC,IAAI,CAAC;cACzC,MAAM0C,EAAE,GAAG7E,CAAC,CAAC2E,GAAG,CAAC,CAACjE,MAAM,CAACoE,QAAQ,GAAG3C,IAAI,CAAC;;cAEzC;cACAC,CAAC,GAAG1B,MAAM,CAACqE,WAAW,GAAG/E,CAAC,CAAC4C,GAAG,CAACT,IAAI,GAAGzB,MAAM,CAACsE,WAAW,GAAGtE,MAAM,CAACuE,OAAO,CAAC,GAAGP,EAAE,GAC3EhE,MAAM,CAACwE,WAAW,GAAGlF,CAAC,CAAC4C,GAAG,CAACT,IAAI,GAAGzB,MAAM,CAACyE,WAAW,GAAGzE,MAAM,CAAC0E,OAAO,CAAC,GAAGV,EAAE;;cAE/E;cACArC,CAAC,GAAG3B,MAAM,CAAC2E,WAAW,GAAGrF,CAAC,CAAC4C,GAAG,CAACT,IAAI,GAAGzB,MAAM,CAAC4E,WAAW,GAAG5E,MAAM,CAAC6E,OAAO,CAAC,GAAGV,EAAE,GAC3EnE,MAAM,CAAC8E,WAAW,GAAGxF,CAAC,CAAC4C,GAAG,CAACT,IAAI,GAAGzB,MAAM,CAAC+E,WAAW,GAAG/E,MAAM,CAACgF,OAAO,CAAC,GAAGb,EAAE;cAC/E;YACF,KAAK,cAAc;cACjB;cACA;cACAzC,CAAC,GAAG,CAAC;cACLC,CAAC,GAAG,CAAC;;cAEL;cACAD,CAAC,IAAI1B,MAAM,CAACiF,aAAa,GAAG3F,CAAC,CAACyC,GAAG,CAACN,IAAI,CAAC;cACvCE,CAAC,IAAI3B,MAAM,CAACiF,aAAa,GAAG3F,CAAC,CAAC4C,GAAG,CAACT,IAAI,CAAC;;cAEvC;cACA,KAAK,IAAIyD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlF,MAAM,CAACmF,UAAU,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;gBACjD,MAAMG,IAAI,GAAGrF,MAAM,CAACmF,UAAU,CAACD,CAAC,CAAC;;gBAEjC;gBACA,MAAMI,KAAK,GAAG7D,IAAI,GAAG4D,IAAI,CAACvB,SAAS,GAAGuB,IAAI,CAACzB,KAAK;gBAChD,MAAM2B,MAAM,GAAGF,IAAI,CAACG,SAAS;gBAE7B,IAAIH,IAAI,CAACI,IAAI,KAAK,YAAY,EAAE;kBAC9B/D,CAAC,IAAI6D,MAAM,GAAGjG,CAAC,CAACyC,GAAG,CAACuD,KAAK,CAAC;kBAC1B3D,CAAC,IAAI4D,MAAM,GAAGjG,CAAC,CAAC4C,GAAG,CAACoD,KAAK,CAAC;gBAC5B,CAAC,MAAM,IAAID,IAAI,CAACI,IAAI,KAAK,aAAa,EAAE;kBACtC,MAAMC,WAAW,GAAGH,MAAM,GAAG,GAAG;kBAChC,MAAMI,MAAM,GAAGJ,MAAM,GAAG,GAAG;kBAC3B7D,CAAC,IAAI,CAAC6D,MAAM,GAAGG,WAAW,IAAIpG,CAAC,CAACyC,GAAG,CAACuD,KAAK,CAAC,GAAGK,MAAM,GAAGrG,CAAC,CAACyC,GAAG,CAAE,CAACwD,MAAM,GAAGG,WAAW,IAAIA,WAAW,GAAIJ,KAAK,CAAC;kBAC3G3D,CAAC,IAAI,CAAC4D,MAAM,GAAGG,WAAW,IAAIpG,CAAC,CAAC4C,GAAG,CAACoD,KAAK,CAAC,GAAGK,MAAM,GAAGrG,CAAC,CAAC4C,GAAG,CAAE,CAACqD,MAAM,GAAGG,WAAW,IAAIA,WAAW,GAAIJ,KAAK,CAAC;gBAC7G,CAAC,MAAM,IAAID,IAAI,CAACI,IAAI,KAAK,cAAc,EAAE;kBACvC,MAAMC,WAAW,GAAGH,MAAM,GAAG,GAAG;kBAChC,MAAMI,MAAM,GAAGJ,MAAM,GAAG,GAAG;kBAC3B7D,CAAC,IAAI,CAAC6D,MAAM,GAAGG,WAAW,IAAIpG,CAAC,CAACyC,GAAG,CAACuD,KAAK,CAAC,GAAGK,MAAM,GAAGrG,CAAC,CAACyC,GAAG,CAAE,CAACwD,MAAM,GAAGG,WAAW,IAAIA,WAAW,GAAIJ,KAAK,CAAC;kBAC3G3D,CAAC,IAAI,CAAC4D,MAAM,GAAGG,WAAW,IAAIpG,CAAC,CAAC4C,GAAG,CAACoD,KAAK,CAAC,GAAGK,MAAM,GAAGrG,CAAC,CAAC4C,GAAG,CAAE,CAACqD,MAAM,GAAGG,WAAW,IAAIA,WAAW,GAAIJ,KAAK,CAAC;gBAC7G;cACF;cACA;UACJ;;UAEA;UACA/D,IAAI,GAAGZ,IAAI,CAACiF,GAAG,CAACrE,IAAI,EAAEZ,IAAI,CAACkF,GAAG,CAACnE,CAAC,CAAC,CAAC;UAClCF,IAAI,GAAGb,IAAI,CAACiF,GAAG,CAACpE,IAAI,EAAEb,IAAI,CAACkF,GAAG,CAAClE,CAAC,CAAC,CAAC;QACpC;QAEA,OAAO;UAAEJ,IAAI;UAAEC;QAAK,CAAC;MACvB,CAAC;;MAED;MACA,MAAMsE,cAAc,GAAGA,CAAA,KAAM;QAC3B,MAAM;UAAEvE,IAAI;UAAEC;QAAK,CAAC,GAAGF,0BAA0B,CAAC,CAAC;QACnD,MAAMyE,SAAS,GAAGpF,IAAI,CAACiF,GAAG,CAACrE,IAAI,EAAEC,IAAI,CAAC;;QAEtC;QACA;QACA,MAAMwE,gBAAgB,GAAG,GAAG,CAAC,CAAC;;QAE9B;QACA,IAAID,SAAS,GAAGC,gBAAgB,EAAE;UAChC,OAAOA,gBAAgB,GAAGD,SAAS;QACrC;;QAEA;QACA,OAAO,GAAG;MACZ,CAAC;;MAED;MACA,MAAME,mBAAmB,GAAGA,CAAA,KAAM;QAChC;QACA;QACA,IAAIC,gBAAgB,GAAG5G,CAAC,CAAC6G,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC;QACjDD,gBAAgB,CAACE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;;QAEhC;QACA,IAAIC,gBAAgB,GAAG/G,CAAC,CAAC6G,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC;QACjDE,gBAAgB,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;QAE1B;QACA,KAAK,IAAIpB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrF,aAAa,CAACuF,MAAM,EAAEF,CAAC,EAAE,EAAE;UAC7CmB,gBAAgB,CAACE,KAAK,CAAC1G,aAAa,CAACqF,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAChD;;QAEA;QACA,OAAOmB,gBAAgB;MACzB,CAAC;;MAED;MACA,MAAMG,eAAe,GAAGA,CAAA,KAAM;QAC5B;QACA,IAAIC,SAAS,GAAGnH,CAAC,CAACuB,MAAM,CAAC,GAAG,CAAC;QAC7B,IAAI6F,UAAU;QAEd,IAAID,SAAS,GAAG,EAAE,EAAE;UAClBC,UAAU,GAAG,CAAC,CAAC,CAAC;QAClB,CAAC,MAAM,IAAID,SAAS,GAAG,EAAE,EAAE;UACzBC,UAAU,GAAG,CAAC,CAAC,CAAC;QAClB,CAAC,MAAM,IAAID,SAAS,GAAG,EAAE,EAAE;UACzBC,UAAU,GAAG,CAAC,CAAC,CAAC;QAClB,CAAC,MAAM,IAAID,SAAS,GAAG,EAAE,EAAE;UACzBC,UAAU,GAAG,CAAC,CAAC,CAAC;QAClB,CAAC,MAAM;UACLA,UAAU,GAAG,CAAC,CAAC,CAAC;QAClB;QAEA1G,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;;QAEb,QAAO0G,UAAU;UACf,KAAK,CAAC;YAAE;YACN3G,SAAS,GAAG,eAAe;;YAE3B;YACAC,MAAM,CAAC6B,CAAC,GAAGvC,CAAC,CAACqH,GAAG,CAACrH,CAAC,CAACuB,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;YACtCb,MAAM,CAAC8B,CAAC,GAAGxC,CAAC,CAACqH,GAAG,CAACrH,CAAC,CAACuB,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;;YAEpC;YACA,IAAIb,MAAM,CAAC6B,CAAC,GAAG7B,MAAM,CAAC8B,CAAC,KAAK,CAAC,IAAI9B,MAAM,CAAC8B,CAAC,GAAG9B,MAAM,CAAC6B,CAAC,KAAK,CAAC,EAAE;cAC1D7B,MAAM,CAAC8B,CAAC,GAAGxC,CAAC,CAACqH,GAAG,CAACrH,CAAC,CAACuB,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YACtC;;YAEA;YACAb,MAAM,CAACgC,CAAC,GAAG1C,CAAC,CAACqH,GAAG,CAACrH,CAAC,CAACuB,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;;YAElC;YACAb,MAAM,CAACoC,OAAO,GAAG9C,CAAC,CAACuB,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YACnCb,MAAM,CAACqC,OAAO,GAAG/C,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACjCb,MAAM,CAACsC,QAAQ,GAAGhD,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAEvB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAAC;;YAEzC;YACA,MAAMC,GAAG,GAAG5F,OAAO,CAACjB,MAAM,CAAC6B,CAAC,EAAE7B,MAAM,CAAC8B,CAAC,CAAC;YACvC1B,IAAI,GAAGd,CAAC,CAACsH,MAAM,IAAI5G,MAAM,CAAC8B,CAAC,GAAG+E,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;YAC1C;UAEF,KAAK,CAAC;YAAE;YACN9G,SAAS,GAAG,kBAAkB;;YAE9B;YACAC,MAAM,CAACyC,EAAE,GAAGnD,CAAC,CAACqH,GAAG,CAACrH,CAAC,CAACuB,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;YACtCb,MAAM,CAAC0C,EAAE,GAAGpD,CAAC,CAACqH,GAAG,CAACrH,CAAC,CAACuB,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YACrCb,MAAM,CAAC2C,EAAE,GAAGrD,CAAC,CAACqH,GAAG,CAACrH,CAAC,CAACuB,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;;YAErC;YACAb,MAAM,CAAC8C,EAAE,GAAGxD,CAAC,CAACqH,GAAG,CAACrH,CAAC,CAACuB,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YACrCb,MAAM,CAAC+C,EAAE,GAAGzD,CAAC,CAACqH,GAAG,CAACrH,CAAC,CAACuB,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YACrCb,MAAM,CAACiD,EAAE,GAAG3D,CAAC,CAACqH,GAAG,CAACrH,CAAC,CAACuB,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;;YAErC;YACAb,MAAM,CAACgD,UAAU,GAAG1D,CAAC,CAACuB,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;YACxCb,MAAM,CAACmD,SAAS,GAAG7D,CAAC,CAACuB,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;;YAEvC;YACA,MAAMiG,IAAI,GAAG7F,OAAO,CAACjB,MAAM,CAACyC,EAAE,EAAEzC,MAAM,CAAC0C,EAAE,CAAC;YAC1C,MAAMqE,OAAO,GAAG/G,MAAM,CAAC0C,EAAE,GAAGoE,IAAI;YAEhC,MAAME,IAAI,GAAG/F,OAAO,CAACjB,MAAM,CAAC8C,EAAE,EAAE9C,MAAM,CAAC+C,EAAE,CAAC;YAC1C,MAAMkE,OAAO,GAAGjH,MAAM,CAAC+C,EAAE,GAAGiE,IAAI,GAAGhH,MAAM,CAACgD,UAAU;YAEpD,MAAMkE,GAAG,GAAG7F,OAAO,CAAC0F,OAAO,EAAEE,OAAO,CAAC;YACrC7G,IAAI,GAAGd,CAAC,CAACsH,MAAM,GAAGM,GAAG;YACrB;UAEF,KAAK,CAAC;YAAE;YACNnH,SAAS,GAAG,cAAc;;YAE1B;YACAC,MAAM,CAACsD,EAAE,GAAGhE,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGvB,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7Cb,MAAM,CAACqD,UAAU,GAAG/D,CAAC,CAACuB,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;;YAExC;YACAb,MAAM,CAAC2D,EAAE,GAAGrE,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGvB,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7Cb,MAAM,CAAC0D,UAAU,GAAGpE,CAAC,CAACuB,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;YACvCb,MAAM,CAAC4D,KAAK,GAAGtE,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAEvB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAAC;YACtC5G,MAAM,CAAC8D,SAAS,GAAGxE,CAAC,CAACuB,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;;YAEvC;YACA,IAAIF,IAAI,CAACkF,GAAG,CAAC7F,MAAM,CAACsD,EAAE,GAAGtD,MAAM,CAAC2D,EAAE,CAAC,GAAG,GAAG,EAAE;cACzC3D,MAAM,CAAC2D,EAAE,IAAI,GAAG,CAAC,CAAC;YACpB;;YAEA;YACAvD,IAAI,GAAGd,CAAC,CAACsH,MAAM,GAAG,CAAC,CAAC,CAAC;YACrB;UAEF,KAAK,CAAC;YAAE;YACN7G,SAAS,GAAG,cAAc;;YAE1B;YACAC,MAAM,CAACqE,WAAW,GAAG/E,CAAC,CAACuB,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC;YACvCb,MAAM,CAACsE,WAAW,GAAGhF,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YACnCb,MAAM,CAACuE,OAAO,GAAGjF,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAEvB,CAAC,CAACsH,MAAM,CAAC;YAEtC5G,MAAM,CAACwE,WAAW,GAAGlF,CAAC,CAACuB,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC;YACtCb,MAAM,CAACyE,WAAW,GAAGnF,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YACnCb,MAAM,CAAC0E,OAAO,GAAGpF,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAEvB,CAAC,CAACsH,MAAM,CAAC;;YAEtC;YACA5G,MAAM,CAAC2E,WAAW,GAAGrF,CAAC,CAACuB,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC;YACvCb,MAAM,CAAC4E,WAAW,GAAGtF,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YACnCb,MAAM,CAAC6E,OAAO,GAAGvF,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAEvB,CAAC,CAACsH,MAAM,CAAC;YAEtC5G,MAAM,CAAC8E,WAAW,GAAGxF,CAAC,CAACuB,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC;YACtCb,MAAM,CAAC+E,WAAW,GAAGzF,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;YACnCb,MAAM,CAACgF,OAAO,GAAG1F,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAEvB,CAAC,CAACsH,MAAM,CAAC;;YAEtC;YACA5G,MAAM,CAACkE,QAAQ,GAAG5E,CAAC,CAACuB,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC;YACvCb,MAAM,CAACoE,QAAQ,GAAG9E,CAAC,CAACuB,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC;;YAEvC;YACA;YACA,IAAIF,IAAI,CAACkF,GAAG,CAAC7F,MAAM,CAACsE,WAAW,GAAGtE,MAAM,CAACyE,WAAW,CAAC,GAAG,GAAG,EAAE;cAC3DzE,MAAM,CAACyE,WAAW,IAAI,GAAG;YAC3B;YACA,IAAI9D,IAAI,CAACkF,GAAG,CAAC7F,MAAM,CAAC4E,WAAW,GAAG5E,MAAM,CAAC+E,WAAW,CAAC,GAAG,GAAG,EAAE;cAC3D/E,MAAM,CAAC+E,WAAW,IAAI,GAAG;YAC3B;;YAEA;YACA;YACA,MAAMoC,aAAa,GAAGxG,IAAI,CAACyG,GAAG,CAACpH,MAAM,CAACkE,QAAQ,EAAElE,MAAM,CAACoE,QAAQ,CAAC;YAChEhE,IAAI,GAAG,CAAC,GAAG+G,aAAa,CAAC,CAAC;YAC1B;UAEF,KAAK,CAAC;YAAE;YACNpH,SAAS,GAAG,cAAc;;YAE1B;YACAC,MAAM,CAACiF,aAAa,GAAG3F,CAAC,CAACuB,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;;YAE1C;YACA,MAAMwG,aAAa,GAAG/H,CAAC,CAACqH,GAAG,CAACrH,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;YAE3C;YACAb,MAAM,CAACmF,UAAU,GAAG,EAAE;;YAEtB;YACA,MAAMmC,WAAW,GAAG,EAAE;;YAEtB;YACA,KAAK,IAAIpC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmC,aAAa,EAAEnC,CAAC,EAAE,EAAE;cACtC;cACA,MAAMqC,WAAW,GAAG,CAAC,GAAIrC,CAAC,GAAG,GAAI;;cAEjC;cACA,MAAMsC,QAAQ,GAAGlI,CAAC,CAACuB,MAAM,CAAC,CAAC,CAAC;cAC5B,IAAI4E,IAAI;cACR,IAAI+B,QAAQ,GAAG,CAAC,EAAE/B,IAAI,GAAG,YAAY,CAAC,KACjC,IAAI+B,QAAQ,GAAG,CAAC,EAAE/B,IAAI,GAAG,aAAa,CAAC,KACvCA,IAAI,GAAG,cAAc;;cAE1B;cACA,MAAMgC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;cAC/C,MAAM3D,SAAS,GAAG2D,MAAM,CAACnI,CAAC,CAACqH,GAAG,CAACrH,CAAC,CAACuB,MAAM,CAAC4G,MAAM,CAACrC,MAAM,CAAC,CAAC,CAAC;cACxDkC,WAAW,CAACI,IAAI,CAAC5D,SAAS,CAAC;;cAE3B;cACA9D,MAAM,CAACmF,UAAU,CAACuC,IAAI,CAAC;gBACrBjC,IAAI,EAAEA,IAAI;gBACVD,SAAS,EAAElG,CAAC,CAACuB,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG0G,WAAW;gBACzCzD,SAAS,EAAEA,SAAS,GAAG,EAAE;gBAAE;gBAC3BF,KAAK,EAAEtE,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAEvB,CAAC,CAACsH,MAAM;cAC7B,CAAC,CAAC;YACJ;;YAEA;YACA,IAAIe,WAAW,GAAGL,WAAW,CAAC,CAAC,CAAC;YAChC,KAAK,IAAIpC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoC,WAAW,CAAClC,MAAM,EAAEF,CAAC,EAAE,EAAE;cAC3CyC,WAAW,GAAGtG,OAAO,CAACsG,WAAW,EAAEL,WAAW,CAACpC,CAAC,CAAC,CAAC;YACpD;YAEA9E,IAAI,GAAGd,CAAC,CAACsH,MAAM,IAAIe,WAAW,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC;YAC5C;QACJ;;QAEA;QACAvH,IAAI,GAAGd,CAAC,CAACsG,GAAG,CAACxF,IAAI,EAAEd,CAAC,CAACsH,MAAM,GAAG,CAAC,CAAC;;QAEhC;QACA5F,qBAAqB,GAAG,EAAE;QAC1B,KAAK,IAAIkE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpE,WAAW,EAAEoE,CAAC,EAAE,EAAE;UACpClE,qBAAqB,CAAC0G,IAAI,CAAExC,CAAC,GAAGpE,WAAW,GAAIV,IAAI,CAAC;QACtD;QACAY,qBAAqB,CAAC0G,IAAI,CAACtH,IAAI,CAAC,CAAC,CAAC;;QAElCK,UAAU,GAAGd,WAAW,CAACI,SAAS,CAAC;;QAEnC;QACApB,aAAa,IAAIA,aAAa,CAAC;UAC7B8G,IAAI,EAAE1F,SAAS;UACfL,MAAM,EAAEe,UAAU;UAClBT,MAAM,EAAE;YAAE,GAAGA;UAAO;QACtB,CAAC,CAAC;MACJ,CAAC;;MAED;MACA,MAAM4H,WAAW,GAAGA,CAAA,KAAM;QACxB;QACAtI,CAAC,CAAC8G,UAAU,CAAC,CAAC,CAAC;QACfxG,UAAU,CAACwG,UAAU,CAAC,CAAC,CAAC;;QAExB;QACAvG,aAAa,GAAG,EAAE;QAClB,KAAK,IAAIqF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpE,WAAW,EAAEoE,CAAC,EAAE,EAAE;UACpC,IAAI2C,WAAW,GAAGvI,CAAC,CAAC6G,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC;UAC5C0B,WAAW,CAACvB,KAAK,CAAC,CAAC,CAAC,CAAC;UACrBzG,aAAa,CAAC6H,IAAI,CAACG,WAAW,CAAC;QACjC;QAEAvI,CAAC,CAACwI,UAAU,CAACpH,WAAW,CAAC;;QAEzB;QACA,IAAIqH,WAAW,GAAGzI,CAAC,CAACuB,MAAM,CAAC,GAAG,CAAC;QAC/B,IAAIkH,WAAW,GAAG,EAAE,EAAE;UACpB9H,OAAO,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,MAAM,IAAIwI,WAAW,GAAG,EAAE,EAAE;UAC3B9H,OAAO,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,MAAM,IAAIwI,WAAW,GAAG,EAAE,EAAE;UAC3B9H,OAAO,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,MAAM,IAAIwI,WAAW,GAAG,EAAE,EAAE;UAC3B9H,OAAO,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,MAAM;UACLU,OAAO,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB;QAEAuB,WAAW,GAAGb,OAAO,CAACR,MAAM,CAAC2F,MAAM,CAAC,CAAC;;QAErC9F,CAAC,CAAC0I,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QACnB1I,CAAC,CAAC2I,MAAM,CAAC,CAAC;;QAEV;QACA9H,CAAC,GAAG,CAAC;QACLE,KAAK,GAAG,IAAI;QACZC,KAAK,GAAG,IAAI;QACZC,WAAW,GAAG,CAAC;QACfC,iBAAiB,GAAG,CAAC;QACrBO,YAAY,GAAG,CAAC;;QAEhB;QACAyF,eAAe,CAAC,CAAC;;QAEjB;QACA5H,eAAe,IAAIA,eAAe,CAAC;UACjCY,IAAI,EAAES,OAAO,CAACT,IAAI;UAClBE,MAAM,EAAEO,OAAO,CAACP,MAAM;UACtBD,MAAM,EAAE,CAAC,GAAGQ,OAAO,CAACR,MAAM;QAC5B,CAAC,CAAC;QAEFyI,OAAO,CAACC,GAAG,CAAC,eAAezH,WAAW,MAAMX,SAAS,KAAKU,UAAU,GAAG,CAAC;QACxEyH,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEnI,MAAM,CAAC;QAC9BkI,OAAO,CAACC,GAAG,CAAC,UAAU,EAAElI,OAAO,CAACT,IAAI,CAAC;;QAErC;QACA,IAAI,CAACF,CAAC,CAAC8I,SAAS,CAAC,CAAC,EAAE;UAClB9I,CAAC,CAAC+I,IAAI,CAAC,CAAC;QACV;QAEAnJ,YAAY,CAAC,IAAI,CAAC;QAClBE,WAAW,CAAC,CAAC,CAAC;MAChB,CAAC;;MAED;MACAE,CAAC,CAACgJ,KAAK,GAAG,YAAW;QACnB;QACA,MAAMC,MAAM,GAAGjJ,CAAC,CAACkJ,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC;QACvCD,MAAM,CAACE,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC;QAChCF,MAAM,CAACE,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC;QAChCF,MAAM,CAACE,KAAK,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC,CAAC;;QAE3C;QACA7I,UAAU,GAAGN,CAAC,CAAC6G,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC;QACvCvG,UAAU,CAACwG,UAAU,CAAC,CAAC,CAAC;;QAExB;QACA,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpE,WAAW,EAAEoE,CAAC,EAAE,EAAE;UACpC,IAAI2C,WAAW,GAAGvI,CAAC,CAAC6G,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC;UAC5C0B,WAAW,CAACvB,KAAK,CAAC,CAAC,CAAC,CAAC;UACrBzG,aAAa,CAAC6H,IAAI,CAACG,WAAW,CAAC;QACjC;QAEAvI,CAAC,CAACoJ,SAAS,CAAC,EAAE,CAAC;QACfpJ,CAAC,CAACqJ,UAAU,CAACrJ,CAAC,CAACsJ,KAAK,CAAC;QACrBtJ,CAAC,CAACuJ,SAAS,CAACvJ,CAAC,CAACsJ,KAAK,CAAC;;QAEpB;QACA,KAAK,IAAIL,MAAM,IAAI1I,aAAa,EAAE;UAChC0I,MAAM,CAACI,UAAU,CAACrJ,CAAC,CAACsJ,KAAK,CAAC;UAC1BL,MAAM,CAACM,SAAS,CAACvJ,CAAC,CAACsJ,KAAK,CAAC;QAC3B;;QAEA;QACAlI,WAAW,GAAGjC,IAAI,IAAIkC,IAAI,CAACC,KAAK,CAACtB,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACpD,IAAI,CAACpC,IAAI,EAAE;UACTC,OAAO,IAAIA,OAAO,CAACgC,WAAW,CAAC;QACjC;;QAEA;QACAkH,WAAW,CAAC,CAAC;MACf,CAAC;;MAED;MACAtI,CAAC,CAACwJ,IAAI,GAAG,YAAW;QAClB;QACA,IAAIxJ,CAAC,CAACyJ,UAAU,KAAK,CAAC,EAAE;UACtBzJ,CAAC,CAAC8G,UAAU,CAAC,CAAC,CAAC;QACjB;;QAEA;QACA9G,CAAC,CAACiH,KAAK,CAAC3G,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;;QAEzB;QACAN,CAAC,CAAC0J,WAAW,CAAC,CAAC;;QAEf;QACA,MAAMzB,WAAW,GAAGzB,cAAc,CAAC,CAAC;;QAEpC;QACAlG,UAAU,CAAC8H,IAAI,CAAC,CAAC;QACjB9H,UAAU,CAACqJ,SAAS,CAACrJ,UAAU,CAACsJ,KAAK,GAAG,CAAC,EAAEtJ,UAAU,CAACuJ,MAAM,GAAG,CAAC,CAAC;;QAEjE;QACA,IAAIC,iBAAiB,GAAIjJ,CAAC,GAAGC,IAAI,GAAId,CAAC,CAACsH,MAAM,GAAG,GAAG,CAAC,CAAC;QACrDhH,UAAU,CAACyJ,MAAM,CAACD,iBAAiB,CAAC;;QAEpC;QACA,IAAIE,kBAAkB,GAAGzJ,aAAa,CAACkB,YAAY,CAAC;QACpDuI,kBAAkB,CAAC5B,IAAI,CAAC,CAAC;QACzB4B,kBAAkB,CAACL,SAAS,CAACK,kBAAkB,CAACJ,KAAK,GAAG,CAAC,EAAEI,kBAAkB,CAACH,MAAM,GAAG,CAAC,CAAC;QACzFG,kBAAkB,CAACD,MAAM,CAACD,iBAAiB,CAAC;;QAE5C;QACAlJ,YAAY,GAAGD,OAAO,CAACR,MAAM,CAACsB,YAAY,CAAC;QAC3CnB,UAAU,CAAC2J,MAAM,CAACrJ,YAAY,CAAC;QAC/BoJ,kBAAkB,CAACC,MAAM,CAACrJ,YAAY,CAAC;QACvCN,UAAU,CAACoI,YAAY,CAAC,CAAC,CAAC;QAC1BsB,kBAAkB,CAACtB,YAAY,CAAC,CAAC,CAAC;QAElC,IAAItG,CAAC,GAAG,CAAC;QACT,IAAIC,CAAC,GAAG,CAAC;;QAET;QACA,QAAO5B,SAAS;UACd,KAAK,eAAe;YAClB;YACA,MAAM6B,KAAK,GAAG,CAAC5B,MAAM,CAAC6B,CAAC,GAAG7B,MAAM,CAAC8B,CAAC,IAAIxC,CAAC,CAACyC,GAAG,CAAC5B,CAAC,CAAC,GAAGH,MAAM,CAACgC,CAAC,GAAG1C,CAAC,CAACyC,GAAG,CAAE,CAAC/B,MAAM,CAAC6B,CAAC,GAAG7B,MAAM,CAAC8B,CAAC,IAAI9B,MAAM,CAAC8B,CAAC,GAAI3B,CAAC,CAAC;YACzG,MAAM8B,KAAK,GAAG,CAACjC,MAAM,CAAC6B,CAAC,GAAG7B,MAAM,CAAC8B,CAAC,IAAIxC,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,CAAC,GAAGH,MAAM,CAACgC,CAAC,GAAG1C,CAAC,CAAC4C,GAAG,CAAE,CAAClC,MAAM,CAAC6B,CAAC,GAAG7B,MAAM,CAAC8B,CAAC,IAAI9B,MAAM,CAAC8B,CAAC,GAAI3B,CAAC,CAAC;;YAEzG;YACA,MAAMgC,OAAO,GAAGnC,MAAM,CAACoC,OAAO,GAAG9C,CAAC,CAACyC,GAAG,CAAC5B,CAAC,GAAGH,MAAM,CAACqC,OAAO,GAAGrC,MAAM,CAACsC,QAAQ,CAAC;YAC5E,MAAMC,OAAO,GAAGvC,MAAM,CAACoC,OAAO,GAAG9C,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,GAAGH,MAAM,CAACqC,OAAO,GAAGrC,MAAM,CAACsC,QAAQ,CAAC;YAE5EZ,CAAC,GAAGE,KAAK,GAAGO,OAAO;YACnBR,CAAC,GAAGM,KAAK,GAAGM,OAAO;YACnB;UACF,KAAK,kBAAkB;YACrB;YACA,MAAMC,KAAK,GAAG,CAACxC,MAAM,CAACyC,EAAE,GAAGzC,MAAM,CAAC0C,EAAE,IAAIpD,CAAC,CAACyC,GAAG,CAAC5B,CAAC,CAAC,GAAGH,MAAM,CAAC2C,EAAE,GAAGrD,CAAC,CAACyC,GAAG,CAAE,CAAC/B,MAAM,CAACyC,EAAE,GAAGzC,MAAM,CAAC0C,EAAE,IAAI1C,MAAM,CAAC0C,EAAE,GAAIvC,CAAC,CAAC;YAC/G,MAAMyC,KAAK,GAAG,CAAC5C,MAAM,CAACyC,EAAE,GAAGzC,MAAM,CAAC0C,EAAE,IAAIpD,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,CAAC,GAAGH,MAAM,CAAC2C,EAAE,GAAGrD,CAAC,CAAC4C,GAAG,CAAE,CAAClC,MAAM,CAACyC,EAAE,GAAGzC,MAAM,CAAC0C,EAAE,IAAI1C,MAAM,CAAC0C,EAAE,GAAIvC,CAAC,CAAC;;YAE/G;YACA,MAAM0C,KAAK,GAAG,CAAC7C,MAAM,CAAC8C,EAAE,GAAG9C,MAAM,CAAC+C,EAAE,IAAIzD,CAAC,CAACyC,GAAG,CAAC5B,CAAC,GAAGH,MAAM,CAACgD,UAAU,CAAC,GAAGhD,MAAM,CAACiD,EAAE,GAAG3D,CAAC,CAACyC,GAAG,CAAE,CAAC/B,MAAM,CAAC8C,EAAE,GAAG9C,MAAM,CAAC+C,EAAE,IAAI/C,MAAM,CAAC+C,EAAE,GAAI5C,CAAC,GAAGH,MAAM,CAACgD,UAAU,CAAC;YACvJ,MAAME,KAAK,GAAG,CAAClD,MAAM,CAAC8C,EAAE,GAAG9C,MAAM,CAAC+C,EAAE,IAAIzD,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,GAAGH,MAAM,CAACgD,UAAU,CAAC,GAAGhD,MAAM,CAACiD,EAAE,GAAG3D,CAAC,CAAC4C,GAAG,CAAE,CAAClC,MAAM,CAAC8C,EAAE,GAAG9C,MAAM,CAAC+C,EAAE,IAAI/C,MAAM,CAAC+C,EAAE,GAAI5C,CAAC,GAAGH,MAAM,CAACgD,UAAU,CAAC;;YAEvJ;YACAtB,CAAC,GAAGc,KAAK,GAAGK,KAAK,GAAG7C,MAAM,CAACmD,SAAS;YACpCxB,CAAC,GAAGiB,KAAK,GAAGM,KAAK,GAAGlD,MAAM,CAACmD,SAAS;YACpC;UACF,KAAK,cAAc;YACjB;YACA,MAAMC,WAAW,GAAGpD,MAAM,CAACqD,UAAU,GAAG/D,CAAC,CAACyC,GAAG,CAAC/B,MAAM,CAACsD,EAAE,GAAGnD,CAAC,CAAC;YAC5D,MAAMoD,MAAM,GAAGH,WAAW,GAAG9D,CAAC,CAACyC,GAAG,CAAC5B,CAAC,CAAC;YACrC,MAAMqD,MAAM,GAAGJ,WAAW,GAAG9D,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,CAAC;;YAErC;YACA,MAAMsD,WAAW,GAAGzD,MAAM,CAAC0D,UAAU,GAAGpE,CAAC,CAACyC,GAAG,CAAC/B,MAAM,CAAC2D,EAAE,GAAGxD,CAAC,GAAGH,MAAM,CAAC4D,KAAK,CAAC;YAC3E,MAAMC,MAAM,GAAGJ,WAAW,GAAGnE,CAAC,CAACyC,GAAG,CAAC5B,CAAC,GAAGH,MAAM,CAAC8D,SAAS,CAAC;YACxD,MAAMC,MAAM,GAAGN,WAAW,GAAGnE,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,GAAGH,MAAM,CAAC8D,SAAS,CAAC;;YAExD;YACApC,CAAC,GAAG6B,MAAM,GAAGM,MAAM;YACnBlC,CAAC,GAAG6B,MAAM,GAAGO,MAAM;YACnB;UACF,KAAK,cAAc;YACjB;YACA;YACA,MAAMC,EAAE,GAAG1E,CAAC,CAAC2E,GAAG,CAAC,CAACjE,MAAM,CAACkE,QAAQ,GAAG/D,CAAC,CAAC;YACtC,MAAMgE,EAAE,GAAG7E,CAAC,CAAC2E,GAAG,CAAC,CAACjE,MAAM,CAACoE,QAAQ,GAAGjE,CAAC,CAAC;;YAEtC;YACAuB,CAAC,GAAG1B,MAAM,CAACqE,WAAW,GAAG/E,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,GAAGH,MAAM,CAACsE,WAAW,GAAGtE,MAAM,CAACuE,OAAO,CAAC,GAAGP,EAAE,GACxEhE,MAAM,CAACwE,WAAW,GAAGlF,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,GAAGH,MAAM,CAACyE,WAAW,GAAGzE,MAAM,CAAC0E,OAAO,CAAC,GAAGV,EAAE;;YAE5E;YACArC,CAAC,GAAG3B,MAAM,CAAC2E,WAAW,GAAGrF,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,GAAGH,MAAM,CAAC4E,WAAW,GAAG5E,MAAM,CAAC6E,OAAO,CAAC,GAAGV,EAAE,GACxEnE,MAAM,CAAC8E,WAAW,GAAGxF,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,GAAGH,MAAM,CAAC+E,WAAW,GAAG/E,MAAM,CAACgF,OAAO,CAAC,GAAGb,EAAE;YAC5E;UACF,KAAK,cAAc;YACjB;YACA;YACAzC,CAAC,GAAG,CAAC;YACLC,CAAC,GAAG,CAAC;;YAEL;YACAD,CAAC,IAAI1B,MAAM,CAACiF,aAAa,GAAG3F,CAAC,CAACyC,GAAG,CAAC5B,CAAC,CAAC;YACpCwB,CAAC,IAAI3B,MAAM,CAACiF,aAAa,GAAG3F,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,CAAC;;YAEpC;YACA,KAAK,IAAI+E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlF,MAAM,CAACmF,UAAU,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;cACjD,MAAMG,IAAI,GAAGrF,MAAM,CAACmF,UAAU,CAACD,CAAC,CAAC;;cAEjC;cACA,MAAMI,KAAK,GAAGnF,CAAC,GAAGkF,IAAI,CAACvB,SAAS,GAAGuB,IAAI,CAACzB,KAAK;cAC7C,MAAM2B,MAAM,GAAGF,IAAI,CAACG,SAAS;cAE7B,IAAIH,IAAI,CAACI,IAAI,KAAK,YAAY,EAAE;gBAC9B/D,CAAC,IAAI6D,MAAM,GAAGjG,CAAC,CAACyC,GAAG,CAACuD,KAAK,CAAC;gBAC1B3D,CAAC,IAAI4D,MAAM,GAAGjG,CAAC,CAAC4C,GAAG,CAACoD,KAAK,CAAC;cAC5B,CAAC,MAAM,IAAID,IAAI,CAACI,IAAI,KAAK,aAAa,EAAE;gBACtC,MAAMC,WAAW,GAAGH,MAAM,GAAG,GAAG;gBAChC,MAAMI,MAAM,GAAGJ,MAAM,GAAG,GAAG;gBAC3B7D,CAAC,IAAI,CAAC6D,MAAM,GAAGG,WAAW,IAAIpG,CAAC,CAACyC,GAAG,CAACuD,KAAK,CAAC,GAAGK,MAAM,GAAGrG,CAAC,CAACyC,GAAG,CAAE,CAACwD,MAAM,GAAGG,WAAW,IAAIA,WAAW,GAAIJ,KAAK,CAAC;gBAC3G3D,CAAC,IAAI,CAAC4D,MAAM,GAAGG,WAAW,IAAIpG,CAAC,CAAC4C,GAAG,CAACoD,KAAK,CAAC,GAAGK,MAAM,GAAGrG,CAAC,CAAC4C,GAAG,CAAE,CAACqD,MAAM,GAAGG,WAAW,IAAIA,WAAW,GAAIJ,KAAK,CAAC;cAC7G,CAAC,MAAM,IAAID,IAAI,CAACI,IAAI,KAAK,cAAc,EAAE;gBACvC,MAAMC,WAAW,GAAGH,MAAM,GAAG,GAAG;gBAChC,MAAMI,MAAM,GAAGJ,MAAM,GAAG,GAAG;gBAC3B7D,CAAC,IAAI,CAAC6D,MAAM,GAAGG,WAAW,IAAIpG,CAAC,CAACyC,GAAG,CAACuD,KAAK,CAAC,GAAGK,MAAM,GAAGrG,CAAC,CAACyC,GAAG,CAAE,CAACwD,MAAM,GAAGG,WAAW,IAAIA,WAAW,GAAIJ,KAAK,CAAC;gBAC3G3D,CAAC,IAAI,CAAC4D,MAAM,GAAGG,WAAW,IAAIpG,CAAC,CAAC4C,GAAG,CAACoD,KAAK,CAAC,GAAGK,MAAM,GAAGrG,CAAC,CAAC4C,GAAG,CAAE,CAACqD,MAAM,GAAGG,WAAW,IAAIA,WAAW,GAAIJ,KAAK,CAAC;cAC7G;YACF;YACA;QACJ;;QAEA;QACA5D,CAAC,IAAI6F,WAAW;QAChB5F,CAAC,IAAI4F,WAAW;;QAEhB;QACA,IAAIlH,KAAK,KAAK,IAAI,EAAE;UAClBT,UAAU,CAAC4J,IAAI,CAACnJ,KAAK,EAAEC,KAAK,EAAEoB,CAAC,EAAEC,CAAC,CAAC;UACnC2H,kBAAkB,CAACE,IAAI,CAACnJ,KAAK,EAAEC,KAAK,EAAEoB,CAAC,EAAEC,CAAC,CAAC;QAC7C;;QAEA;QACAtB,KAAK,GAAGqB,CAAC;QACTpB,KAAK,GAAGqB,CAAC;;QAET;QACA,MAAM8H,aAAa,GAAG,CAAC;QACvB,KAAK,IAAIvE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuE,aAAa,EAAEvE,CAAC,EAAE,EAAE;UACtC;UACA/E,CAAC,IAAI,KAAK;;UAEV;UACA,IAAIY,YAAY,GAAGC,qBAAqB,CAACoE,MAAM,GAAC,CAAC,IAAIjF,CAAC,IAAIa,qBAAqB,CAACD,YAAY,CAAC,EAAE;YAC7F;YACAA,YAAY,EAAE;YACd;YACA,IAAIA,YAAY,GAAGlB,aAAa,CAACuF,MAAM,EAAE;cACvCkE,kBAAkB,GAAGzJ,aAAa,CAACkB,YAAY,CAAC;cAChDuI,kBAAkB,CAAC5B,IAAI,CAAC,CAAC;cACzB4B,kBAAkB,CAACL,SAAS,CAACK,kBAAkB,CAACJ,KAAK,GAAG,CAAC,EAAEI,kBAAkB,CAACH,MAAM,GAAG,CAAC,CAAC;cACzF;cACA,IAAIC,iBAAiB,GAAIjJ,CAAC,GAAGC,IAAI,GAAId,CAAC,CAACsH,MAAM,GAAG,GAAG;cACnD0C,kBAAkB,CAACD,MAAM,CAACD,iBAAiB,CAAC;cAC5ClJ,YAAY,GAAGD,OAAO,CAACR,MAAM,CAACkB,IAAI,CAACyG,GAAG,CAACrG,YAAY,EAAEd,OAAO,CAACR,MAAM,CAAC2F,MAAM,GAAG,CAAC,CAAC,CAAC;cAChFxF,UAAU,CAAC2J,MAAM,CAACrJ,YAAY,CAAC;cAC/BoJ,kBAAkB,CAACC,MAAM,CAACrJ,YAAY,CAAC;YACzC;UACF;;UAEA;UACA,IAAIwJ,KAAK,GAAG,CAAC;UACb,IAAIC,KAAK,GAAG,CAAC;;UAEb;UACA,QAAO5J,SAAS;YACd,KAAK,eAAe;cAClB;cACA,MAAM6B,KAAK,GAAG,CAAC5B,MAAM,CAAC6B,CAAC,GAAG7B,MAAM,CAAC8B,CAAC,IAAIxC,CAAC,CAACyC,GAAG,CAAC5B,CAAC,CAAC,GAAGH,MAAM,CAACgC,CAAC,GAAG1C,CAAC,CAACyC,GAAG,CAAE,CAAC/B,MAAM,CAAC6B,CAAC,GAAG7B,MAAM,CAAC8B,CAAC,IAAI9B,MAAM,CAAC8B,CAAC,GAAI3B,CAAC,CAAC;cACzG,MAAM8B,KAAK,GAAG,CAACjC,MAAM,CAAC6B,CAAC,GAAG7B,MAAM,CAAC8B,CAAC,IAAIxC,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,CAAC,GAAGH,MAAM,CAACgC,CAAC,GAAG1C,CAAC,CAAC4C,GAAG,CAAE,CAAClC,MAAM,CAAC6B,CAAC,GAAG7B,MAAM,CAAC8B,CAAC,IAAI9B,MAAM,CAAC8B,CAAC,GAAI3B,CAAC,CAAC;;cAEzG;cACA,MAAMgC,OAAO,GAAGnC,MAAM,CAACoC,OAAO,GAAG9C,CAAC,CAACyC,GAAG,CAAC5B,CAAC,GAAGH,MAAM,CAACqC,OAAO,GAAGrC,MAAM,CAACsC,QAAQ,CAAC;cAC5E,MAAMC,OAAO,GAAGvC,MAAM,CAACoC,OAAO,GAAG9C,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,GAAGH,MAAM,CAACqC,OAAO,GAAGrC,MAAM,CAACsC,QAAQ,CAAC;cAE5EoH,KAAK,GAAG9H,KAAK,GAAGO,OAAO;cACvBwH,KAAK,GAAG1H,KAAK,GAAGM,OAAO;cACvB;YACF,KAAK,kBAAkB;cACrB;cACA,MAAMC,KAAK,GAAG,CAACxC,MAAM,CAACyC,EAAE,GAAGzC,MAAM,CAAC0C,EAAE,IAAIpD,CAAC,CAACyC,GAAG,CAAC5B,CAAC,CAAC,GAAGH,MAAM,CAAC2C,EAAE,GAAGrD,CAAC,CAACyC,GAAG,CAAE,CAAC/B,MAAM,CAACyC,EAAE,GAAGzC,MAAM,CAAC0C,EAAE,IAAI1C,MAAM,CAAC0C,EAAE,GAAIvC,CAAC,CAAC;cAC/G,MAAMyC,KAAK,GAAG,CAAC5C,MAAM,CAACyC,EAAE,GAAGzC,MAAM,CAAC0C,EAAE,IAAIpD,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,CAAC,GAAGH,MAAM,CAAC2C,EAAE,GAAGrD,CAAC,CAAC4C,GAAG,CAAE,CAAClC,MAAM,CAACyC,EAAE,GAAGzC,MAAM,CAAC0C,EAAE,IAAI1C,MAAM,CAAC0C,EAAE,GAAIvC,CAAC,CAAC;;cAE/G;cACA,MAAM0C,KAAK,GAAG,CAAC7C,MAAM,CAAC8C,EAAE,GAAG9C,MAAM,CAAC+C,EAAE,IAAIzD,CAAC,CAACyC,GAAG,CAAC5B,CAAC,GAAGH,MAAM,CAACgD,UAAU,CAAC,GAAGhD,MAAM,CAACiD,EAAE,GAAG3D,CAAC,CAACyC,GAAG,CAAE,CAAC/B,MAAM,CAAC8C,EAAE,GAAG9C,MAAM,CAAC+C,EAAE,IAAI/C,MAAM,CAAC+C,EAAE,GAAI5C,CAAC,GAAGH,MAAM,CAACgD,UAAU,CAAC;cACvJ,MAAME,KAAK,GAAG,CAAClD,MAAM,CAAC8C,EAAE,GAAG9C,MAAM,CAAC+C,EAAE,IAAIzD,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,GAAGH,MAAM,CAACgD,UAAU,CAAC,GAAGhD,MAAM,CAACiD,EAAE,GAAG3D,CAAC,CAAC4C,GAAG,CAAE,CAAClC,MAAM,CAAC8C,EAAE,GAAG9C,MAAM,CAAC+C,EAAE,IAAI/C,MAAM,CAAC+C,EAAE,GAAI5C,CAAC,GAAGH,MAAM,CAACgD,UAAU,CAAC;;cAEvJ;cACA0G,KAAK,GAAGlH,KAAK,GAAGK,KAAK,GAAG7C,MAAM,CAACmD,SAAS;cACxCwG,KAAK,GAAG/G,KAAK,GAAGM,KAAK,GAAGlD,MAAM,CAACmD,SAAS;cACxC;YACF,KAAK,cAAc;cACjB;cACA,MAAMC,WAAW,GAAGpD,MAAM,CAACqD,UAAU,GAAG/D,CAAC,CAACyC,GAAG,CAAC/B,MAAM,CAACsD,EAAE,GAAGnD,CAAC,CAAC;cAC5D,MAAMoD,MAAM,GAAGH,WAAW,GAAG9D,CAAC,CAACyC,GAAG,CAAC5B,CAAC,CAAC;cACrC,MAAMqD,MAAM,GAAGJ,WAAW,GAAG9D,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,CAAC;;cAErC;cACA,MAAMsD,WAAW,GAAGzD,MAAM,CAAC0D,UAAU,GAAGpE,CAAC,CAACyC,GAAG,CAAC/B,MAAM,CAAC2D,EAAE,GAAGxD,CAAC,GAAGH,MAAM,CAAC4D,KAAK,CAAC;cAC3E,MAAMC,MAAM,GAAGJ,WAAW,GAAGnE,CAAC,CAACyC,GAAG,CAAC5B,CAAC,GAAGH,MAAM,CAAC8D,SAAS,CAAC;cACxD,MAAMC,MAAM,GAAGN,WAAW,GAAGnE,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,GAAGH,MAAM,CAAC8D,SAAS,CAAC;;cAExD;cACA4F,KAAK,GAAGnG,MAAM,GAAGM,MAAM;cACvB8F,KAAK,GAAGnG,MAAM,GAAGO,MAAM;cACvB;YACF,KAAK,cAAc;cACjB;cACA;cACA,MAAMC,EAAE,GAAG1E,CAAC,CAAC2E,GAAG,CAAC,CAACjE,MAAM,CAACkE,QAAQ,GAAG/D,CAAC,CAAC;cACtC,MAAMgE,EAAE,GAAG7E,CAAC,CAAC2E,GAAG,CAAC,CAACjE,MAAM,CAACoE,QAAQ,GAAGjE,CAAC,CAAC;;cAEtC;cACAuJ,KAAK,GAAG1J,MAAM,CAACqE,WAAW,GAAG/E,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,GAAGH,MAAM,CAACsE,WAAW,GAAGtE,MAAM,CAACuE,OAAO,CAAC,GAAGP,EAAE,GACxEhE,MAAM,CAACwE,WAAW,GAAGlF,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,GAAGH,MAAM,CAACyE,WAAW,GAAGzE,MAAM,CAAC0E,OAAO,CAAC,GAAGV,EAAE;;cAEhF;cACA2F,KAAK,GAAG3J,MAAM,CAAC2E,WAAW,GAAGrF,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,GAAGH,MAAM,CAAC4E,WAAW,GAAG5E,MAAM,CAAC6E,OAAO,CAAC,GAAGV,EAAE,GACxEnE,MAAM,CAAC8E,WAAW,GAAGxF,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,GAAGH,MAAM,CAAC+E,WAAW,GAAG/E,MAAM,CAACgF,OAAO,CAAC,GAAGb,EAAE;cAChF;YACF,KAAK,cAAc;cACjB;cACA;cACAuF,KAAK,GAAG,CAAC;cACTC,KAAK,GAAG,CAAC;;cAET;cACAD,KAAK,IAAI1J,MAAM,CAACiF,aAAa,GAAG3F,CAAC,CAACyC,GAAG,CAAC5B,CAAC,CAAC;cACxCwJ,KAAK,IAAI3J,MAAM,CAACiF,aAAa,GAAG3F,CAAC,CAAC4C,GAAG,CAAC/B,CAAC,CAAC;;cAExC;cACA,KAAK,IAAI+E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlF,MAAM,CAACmF,UAAU,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;gBACjD,MAAMG,IAAI,GAAGrF,MAAM,CAACmF,UAAU,CAACD,CAAC,CAAC;;gBAEjC;gBACA,MAAMI,KAAK,GAAGnF,CAAC,GAAGkF,IAAI,CAACvB,SAAS,GAAGuB,IAAI,CAACzB,KAAK;gBAC7C,MAAM2B,MAAM,GAAGF,IAAI,CAACG,SAAS;gBAE7B,IAAIH,IAAI,CAACI,IAAI,KAAK,YAAY,EAAE;kBAC9BiE,KAAK,IAAInE,MAAM,GAAGjG,CAAC,CAACyC,GAAG,CAACuD,KAAK,CAAC;kBAC9BqE,KAAK,IAAIpE,MAAM,GAAGjG,CAAC,CAAC4C,GAAG,CAACoD,KAAK,CAAC;gBAChC,CAAC,MAAM,IAAID,IAAI,CAACI,IAAI,KAAK,aAAa,EAAE;kBACtC,MAAMC,WAAW,GAAGH,MAAM,GAAG,GAAG;kBAChC,MAAMI,MAAM,GAAGJ,MAAM,GAAG,GAAG;kBAC3BmE,KAAK,IAAI,CAACnE,MAAM,GAAGG,WAAW,IAAIpG,CAAC,CAACyC,GAAG,CAACuD,KAAK,CAAC,GAAGK,MAAM,GAAGrG,CAAC,CAACyC,GAAG,CAAE,CAACwD,MAAM,GAAGG,WAAW,IAAIA,WAAW,GAAIJ,KAAK,CAAC;kBAC/GqE,KAAK,IAAI,CAACpE,MAAM,GAAGG,WAAW,IAAIpG,CAAC,CAAC4C,GAAG,CAACoD,KAAK,CAAC,GAAGK,MAAM,GAAGrG,CAAC,CAAC4C,GAAG,CAAE,CAACqD,MAAM,GAAGG,WAAW,IAAIA,WAAW,GAAIJ,KAAK,CAAC;gBACjH,CAAC,MAAM,IAAID,IAAI,CAACI,IAAI,KAAK,cAAc,EAAE;kBACvC,MAAMC,WAAW,GAAGH,MAAM,GAAG,GAAG;kBAChC,MAAMI,MAAM,GAAGJ,MAAM,GAAG,GAAG;kBAC3BmE,KAAK,IAAI,CAACnE,MAAM,GAAGG,WAAW,IAAIpG,CAAC,CAACyC,GAAG,CAACuD,KAAK,CAAC,GAAGK,MAAM,GAAGrG,CAAC,CAACyC,GAAG,CAAE,CAACwD,MAAM,GAAGG,WAAW,IAAIA,WAAW,GAAIJ,KAAK,CAAC;kBAC/GqE,KAAK,IAAI,CAACpE,MAAM,GAAGG,WAAW,IAAIpG,CAAC,CAAC4C,GAAG,CAACoD,KAAK,CAAC,GAAGK,MAAM,GAAGrG,CAAC,CAAC4C,GAAG,CAAE,CAACqD,MAAM,GAAGG,WAAW,IAAIA,WAAW,GAAIJ,KAAK,CAAC;gBACjH;cACF;cACA;UACJ;;UAEA;UACAoE,KAAK,IAAInC,WAAW;UACpBoC,KAAK,IAAIpC,WAAW;;UAEpB;UACA3H,UAAU,CAAC4J,IAAI,CAACnJ,KAAK,EAAEC,KAAK,EAAEoJ,KAAK,EAAEC,KAAK,CAAC;UAC3CL,kBAAkB,CAACE,IAAI,CAACnJ,KAAK,EAAEC,KAAK,EAAEoJ,KAAK,EAAEC,KAAK,CAAC;;UAEnD;UACAtJ,KAAK,GAAGqJ,KAAK;UACbpJ,KAAK,GAAGqJ,KAAK;QACf;;QAEA;QACAxJ,CAAC,IAAI,KAAK;;QAEV;QACAI,WAAW,GAAIJ,CAAC,GAAGC,IAAI,GAAId,CAAC,CAACsH,MAAM;;QAEnC;QACA,MAAMgD,eAAe,GAAGjJ,IAAI,CAACyG,GAAG,CAAC,GAAG,EAAEzG,IAAI,CAACS,KAAK,CAAEjB,CAAC,GAAGC,IAAI,GAAI,GAAG,CAAC,CAAC;QACnE,IAAIwJ,eAAe,KAAKzK,QAAQ,EAAE;UAChCC,WAAW,CAACwK,eAAe,CAAC;QAC9B;;QAEA;QACAhK,UAAU,CAACiK,GAAG,CAAC,CAAC;QAChBP,kBAAkB,CAACO,GAAG,CAAC,CAAC;;QAExB;QACA,IAAI1J,CAAC,GAAGC,IAAI,EAAE;UACZd,CAAC,CAACwK,MAAM,CAAC,CAAC,CAAC,CAAC;UACZ5K,YAAY,CAAC,KAAK,CAAC;;UAEnB;UACA,IAAI;YACFU,UAAU,CAACiK,GAAG,CAAC,CAAC;UAClB,CAAC,CAAC,OAAME,CAAC,EAAE;YACT;UAAA;;UAGF;UACA,KAAK,IAAI7E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrF,aAAa,CAACuF,MAAM,EAAEF,CAAC,EAAE,EAAE;YAC7C,IAAI;cACFrF,aAAa,CAACqF,CAAC,CAAC,CAAC2E,GAAG,CAAC,CAAC;YACxB,CAAC,CAAC,OAAOE,CAAC,EAAE;cACV;cACA7B,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEjD,CAAC,EAAE,qBAAqB,CAAC;YACtD;UACF;;UAEA;UACApF,WAAW,GAAGmG,mBAAmB,CAAC,CAAC;;UAEnC;UACApH,iBAAiB,IAAIA,iBAAiB,CAACiB,WAAW,CAAC;QACrD;MACF,CAAC;;MAED;MACAR,CAAC,CAAC0J,WAAW,GAAG,YAAW;QACzB;QACA1J,CAAC,CAAC0K,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC;QACd1K,CAAC,CAAC2K,QAAQ,CAAC,CAAC;QACZ3K,CAAC,CAAC4K,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;;QAE5B;QACA5K,CAAC,CAAC6K,QAAQ,CAAC,EAAE,CAAC;QACd7K,CAAC,CAAC0K,IAAI,CAAC,GAAG,CAAC;QACX1K,CAAC,CAAC8K,IAAI,CAAC,UAAU1J,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAEvCpB,CAAC,CAAC6K,QAAQ,CAAC,EAAE,CAAC;QACd7K,CAAC,CAAC0K,IAAI,CAAC/J,OAAO,CAACR,MAAM,CAAC,CAAC,CAAC,CAAC;QACzBH,CAAC,CAAC8K,IAAI,CAAC,MAAMrK,SAAS,MAAMU,UAAU,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAEjDnB,CAAC,CAAC0K,IAAI,CAAC/J,OAAO,CAACR,MAAM,CAAC,CAAC,CAAC,CAAC;QACzBH,CAAC,CAAC8K,IAAI,CAAC,eAAenK,OAAO,CAACT,IAAI,MAAMS,OAAO,CAACP,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MACnE,CAAC;;MAED;MACAJ,CAAC,CAAC+K,eAAe,GAAG,MAAM;QACxB3J,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACtB,CAAC,CAACuB,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAC5CnC,OAAO,IAAIA,OAAO,CAACgC,WAAW,CAAC;QAC/BkH,WAAW,CAAC,CAAC;MACf,CAAC;;MAED;MACAtI,CAAC,CAACZ,OAAO,GAAI4L,OAAO,IAAK;QACvB5J,WAAW,GAAG4J,OAAO;QACrB1C,WAAW,CAAC,CAAC;MACf,CAAC;IACH,CAAC;;IAED;IACA5I,UAAU,CAACuL,OAAO,GAAG,IAAIlM,EAAE,CAACgB,MAAM,EAAEN,SAAS,CAACwL,OAAO,CAAC;;IAEtD;IACA,OAAO,MAAM;MACX,IAAIvL,UAAU,CAACuL,OAAO,EAAE;QACtBvL,UAAU,CAACuL,OAAO,CAACC,MAAM,CAAC,CAAC;MAC7B;IACF,CAAC;EACH,CAAC,EAAE,CAAC/L,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ,oBACEF,OAAA;IAAKkM,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACrCnM,OAAA;MAAKoM,GAAG,EAAE5L,SAAU;MAAC0L,SAAS,EAAC;IAAgB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EACrD9L,SAAS,iBACRV,OAAA;MAAKkM,SAAS,EAAC,wBAAwB;MAAAC,QAAA,gBACrCnM,OAAA;QAAKkM,SAAS,EAAC,cAAc;QAAChC,KAAK,EAAE;UAAES,KAAK,EAAE,GAAG/J,QAAQ;QAAI;MAAE;QAAAyL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACtExM,OAAA;QAAMkM,SAAS,EAAC,eAAe;QAAAC,QAAA,GAAEvL,QAAQ,EAAC,GAAC;MAAA;QAAAyL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CACN,EACA,CAAC9L,SAAS,iBACTV,OAAA;MAAKkM,SAAS,EAAC,iBAAiB;MAAAC,QAAA,eAC9BnM,OAAA;QAAAmM,QAAA,EAAM;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjM,EAAA,CAp5BIN,WAAW;AAAAwM,EAAA,GAAXxM,WAAW;AAs5BjB,eAAeA,WAAW;AAAC,IAAAwM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}