{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiroCanvas = ({\n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = p => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [{\n        name: \"Neon Mirage\",\n        colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"],\n        rarity: \"Common\"\n      }, {\n        name: \"Digital Dream\",\n        colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"],\n        rarity: \"Uncommon\"\n      }, {\n        name: \"Crystal Sunset\",\n        colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"],\n        rarity: \"Rare\"\n      }, {\n        name: \"Cyber Haze\",\n        colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"],\n        rarity: \"Super Rare\"\n      }, {\n        name: \"Pastel Vapor\",\n        colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"],\n        rarity: \"Legendary\"\n      }];\n\n      // Shape rarity distribution - updated to make Lissajous the most rare\n      const shapeRarity = {\n        \"Rhodonea\": \"Common\",\n        // 40%\n        \"Epitrochoid\": \"Uncommon\",\n        // 30%\n        \"Hypotrochoid\": \"Rare\",\n        // 20%\n        \"OrganicFlow\": \"Super Rare\",\n        // 8%\n        \"Lissajous\": \"Legendary\" // 2% (now most rare)\n      };\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let startColorIndex = 0;\n      let endColorIndex = 1;\n      let colorTransition = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n      let rotatingFrames = []; // To store frames for the 360Â° rotation GIF\n\n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Helper function to draw the complete pattern in one go\n      const drawCompletePattern = () => {\n        p.stroke(currentColor);\n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n        let prevX = null;\n        let prevY = null;\n\n        // Draw the entire pattern in one go\n        for (let step = 0; step < maxT; step += 0.02) {\n          let x = 0;\n          let y = 0;\n\n          // Calculate position based on shape type\n          switch (shapeType) {\n            case \"Hypotrochoid\":\n              x = (params.R - params.r1) * p.cos(step) + params.d * p.cos((params.R - params.r1) / params.r1 * step);\n              y = (params.R - params.r1) * p.sin(step) - params.d * p.sin((params.R - params.r1) / params.r1 * step);\n              break;\n            case \"Epitrochoid\":\n              x = (params.R + params.r1) * p.cos(step) - params.d * p.cos((params.R + params.r1) / params.r1 * step);\n              y = (params.R + params.r1) * p.sin(step) - params.d * p.sin((params.R + params.r1) / params.r1 * step);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * step);\n              x = rhodoneaRadius * p.cos(step);\n              y = rhodoneaRadius * p.sin(step);\n              break;\n            case \"Lissajous\":\n              x = params.A * p.sin(params.a * step + params.delta);\n              y = params.B * p.sin(params.b * step);\n              break;\n            case \"OrganicFlow\":\n              let baseRadius = 150;\n              let noiseTime = step * params.speed;\n              let radius = baseRadius;\n              for (let i = 0; i < params.waves; i++) {\n                let noiseFactor = p.noise(p.cos(step + i) * params.noiseScale, p.sin(step + i) * params.noiseScale, noiseTime);\n                radius += p.sin(step * (i + 1) * params.complexity) * params.amplitude * noiseFactor;\n              }\n              x = radius * p.cos(step);\n              y = radius * p.sin(step);\n              x += p.sin(step * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n              y += p.cos(step * 2.7) * 20 * p.noise(0, noiseTime * 2);\n              break;\n          }\n\n          // Apply scaling\n          let scaleFactor = 1.0; // Fixed scale factor\n          x *= scaleFactor;\n          y *= scaleFactor;\n\n          // Draw line segment\n          if (prevX !== null) {\n            p.line(prevX, prevY, x, y);\n          }\n          prevX = x;\n          prevY = y;\n        }\n      };\n\n      // Capture rotating animation frames\n      const captureRotatingAnimation = () => {\n        // Store the current state\n        const currentBackground = p.color(0);\n        const currentStroke = currentColor;\n\n        // We'll create 30 frames for a smooth animation\n        rotatingFrames = [];\n\n        // Draw the complete pattern once with full colors\n        p.push();\n        p.background(0);\n        p.translate(p.width / 2, p.height / 2);\n        drawCompletePattern();\n        p.pop();\n\n        // Remember this completed pattern\n        const basePattern = p.get();\n\n        // Create 30 frames rotating the pattern around 360Â°\n        for (let angle = 0; angle < 360; angle += 12) {\n          // 12Â° steps = 30 frames\n          // Clear the canvas\n          p.background(0);\n\n          // Draw the full pattern rotated\n          p.push();\n          p.imageMode(p.CENTER);\n          p.translate(p.width / 2, p.height / 2);\n          p.rotate(p.radians(angle));\n          p.image(basePattern, 0, 0);\n          p.pop();\n\n          // Capture the frame\n          rotatingFrames.push(p.get());\n        }\n        return rotatingFrames;\n      };\n\n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Rhodonea - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Epitrochoid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Hypotrochoid - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // OrganicFlow - Super Rare 8%\n        } else {\n          shapeIndex = 4; // Lissajous - Legendary 2%\n        }\n        params = {}; // Reset params\n\n        switch (shapeIndex) {\n          case 0:\n            // Rhodonea (now Common)\n            shapeType = \"Rhodonea\";\n            params.k = p.int(p.random(4, 9));\n            maxT = params.k % 2 === 0 ? p.TWO_PI : p.PI;\n            break;\n          case 1:\n            // Epitrochoid (remains Uncommon)\n            shapeType = \"Epitrochoid\";\n            params.R = p.random(200, 300);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(80, 160);\n            const gcd2 = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd2);\n            break;\n          case 2:\n            // Hypotrochoid (now Rare)\n            shapeType = \"Hypotrochoid\";\n            params.R = p.random(250, 400);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(100, 180);\n            const gcd = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd);\n            break;\n          case 3:\n            // OrganicFlow (now Super Rare)\n            shapeType = \"OrganicFlow\";\n            params.complexity = p.random(0.5, 2.5);\n            params.speed = p.random(0.01, 0.05);\n            params.waves = p.int(p.random(3, 7));\n            params.amplitude = p.random(100, 250);\n            params.noiseScale = p.random(0.005, 0.02);\n\n            // These need longer time to develop\n            maxT = p.TWO_PI * 20;\n            break;\n          case 4:\n            // Lissajous (now Legendary)\n            shapeType = \"Lissajous\";\n            params.A = p.random(200, 350);\n            params.B = p.random(200, 350);\n            params.a = p.int(p.random(3, 7));\n            params.b = p.int(p.random(3, 7));\n            params.delta = p.random(0, p.PI);\n\n            // Find cycle length\n            const lcm = params.a * params.b / findGCD(params.a, params.b);\n            maxT = p.TWO_PI * lcm;\n            break;\n        }\n\n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 10);\n        rarityText = shapeRarity[shapeType];\n\n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: {\n            ...params\n          }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        p.background(0);\n        p.randomSeed(currentSeed);\n\n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n\n        // Reset drawing variables\n        rotatingFrames = [];\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        startColorIndex = 0;\n        endColorIndex = 1;\n        colorTransition = 0;\n\n        // Pick a shape type\n        selectShapeType();\n\n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n\n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function () {\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n\n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n\n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function () {\n        // Clear canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n        p.push();\n        p.translate(p.width / 2, p.height / 2);\n\n        // Add rotation\n        let fullRotationAngle = t / maxT * p.TWO_PI;\n        p.rotate(fullRotationAngle);\n\n        // Gradient between colors\n        let startCol = p.color(palette.colors[startColorIndex]);\n        let endCol = p.color(palette.colors[endColorIndex]);\n        currentColor = p.lerpColor(startCol, endCol, colorTransition);\n        p.stroke(currentColor);\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch (shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r1) * p.cos(t) + params.d * p.cos((params.R - params.r1) / params.r1 * t);\n            y = (params.R - params.r1) * p.sin(t) - params.d * p.sin((params.R - params.r1) / params.r1 * t);\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r1) * p.cos(t) - params.d * p.cos((params.R + params.r1) / params.r1 * t);\n            y = (params.R + params.r1) * p.sin(t) - params.d * p.sin((params.R + params.r1) / params.r1 * t);\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = 250 * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n            break;\n          case \"OrganicFlow\":\n            // Create organic, flowing amoeba-like patterns\n            // Using perlin noise for organic movement\n            let baseRadius = 150;\n            let noiseTime = t * params.speed;\n\n            // Create multiple wave layers with perlin noise\n            let radius = baseRadius;\n            for (let i = 0; i < params.waves; i++) {\n              let noiseFactor = p.noise(p.cos(t + i) * params.noiseScale, p.sin(t + i) * params.noiseScale, noiseTime);\n              radius += p.sin(t * (i + 1) * params.complexity) * params.amplitude * noiseFactor;\n            }\n\n            // Convert to x,y coordinates\n            x = radius * p.cos(t);\n            y = radius * p.sin(t);\n\n            // Add some variation to make it more organic\n            x += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n            y += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n            break;\n        }\n\n        // Apply scaling effects - simplified to just 1.0 scale\n        let scaleFactor = 1.0;\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment\n        if (prevX !== null) {\n          p.line(prevX, prevY, x, y);\n        }\n\n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n\n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n\n          // Re-calculate based on shape type with updated t\n          switch (shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r1) * p.cos(t) + params.d * p.cos((params.R - params.r1) / params.r1 * t);\n              nextY = (params.R - params.r1) * p.sin(t) - params.d * p.sin((params.R - params.r1) / params.r1 * t);\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r1) * p.cos(t) - params.d * p.cos((params.R + params.r1) / params.r1 * t);\n              nextY = (params.R + params.r1) * p.sin(t) - params.d * p.sin((params.R + params.r1) / params.r1 * t);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n              break;\n            case \"OrganicFlow\":\n              // Create organic, flowing amoeba-like patterns for this step\n              let baseRadius = 150;\n              let noiseTime = t * params.speed;\n\n              // Create multiple wave layers with perlin noise\n              let radius = baseRadius;\n              for (let i = 0; i < params.waves; i++) {\n                let noiseFactor = p.noise(p.cos(t + i) * params.noiseScale, p.sin(t + i) * params.noiseScale, noiseTime);\n                radius += p.sin(t * (i + 1) * params.complexity) * params.amplitude * noiseFactor;\n              }\n\n              // Convert to x,y coordinates\n              nextX = radius * p.cos(t);\n              nextY = radius * p.sin(t);\n\n              // Add some variation to make it more organic\n              nextX += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n              nextY += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n              break;\n          }\n\n          // Apply scaling effects - simplified to just 1.0 scale\n          let scaleFactor = 1.0;\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n\n          // Draw the line\n          p.line(prevX, prevY, nextX, nextY);\n\n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n\n        // Increment time\n        t += 0.015;\n\n        // Update global rotation\n        globalAngle = t / maxT * p.TWO_PI;\n\n        // Update progress\n        const currentProgress = Math.min(100, Math.round(t / maxT * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n\n        // Gradually transition color\n        colorTransition += 0.003;\n        if (colorTransition >= 1) {\n          startColorIndex = endColorIndex;\n          endColorIndex = (endColorIndex + 1) % palette.colors.length;\n          colorTransition = 0;\n        }\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n\n          // Create the rotating animation frames\n          const animatedFrames = captureRotatingAnimation();\n\n          // Notify parent that drawing is complete\n          const finalImage = p.get();\n          onDrawingComplete && onDrawingComplete(finalImage, animatedFrames);\n        }\n        p.pop();\n      };\n\n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n\n      // Change to a specific seed\n      p.setSeed = newSeed => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n\n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spiro-canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: canvasRef,\n      className: \"canvas-wrapper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 7\n    }, this), isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"progress-text\",\n        children: [progress, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 9\n    }, this), !isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-complete\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Drawing complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 546,\n    columnNumber: 5\n  }, this);\n};\n_s(SpiroCanvas, \"vG581M3D6HIZspCQRmOO1WkIWxY=\");\n_c = SpiroCanvas;\nexport default SpiroCanvas;\nvar _c;\n$RefreshReg$(_c, \"SpiroCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","p5","jsxDEV","_jsxDEV","SpiroCanvas","seed","setSeed","onShapeChange","onPaletteChange","onDrawingComplete","_s","canvasRef","p5Instance","isDrawing","setIsDrawing","progress","setProgress","sketch","p","palettes","name","colors","rarity","shapeRarity","shapeType","params","palette","currentColor","t","maxT","prevX","prevY","globalAngle","startColorIndex","endColorIndex","colorTransition","rarityText","currentSeed","Math","floor","random","rotatingFrames","findGCD","a","b","round","drawCompletePattern","stroke","strokeWeight","noFill","step","x","y","R","r1","cos","d","sin","rhodoneaRadius","k","A","delta","B","baseRadius","noiseTime","speed","radius","i","waves","noiseFactor","noise","noiseScale","complexity","amplitude","scaleFactor","line","captureRotatingAnimation","currentBackground","color","currentStroke","push","background","translate","width","height","pop","basePattern","get","angle","imageMode","CENTER","rotate","radians","image","selectShapeType","shapeRoll","shapeIndex","int","TWO_PI","PI","gcd2","gcd","lcm","max","type","resetSketch","randomSeed","paletteRoll","console","log","isLooping","loop","setup","canvas","createCanvas","style","frameRate","strokeJoin","ROUND","strokeCap","draw","frameCount","fullRotationAngle","startCol","endCol","lerpColor","stepsPerFrame","nextX","nextY","currentProgress","min","length","noLoop","animatedFrames","finalImage","generateNewSeed","newSeed","current","remove","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\n\nconst SpiroCanvas = ({ \n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = (p) => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [\n        {name: \"Neon Mirage\", colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"], rarity: \"Common\"},\n        {name: \"Digital Dream\", colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"], rarity: \"Uncommon\"},\n        {name: \"Crystal Sunset\", colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"], rarity: \"Rare\"},\n        {name: \"Cyber Haze\", colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"], rarity: \"Super Rare\"},\n        {name: \"Pastel Vapor\", colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"], rarity: \"Legendary\"}\n      ];\n\n      // Shape rarity distribution - updated to make Lissajous the most rare\n      const shapeRarity = {\n        \"Rhodonea\": \"Common\", // 40%\n        \"Epitrochoid\": \"Uncommon\", // 30%\n        \"Hypotrochoid\": \"Rare\", // 20%\n        \"OrganicFlow\": \"Super Rare\", // 8%\n        \"Lissajous\": \"Legendary\" // 2% (now most rare)\n      };\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let startColorIndex = 0;\n      let endColorIndex = 1;\n      let colorTransition = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n      let rotatingFrames = []; // To store frames for the 360Â° rotation GIF\n      \n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Helper function to draw the complete pattern in one go\n      const drawCompletePattern = () => {\n        p.stroke(currentColor);\n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n        \n        let prevX = null;\n        let prevY = null;\n        \n        // Draw the entire pattern in one go\n        for (let step = 0; step < maxT; step += 0.02) {\n          let x = 0;\n          let y = 0;\n          \n          // Calculate position based on shape type\n          switch(shapeType) {\n            case \"Hypotrochoid\":\n              x = (params.R - params.r1) * p.cos(step) + params.d * p.cos(((params.R - params.r1) / params.r1) * step);\n              y = (params.R - params.r1) * p.sin(step) - params.d * p.sin(((params.R - params.r1) / params.r1) * step);\n              break;\n            case \"Epitrochoid\":\n              x = (params.R + params.r1) * p.cos(step) - params.d * p.cos(((params.R + params.r1) / params.r1) * step);\n              y = (params.R + params.r1) * p.sin(step) - params.d * p.sin(((params.R + params.r1) / params.r1) * step);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * step);\n              x = rhodoneaRadius * p.cos(step);\n              y = rhodoneaRadius * p.sin(step);\n              break;\n            case \"Lissajous\":\n              x = params.A * p.sin(params.a * step + params.delta);\n              y = params.B * p.sin(params.b * step);\n              break;\n            case \"OrganicFlow\":\n              let baseRadius = 150;\n              let noiseTime = step * params.speed;\n              \n              let radius = baseRadius;\n              for (let i = 0; i < params.waves; i++) {\n                let noiseFactor = p.noise(\n                  p.cos(step + i) * params.noiseScale, \n                  p.sin(step + i) * params.noiseScale, \n                  noiseTime\n                );\n                radius += p.sin(step * (i+1) * params.complexity) * params.amplitude * noiseFactor;\n              }\n              \n              x = radius * p.cos(step);\n              y = radius * p.sin(step);\n              \n              x += p.sin(step * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n              y += p.cos(step * 2.7) * 20 * p.noise(0, noiseTime * 2);\n              break;\n          }\n          \n          // Apply scaling\n          let scaleFactor = 1.0; // Fixed scale factor\n          x *= scaleFactor;\n          y *= scaleFactor;\n          \n          // Draw line segment\n          if (prevX !== null) {\n            p.line(prevX, prevY, x, y);\n          }\n          \n          prevX = x;\n          prevY = y;\n        }\n      };\n      \n      // Capture rotating animation frames\n      const captureRotatingAnimation = () => {\n        // Store the current state\n        const currentBackground = p.color(0);\n        const currentStroke = currentColor;\n        \n        // We'll create 30 frames for a smooth animation\n        rotatingFrames = [];\n        \n        // Draw the complete pattern once with full colors\n        p.push();\n        p.background(0);\n        p.translate(p.width / 2, p.height / 2);\n        drawCompletePattern();\n        p.pop();\n        \n        // Remember this completed pattern\n        const basePattern = p.get();\n        \n        // Create 30 frames rotating the pattern around 360Â°\n        for (let angle = 0; angle < 360; angle += 12) { // 12Â° steps = 30 frames\n          // Clear the canvas\n          p.background(0);\n          \n          // Draw the full pattern rotated\n          p.push();\n          p.imageMode(p.CENTER);\n          p.translate(p.width / 2, p.height / 2);\n          p.rotate(p.radians(angle));\n          p.image(basePattern, 0, 0);\n          p.pop();\n          \n          // Capture the frame\n          rotatingFrames.push(p.get());\n        }\n        \n        return rotatingFrames;\n      };\n      \n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        \n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Rhodonea - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Epitrochoid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Hypotrochoid - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // OrganicFlow - Super Rare 8%\n        } else {\n          shapeIndex = 4; // Lissajous - Legendary 2%\n        }\n        \n        params = {}; // Reset params\n        \n        switch(shapeIndex) {\n          case 0: // Rhodonea (now Common)\n            shapeType = \"Rhodonea\";\n            params.k = p.int(p.random(4, 9));\n            \n            maxT = (params.k % 2 === 0) ? p.TWO_PI : p.PI;\n            break;\n            \n          case 1: // Epitrochoid (remains Uncommon)\n            shapeType = \"Epitrochoid\";\n            params.R = p.random(200, 300);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(80, 160);\n            \n            const gcd2 = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd2);\n            break;\n            \n          case 2: // Hypotrochoid (now Rare)\n            shapeType = \"Hypotrochoid\";\n            params.R = p.random(250, 400);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(100, 180);\n            \n            const gcd = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd);\n            break;\n            \n          case 3: // OrganicFlow (now Super Rare)\n            shapeType = \"OrganicFlow\";\n            params.complexity = p.random(0.5, 2.5);\n            params.speed = p.random(0.01, 0.05);\n            params.waves = p.int(p.random(3, 7));\n            params.amplitude = p.random(100, 250);\n            params.noiseScale = p.random(0.005, 0.02);\n            \n            // These need longer time to develop\n            maxT = p.TWO_PI * 20;\n            break;\n            \n          case 4: // Lissajous (now Legendary)\n            shapeType = \"Lissajous\";\n            params.A = p.random(200, 350);\n            params.B = p.random(200, 350);\n            params.a = p.int(p.random(3, 7));\n            params.b = p.int(p.random(3, 7));\n            params.delta = p.random(0, p.PI);\n            \n            // Find cycle length\n            const lcm = (params.a * params.b) / findGCD(params.a, params.b);\n            maxT = p.TWO_PI * lcm;\n            break;\n        }\n        \n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 10);\n        \n        rarityText = shapeRarity[shapeType];\n        \n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: { ...params }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        p.background(0);\n        p.randomSeed(currentSeed);\n        \n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        \n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n        \n        // Reset drawing variables\n        rotatingFrames = [];\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        startColorIndex = 0;\n        endColorIndex = 1;\n        colorTransition = 0;\n        \n        // Pick a shape type\n        selectShapeType();\n        \n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        \n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n        \n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        \n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function() {\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        \n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n        \n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n        \n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function() {\n        // Clear canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n        \n        p.push();\n        p.translate(p.width / 2, p.height / 2);\n        \n        // Add rotation\n        let fullRotationAngle = (t / maxT) * p.TWO_PI;\n        p.rotate(fullRotationAngle);\n        \n        // Gradient between colors\n        let startCol = p.color(palette.colors[startColorIndex]);\n        let endCol = p.color(palette.colors[endColorIndex]);\n        currentColor = p.lerpColor(startCol, endCol, colorTransition);\n        p.stroke(currentColor);\n\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch(shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r1) * p.cos(t) + params.d * p.cos(((params.R - params.r1) / params.r1) * t);\n            y = (params.R - params.r1) * p.sin(t) - params.d * p.sin(((params.R - params.r1) / params.r1) * t);\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r1) * p.cos(t) - params.d * p.cos(((params.R + params.r1) / params.r1) * t);\n            y = (params.R + params.r1) * p.sin(t) - params.d * p.sin(((params.R + params.r1) / params.r1) * t);\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = 250 * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n            break;\n          case \"OrganicFlow\":\n            // Create organic, flowing amoeba-like patterns\n            // Using perlin noise for organic movement\n            let baseRadius = 150;\n            let noiseTime = t * params.speed;\n            \n            // Create multiple wave layers with perlin noise\n            let radius = baseRadius;\n            for (let i = 0; i < params.waves; i++) {\n              let noiseFactor = p.noise(\n                p.cos(t + i) * params.noiseScale, \n                p.sin(t + i) * params.noiseScale, \n                noiseTime\n              );\n              radius += p.sin(t * (i+1) * params.complexity) * params.amplitude * noiseFactor;\n            }\n            \n            // Convert to x,y coordinates\n            x = radius * p.cos(t);\n            y = radius * p.sin(t);\n            \n            // Add some variation to make it more organic\n            x += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n            y += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n            break;\n        }\n\n        // Apply scaling effects - simplified to just 1.0 scale\n        let scaleFactor = 1.0;\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment\n        if (prevX !== null) {\n          p.line(prevX, prevY, x, y);\n        }\n        \n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n          \n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n          \n          // Re-calculate based on shape type with updated t\n          switch(shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r1) * p.cos(t) + params.d * p.cos(((params.R - params.r1) / params.r1) * t);\n              nextY = (params.R - params.r1) * p.sin(t) - params.d * p.sin(((params.R - params.r1) / params.r1) * t);\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r1) * p.cos(t) - params.d * p.cos(((params.R + params.r1) / params.r1) * t);\n              nextY = (params.R + params.r1) * p.sin(t) - params.d * p.sin(((params.R + params.r1) / params.r1) * t);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n              break;\n            case \"OrganicFlow\":\n              // Create organic, flowing amoeba-like patterns for this step\n              let baseRadius = 150;\n              let noiseTime = t * params.speed;\n              \n              // Create multiple wave layers with perlin noise\n              let radius = baseRadius;\n              for (let i = 0; i < params.waves; i++) {\n                let noiseFactor = p.noise(\n                  p.cos(t + i) * params.noiseScale, \n                  p.sin(t + i) * params.noiseScale, \n                  noiseTime\n                );\n                radius += p.sin(t * (i+1) * params.complexity) * params.amplitude * noiseFactor;\n              }\n              \n              // Convert to x,y coordinates\n              nextX = radius * p.cos(t);\n              nextY = radius * p.sin(t);\n              \n              // Add some variation to make it more organic\n              nextX += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n              nextY += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n              break;\n          }\n          \n          // Apply scaling effects - simplified to just 1.0 scale\n          let scaleFactor = 1.0;\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n          \n          // Draw the line\n          p.line(prevX, prevY, nextX, nextY);\n          \n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n        \n        // Increment time\n        t += 0.015;\n        \n        // Update global rotation\n        globalAngle = (t / maxT) * p.TWO_PI;\n        \n        // Update progress\n        const currentProgress = Math.min(100, Math.round((t / maxT) * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n        \n        // Gradually transition color\n        colorTransition += 0.003;\n        if (colorTransition >= 1) {\n          startColorIndex = endColorIndex;\n          endColorIndex = (endColorIndex + 1) % palette.colors.length;\n          colorTransition = 0;\n        }\n\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n          \n          // Create the rotating animation frames\n          const animatedFrames = captureRotatingAnimation();\n          \n          // Notify parent that drawing is complete\n          const finalImage = p.get();\n          onDrawingComplete && onDrawingComplete(finalImage, animatedFrames);\n        }\n        \n        p.pop();\n      };\n      \n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n      \n      // Change to a specific seed\n      p.setSeed = (newSeed) => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n    \n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return (\n    <div className=\"spiro-canvas-container\">\n      <div ref={canvasRef} className=\"canvas-wrapper\"></div>\n      {isDrawing && (\n        <div className=\"progress-bar-container\">\n          <div className=\"progress-bar\" style={{ width: `${progress}%` }}></div>\n          <span className=\"progress-text\">{progress}%</span>\n        </div>\n      )}\n      {!isDrawing && (\n        <div className=\"canvas-complete\">\n          <span>Drawing complete!</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpiroCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}