{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/pages/Create.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SpiroCanvas from '../components/SpiroCanvas';\nimport WalletConnect from '../components/WalletConnect';\nimport { isSeedAvailable, reserveSeed, getMintedCount, findAvailableSeed, saveUserNFT } from '../services/nftService';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Create = () => {\n  _s();\n  // Spirograph state\n  const [seed, setSeed] = useState(null);\n  const [shape, setShape] = useState(null);\n  const [palette, setPalette] = useState(null);\n  const [image, setImage] = useState(null);\n  const [animatedGif, setAnimatedGif] = useState(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [strokeWeight] = useState(1); // Fixed to 1 per request\n\n  // NFT and wallet state\n  const [isMinting, setIsMinting] = useState(false);\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [hasToken, setHasToken] = useState(false);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mintStatus, setMintStatus] = useState(null); // 'success', 'error', or null\n  const [mintedCount, setMintedCount] = useState(0);\n  const [availabilityMessage, setAvailabilityMessage] = useState('');\n\n  // Check NFT availability on load\n  useEffect(() => {\n    setMintedCount(getMintedCount());\n  }, []);\n\n  // Check seed availability when it changes\n  useEffect(() => {\n    if (seed) {\n      const available = isSeedAvailable(seed);\n      if (!available) {\n        setAvailabilityMessage('This design has already been minted! Generate a new one.');\n      } else {\n        setAvailabilityMessage('');\n      }\n    }\n  }, [seed]);\n\n  // Handle wallet connection\n  const handleWalletConnect = (address, tokenOwnership) => {\n    setWalletAddress(address);\n    setIsWalletConnected(!!address);\n    setHasToken(tokenOwnership);\n  };\n\n  // Handle shape change\n  const handleShapeChange = shapeData => {\n    setShape(shapeData);\n  };\n\n  // Handle palette change\n  const handlePaletteChange = paletteData => {\n    setPalette(paletteData);\n  };\n\n  // Handle drawing completion\n  const handleDrawingComplete = finalImage => {\n    // Store the final image\n    setImage(finalImage);\n\n    // Convert to data URL\n    const imageUrl = finalImage.canvas ? finalImage.canvas.toDataURL() : null;\n    setAnimatedGif(imageUrl);\n\n    // Show preview\n    setShowPreview(true);\n  };\n\n  // Generate a new random design\n  const handleGenerateNew = () => {\n    // Clear previous state\n    setImage(null);\n    setAnimatedGif(null);\n    setShowPreview(false);\n    setMintStatus(null);\n    setAvailabilityMessage('');\n\n    // Find an available seed\n    const newSeed = findAvailableSeed();\n    if (newSeed) {\n      setSeed(newSeed);\n    } else {\n      setAvailabilityMessage('All 10,000 designs have been minted!');\n    }\n  };\n\n  // Mint the current design as an NFT\n  const handleMint = async () => {\n    // Can't mint without wallet or token\n    if (!isWalletConnected) {\n      alert(\"Please connect your wallet first!\");\n      return;\n    }\n    if (!hasToken) {\n      alert(\"You need the special token to mint for free!\");\n      return;\n    }\n\n    // Ensure we have a completed drawing\n    if (!image) {\n      alert(\"Please wait for the drawing to complete before minting.\");\n      return;\n    }\n\n    // Check availability\n    if (!isSeedAvailable(seed)) {\n      setAvailabilityMessage('This design has already been minted! Generate a new one.');\n      return;\n    }\n    try {\n      var _shape$params, _shape$params2, _shape$params3, _image$canvas, _image$canvas$toDataU;\n      setIsMinting(true);\n      setMintStatus(null);\n\n      // Reserve the seed\n      const reservationResult = reserveSeed(seed);\n      if (!reservationResult.success) {\n        throw new Error(reservationResult.message);\n      }\n\n      // In a real implementation, this would upload to IPFS and mint an NFT\n      console.log(\"Minting with parameters:\", {\n        seed,\n        shape: shape === null || shape === void 0 ? void 0 : shape.type,\n        rarity: shape === null || shape === void 0 ? void 0 : shape.rarity,\n        palette: palette === null || palette === void 0 ? void 0 : palette.name,\n        animated: true // This is now always an animated NFT\n      });\n\n      // Simulate minting process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Success!\n      setMintStatus('success');\n      setMintedCount(getMintedCount());\n\n      // Store in local storage for collection page\n      saveUserNFT({\n        id: seed,\n        params: {\n          shape: shape === null || shape === void 0 ? void 0 : shape.type,\n          rarity: shape === null || shape === void 0 ? void 0 : shape.rarity,\n          fixedRadius: shape === null || shape === void 0 ? void 0 : (_shape$params = shape.params) === null || _shape$params === void 0 ? void 0 : _shape$params.R,\n          movingRadius: shape === null || shape === void 0 ? void 0 : (_shape$params2 = shape.params) === null || _shape$params2 === void 0 ? void 0 : _shape$params2.r1,\n          offset: shape === null || shape === void 0 ? void 0 : (_shape$params3 = shape.params) === null || _shape$params3 === void 0 ? void 0 : _shape$params3.d,\n          colors: palette === null || palette === void 0 ? void 0 : palette.colors,\n          strokeWeight: strokeWeight\n        },\n        imageUrl: (image === null || image === void 0 ? void 0 : (_image$canvas = image.canvas) === null || _image$canvas === void 0 ? void 0 : (_image$canvas$toDataU = _image$canvas.toDataURL) === null || _image$canvas$toDataU === void 0 ? void 0 : _image$canvas$toDataU.call(_image$canvas)) || null,\n        animatedGifUrl: animatedGif,\n        // Store the image URL\n        mintDate: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error(\"Error minting NFT:\", error);\n      setMintStatus('error');\n      setAvailabilityMessage(error.message || 'Error minting NFT');\n    } finally {\n      setIsMinting(false);\n    }\n  };\n\n  // Download the current image\n  const handleDownloadImage = () => {\n    if (animatedGif) {\n      const link = document.createElement('a');\n      link.href = animatedGif;\n      link.download = `Spirograph_${seed}.png`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Create Your Spirograph NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Design your unique mathematical pattern and mint it as an animated NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-availability\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"minted-count\",\n          children: [mintedCount, \"/10,000 Minted\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WalletConnect, {\n          onConnect: handleWalletConnect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-section\",\n        children: [!showPreview ? /*#__PURE__*/_jsxDEV(SpiroCanvas, {\n          seed: seed,\n          setSeed: setSeed,\n          onShapeChange: handleShapeChange,\n          onPaletteChange: handlePaletteChange,\n          onDrawingComplete: handleDrawingComplete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Your Animated Spirograph\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"animation-preview\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: animatedGif,\n              alt: \"Animated Spirograph\",\n              className: \"preview-gif rotating-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preview-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleDownloadImage,\n              className: \"btn-secondary\",\n              children: \"Download Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleMint,\n              className: \"btn-primary\",\n              disabled: isMinting || !isSeedAvailable(seed),\n              children: isMinting ? 'Minting...' : 'Mint as NFT'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), mintStatus === 'success' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mint-success\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Success! \\uD83C\\uDF89\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Your Spirograph NFT has been minted and sent to your wallet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Share your creation with friends!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"share-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"share-twitter\",\n              children: \"Share on X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"share-copy\",\n              children: \"Copy Link\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleGenerateNew,\n            className: \"btn-primary mt-3\",\n            children: \"Create Another\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this), mintStatus === 'error' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mint-error\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Error Minting\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"There was a problem creating your NFT. Please try again.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setMintStatus(null),\n            className: \"btn-secondary mt-2\",\n            children: \"Try Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spirograph-info\",\n          children: seed && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Your Spirograph\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Seed:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 20\n              }, this), \" #\", seed]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 17\n            }, this), shape && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Shape:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 22\n              }, this), \" \", shape.type, \" (\", shape.rarity, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 19\n            }, this), palette && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Palette:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 22\n              }, this), \" \", palette.name, \" (\", palette.rarity, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 19\n            }, this), availabilityMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"availability-message\",\n              children: availabilityMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-buttons\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-primary\",\n            onClick: handleGenerateNew,\n            disabled: isMinting,\n            children: \"Generate New Design\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"token-gate-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Token Gate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This is a token-gated experience. You need to own our special token to mint NFTs for free.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this), !isWalletConnected && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Connect your wallet to check if you have the token.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this), isWalletConnected && !hasToken && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"You don't have the required token yet.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"get-token-button\",\n              children: \"Get Token\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this), isWalletConnected && hasToken && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"token-success\",\n            children: \"You have the token! Mint as many NFTs as you want.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n_s(Create, \"J8BWNKjgAoWpiCYJGG2RClGWrfI=\");\n_c = Create;\nexport default Create;\nvar _c;\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"names":["React","useState","useEffect","SpiroCanvas","WalletConnect","isSeedAvailable","reserveSeed","getMintedCount","findAvailableSeed","saveUserNFT","jsxDEV","_jsxDEV","Fragment","_Fragment","Create","_s","seed","setSeed","shape","setShape","palette","setPalette","image","setImage","animatedGif","setAnimatedGif","showPreview","setShowPreview","strokeWeight","isMinting","setIsMinting","isWalletConnected","setIsWalletConnected","hasToken","setHasToken","walletAddress","setWalletAddress","mintStatus","setMintStatus","mintedCount","setMintedCount","availabilityMessage","setAvailabilityMessage","available","handleWalletConnect","address","tokenOwnership","handleShapeChange","shapeData","handlePaletteChange","paletteData","handleDrawingComplete","finalImage","imageUrl","canvas","toDataURL","handleGenerateNew","newSeed","handleMint","alert","_shape$params","_shape$params2","_shape$params3","_image$canvas","_image$canvas$toDataU","reservationResult","success","Error","message","console","log","type","rarity","name","animated","Promise","resolve","setTimeout","id","params","fixedRadius","R","movingRadius","r1","offset","d","colors","call","animatedGifUrl","mintDate","Date","toISOString","error","handleDownloadImage","link","document","createElement","href","download","body","appendChild","click","removeChild","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onConnect","onShapeChange","onPaletteChange","onDrawingComplete","src","alt","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/pages/Create.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SpiroCanvas from '../components/SpiroCanvas';\nimport WalletConnect from '../components/WalletConnect';\nimport { \n  isSeedAvailable, \n  reserveSeed, \n  getMintedCount,\n  findAvailableSeed,\n  saveUserNFT\n} from '../services/nftService';\nimport '../styles/components.css';\n\nconst Create = () => {\n  // Spirograph state\n  const [seed, setSeed] = useState(null);\n  const [shape, setShape] = useState(null);\n  const [palette, setPalette] = useState(null);\n  const [image, setImage] = useState(null);\n  const [animatedGif, setAnimatedGif] = useState(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [strokeWeight] = useState(1); // Fixed to 1 per request\n  \n  // NFT and wallet state\n  const [isMinting, setIsMinting] = useState(false);\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [hasToken, setHasToken] = useState(false);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mintStatus, setMintStatus] = useState(null); // 'success', 'error', or null\n  const [mintedCount, setMintedCount] = useState(0);\n  const [availabilityMessage, setAvailabilityMessage] = useState('');\n\n  // Check NFT availability on load\n  useEffect(() => {\n    setMintedCount(getMintedCount());\n  }, []);\n\n  // Check seed availability when it changes\n  useEffect(() => {\n    if (seed) {\n      const available = isSeedAvailable(seed);\n      if (!available) {\n        setAvailabilityMessage('This design has already been minted! Generate a new one.');\n      } else {\n        setAvailabilityMessage('');\n      }\n    }\n  }, [seed]);\n\n  // Handle wallet connection\n  const handleWalletConnect = (address, tokenOwnership) => {\n    setWalletAddress(address);\n    setIsWalletConnected(!!address);\n    setHasToken(tokenOwnership);\n  };\n\n  // Handle shape change\n  const handleShapeChange = (shapeData) => {\n    setShape(shapeData);\n  };\n\n  // Handle palette change\n  const handlePaletteChange = (paletteData) => {\n    setPalette(paletteData);\n  };\n\n  // Handle drawing completion\n  const handleDrawingComplete = (finalImage) => {\n    // Store the final image\n    setImage(finalImage);\n    \n    // Convert to data URL\n    const imageUrl = finalImage.canvas ? finalImage.canvas.toDataURL() : null;\n    setAnimatedGif(imageUrl);\n    \n    // Show preview\n    setShowPreview(true);\n  };\n\n  // Generate a new random design\n  const handleGenerateNew = () => {\n    // Clear previous state\n    setImage(null);\n    setAnimatedGif(null);\n    setShowPreview(false);\n    setMintStatus(null);\n    setAvailabilityMessage('');\n    \n    // Find an available seed\n    const newSeed = findAvailableSeed();\n    \n    if (newSeed) {\n      setSeed(newSeed);\n    } else {\n      setAvailabilityMessage('All 10,000 designs have been minted!');\n    }\n  };\n\n  // Mint the current design as an NFT\n  const handleMint = async () => {\n    // Can't mint without wallet or token\n    if (!isWalletConnected) {\n      alert(\"Please connect your wallet first!\");\n      return;\n    }\n\n    if (!hasToken) {\n      alert(\"You need the special token to mint for free!\");\n      return;\n    }\n\n    // Ensure we have a completed drawing\n    if (!image) {\n      alert(\"Please wait for the drawing to complete before minting.\");\n      return;\n    }\n    \n    // Check availability\n    if (!isSeedAvailable(seed)) {\n      setAvailabilityMessage('This design has already been minted! Generate a new one.');\n      return;\n    }\n\n    try {\n      setIsMinting(true);\n      setMintStatus(null);\n\n      // Reserve the seed\n      const reservationResult = reserveSeed(seed);\n      \n      if (!reservationResult.success) {\n        throw new Error(reservationResult.message);\n      }\n      \n      // In a real implementation, this would upload to IPFS and mint an NFT\n      console.log(\"Minting with parameters:\", {\n        seed,\n        shape: shape?.type,\n        rarity: shape?.rarity,\n        palette: palette?.name,\n        animated: true // This is now always an animated NFT\n      });\n\n      // Simulate minting process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Success!\n      setMintStatus('success');\n      setMintedCount(getMintedCount());\n      \n      // Store in local storage for collection page\n      saveUserNFT({\n        id: seed,\n        params: {\n          shape: shape?.type,\n          rarity: shape?.rarity,\n          fixedRadius: shape?.params?.R,\n          movingRadius: shape?.params?.r1,\n          offset: shape?.params?.d,\n          colors: palette?.colors,\n          strokeWeight: strokeWeight\n        },\n        imageUrl: image?.canvas?.toDataURL?.() || null,\n        animatedGifUrl: animatedGif, // Store the image URL\n        mintDate: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error(\"Error minting NFT:\", error);\n      setMintStatus('error');\n      setAvailabilityMessage(error.message || 'Error minting NFT');\n    } finally {\n      setIsMinting(false);\n    }\n  };\n\n  // Download the current image\n  const handleDownloadImage = () => {\n    if (animatedGif) {\n      const link = document.createElement('a');\n      link.href = animatedGif;\n      link.download = `Spirograph_${seed}.png`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  return (\n    <div className=\"create-page\">\n      <div className=\"create-header\">\n        <h1>Create Your Spirograph NFT</h1>\n        <p>Design your unique mathematical pattern and mint it as an animated NFT</p>\n        <div className=\"nft-availability\">\n          <span className=\"minted-count\">{mintedCount}/10,000 Minted</span>\n          <WalletConnect onConnect={handleWalletConnect} />\n        </div>\n      </div>\n\n      <div className=\"create-container\">\n        <div className=\"canvas-section\">\n          {!showPreview ? (\n            <SpiroCanvas\n              seed={seed}\n              setSeed={setSeed}\n              onShapeChange={handleShapeChange}\n              onPaletteChange={handlePaletteChange}\n              onDrawingComplete={handleDrawingComplete}\n            />\n          ) : (\n            <div className=\"preview-container\">\n              <h3>Your Animated Spirograph</h3>\n              <div className=\"animation-preview\">\n                <img \n                  src={animatedGif} \n                  alt=\"Animated Spirograph\" \n                  className=\"preview-gif rotating-image\" \n                />\n              </div>\n              <div className=\"preview-actions\">\n                <button onClick={handleDownloadImage} className=\"btn-secondary\">Download Image</button>\n                <button \n                  onClick={handleMint}\n                  className=\"btn-primary\"\n                  disabled={isMinting || !isSeedAvailable(seed)}\n                >\n                  {isMinting ? 'Minting...' : 'Mint as NFT'}\n                </button>\n              </div>\n            </div>\n          )}\n          \n          {mintStatus === 'success' && (\n            <div className=\"mint-success\">\n              <h3>Success! 🎉</h3>\n              <p>Your Spirograph NFT has been minted and sent to your wallet.</p>\n              <p>Share your creation with friends!</p>\n              <div className=\"share-buttons\">\n                <button className=\"share-twitter\">Share on X</button>\n                <button className=\"share-copy\">Copy Link</button>\n              </div>\n              <button onClick={handleGenerateNew} className=\"btn-primary mt-3\">Create Another</button>\n            </div>\n          )}\n          \n          {mintStatus === 'error' && (\n            <div className=\"mint-error\">\n              <h3>Error Minting</h3>\n              <p>There was a problem creating your NFT. Please try again.</p>\n              <button onClick={() => setMintStatus(null)} className=\"btn-secondary mt-2\">Try Again</button>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"controls-section\">\n          <div className=\"spirograph-info\">\n            {seed && (\n              <>\n                <h3>Your Spirograph</h3>\n                <p><strong>Seed:</strong> #{seed}</p>\n                {shape && (\n                  <p><strong>Shape:</strong> {shape.type} ({shape.rarity})</p>\n                )}\n                {palette && (\n                  <p><strong>Palette:</strong> {palette.name} ({palette.rarity})</p>\n                )}\n                \n                {availabilityMessage && (\n                  <p className=\"availability-message\">{availabilityMessage}</p>\n                )}\n              </>\n            )}\n          </div>\n          \n          <div className=\"action-buttons\">\n            <button \n              className=\"btn-primary\" \n              onClick={handleGenerateNew}\n              disabled={isMinting}\n            >\n              Generate New Design\n            </button>\n          </div>\n          \n          <div className=\"token-gate-info\">\n            <h3>Token Gate</h3>\n            <p>This is a token-gated experience. You need to own our special token to mint NFTs for free.</p>\n            {!isWalletConnected && (\n              <p>Connect your wallet to check if you have the token.</p>\n            )}\n            {isWalletConnected && !hasToken && (\n              <div>\n                <p>You don't have the required token yet.</p>\n                <button className=\"get-token-button\">Get Token</button>\n              </div>\n            )}\n            {isWalletConnected && hasToken && (\n              <p className=\"token-success\">You have the token! Mint as many NFTs as you want.</p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Create;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}