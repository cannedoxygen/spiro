{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/components/WalletConnect.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport '../styles/components.css';\n\n// ERC-721 token contract ABI (minimal for balance checking)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOKEN_ABI = [\n// balanceOf function to check token ownership\n\"function balanceOf(address owner) view returns (uint256)\",\n// name function to get token name\n\"function name() view returns (string)\",\n// symbol function to get token symbol\n\"function symbol() view returns (string)\"];\n\n// Replace with your actual token contract address on Base network\nconst TOKEN_CONTRACT_ADDRESS = \"0x0000000000000000000000000000000000000000\"; // REPLACE WITH REAL ADDRESS\n\n// Base network configuration\nconst BASE_NETWORK = {\n  chainId: \"0x2105\",\n  // Hex for 8453 (Base Mainnet)\n  chainName: 'Base',\n  nativeCurrency: {\n    name: 'ETH',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  rpcUrls: ['https://mainnet.base.org'],\n  blockExplorerUrls: ['https://basescan.org']\n};\nconst WalletConnect = ({\n  onConnect\n}) => {\n  _s();\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [hasToken, setHasToken] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n  const [tokenInfo, setTokenInfo] = useState(null);\n  const [showWalletOptions, setShowWalletOptions] = useState(false);\n\n  // Check if wallet is already connected\n  const checkIfWalletIsConnected = async () => {\n    try {\n      // Check if ethereum object exists (any provider)\n      const {\n        ethereum\n      } = window;\n      if (!ethereum) {\n        console.log('No wallet found.');\n        return;\n      }\n      console.log('Wallet provider found');\n\n      // Check if we're already connected\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Found an authorized account:', account);\n        setWalletAddress(account);\n        await checkNetwork();\n        await checkTokenOwnership(account);\n      }\n    } catch (error) {\n      console.error('Error checking wallet connection:', error);\n      setError(\"Error connecting to wallet\");\n    }\n  };\n\n  // Check if we're on the correct network (Base)\n  const checkNetwork = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      const chainId = await ethereum.request({\n        method: 'eth_chainId'\n      });\n      console.log(\"Current Chain ID:\", chainId);\n      if (chainId !== BASE_NETWORK.chainId) {\n        // Prompt user to switch to Base\n        try {\n          await ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{\n              chainId: BASE_NETWORK.chainId\n            }]\n          });\n        } catch (switchError) {\n          // This error code indicates that the chain has not been added to the wallet\n          if (switchError.code === 4902) {\n            try {\n              await ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [BASE_NETWORK]\n              });\n            } catch (addError) {\n              console.error('Error adding Base network:', addError);\n              setError(\"Failed to add Base network to your wallet\");\n            }\n          } else {\n            console.error('Error switching to Base network:', switchError);\n            setError(\"Failed to switch to Base network\");\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error checking network:', error);\n    }\n  };\n\n  // Connect to MetaMask\n  const connectMetaMask = async () => {\n    try {\n      setIsConnecting(true);\n      setError(null);\n      setShowWalletOptions(false);\n\n      // Check if MetaMask is installed\n      if (!window.ethereum || !window.ethereum.isMetaMask) {\n        setError(\"MetaMask is not installed. Please install MetaMask first.\");\n        setIsConnecting(false);\n        return;\n      }\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Connected to account:', account);\n        setWalletAddress(account);\n\n        // Check if we're on the right network\n        await checkNetwork();\n\n        // Check token ownership\n        await checkTokenOwnership(account);\n      }\n    } catch (error) {\n      console.error('Error connecting to MetaMask:', error);\n      setError(\"Failed to connect to MetaMask\");\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Connect to Phantom\n  const connectPhantom = async () => {\n    try {\n      var _window$phantom;\n      setIsConnecting(true);\n      setError(null);\n      setShowWalletOptions(false);\n\n      // Check if Phantom is installed\n      if (!window.phantom || !window.phantom.ethereum) {\n        setError(\"Phantom is not installed. Please install Phantom wallet first.\");\n        setIsConnecting(false);\n        return;\n      }\n\n      // Use Phantom provider\n      const phantomProvider = (_window$phantom = window.phantom) === null || _window$phantom === void 0 ? void 0 : _window$phantom.ethereum;\n\n      // Request account access\n      const accounts = await phantomProvider.request({\n        method: 'eth_requestAccounts'\n      });\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Connected to Phantom account:', account);\n        setWalletAddress(account);\n\n        // Check if we're on the right network (using the Phantom provider)\n        const chainId = await phantomProvider.request({\n          method: 'eth_chainId'\n        });\n        if (chainId !== BASE_NETWORK.chainId) {\n          // Add or switch to Base network\n          try {\n            await phantomProvider.request({\n              method: 'wallet_addEthereumChain',\n              params: [BASE_NETWORK]\n            });\n          } catch (error) {\n            console.error('Error adding Base network to Phantom:', error);\n            setError(\"Failed to add Base network to Phantom\");\n            setIsConnecting(false);\n            return;\n          }\n        }\n\n        // Check token ownership\n        await checkTokenOwnership(account, phantomProvider);\n      }\n    } catch (error) {\n      console.error('Error connecting to Phantom:', error);\n      setError(\"Failed to connect to Phantom\");\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Connect to Coinbase Wallet\n  const connectCoinbaseWallet = async () => {\n    try {\n      setIsConnecting(true);\n      setError(null);\n      setShowWalletOptions(false);\n\n      // Check if Coinbase Wallet is installed\n      if (!window.ethereum || !window.ethereum.isCoinbaseWallet) {\n        setError(\"Coinbase Wallet is not installed. Please install Coinbase Wallet first.\");\n        setIsConnecting(false);\n        return;\n      }\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Connected to Coinbase Wallet account:', account);\n        setWalletAddress(account);\n\n        // Check if we're on the right network\n        await checkNetwork();\n\n        // Check token ownership\n        await checkTokenOwnership(account);\n      }\n    } catch (error) {\n      console.error('Error connecting to Coinbase Wallet:', error);\n      setError(\"Failed to connect to Coinbase Wallet\");\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = async () => {\n    try {\n      setWalletAddress(null);\n      setHasToken(false);\n      setTokenInfo(null);\n      onConnect(null, false);\n    } catch (error) {\n      console.error('Error disconnecting wallet:', error);\n    }\n  };\n\n  // Check if user owns required token\n  const checkTokenOwnership = async (address, provider = window.ethereum) => {\n    try {\n      if (!provider) return false;\n      const ethersProvider = new ethers.providers.Web3Provider(provider);\n      const tokenContract = new ethers.Contract(TOKEN_CONTRACT_ADDRESS, TOKEN_ABI, ethersProvider);\n\n      // Get token info\n      try {\n        const name = await tokenContract.name();\n        const symbol = await tokenContract.symbol();\n        setTokenInfo({\n          name,\n          symbol\n        });\n      } catch (error) {\n        console.error('Error getting token info:', error);\n        // Continue even if we can't get token info\n      }\n\n      // Check token balance\n      const balance = await tokenContract.balanceOf(address);\n      const ownsToken = balance.gt(0); // Greater than 0\n\n      console.log(`Token ownership for ${address}: ${ownsToken ? 'Yes' : 'No'} (${balance.toString()} tokens)`);\n      setHasToken(ownsToken);\n\n      // Notify parent component\n      onConnect(address, ownsToken);\n      return ownsToken;\n    } catch (error) {\n      console.error('Error checking token ownership:', error);\n\n      // For development/testing only: simulate token ownership with 70% chance\n      // Remove this in production!\n      const simulateOwnership = Math.random() > 0.3;\n      setHasToken(simulateOwnership);\n      onConnect(address, simulateOwnership);\n      return simulateOwnership;\n    }\n  };\n\n  // Check wallet connection on component mount\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Format wallet address for display\n  const formatAddress = address => {\n    if (!address) return '';\n    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;\n  };\n\n  // Detect what type of wallet is connected (for display purposes)\n  const getWalletType = () => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) return 'Wallet';\n    if (ethereum.isPhantom) return 'Phantom';\n    if (ethereum.isMetaMask) return 'MetaMask';\n    if (ethereum.isCoinbaseWallet) return 'Coinbase Wallet';\n    return 'Wallet';\n  };\n\n  // Toggle wallet options\n  const toggleWalletOptions = () => {\n    setShowWalletOptions(!showWalletOptions);\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wallet-connect\",\n    children: [!walletAddress ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wallet-connect-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"connect-button\",\n        onClick: toggleWalletOptions,\n        disabled: isConnecting,\n        children: isConnecting ? 'Connecting...' : 'Connect Wallet'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this), showWalletOptions && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wallet-options\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connectMetaMask,\n          className: \"wallet-option\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/images/metamask.png\",\n            alt: \"MetaMask\",\n            className: \"wallet-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 17\n          }, this), \"MetaMask\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connectPhantom,\n          className: \"wallet-option\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/images/phantom.png\",\n            alt: \"Phantom\",\n            className: \"wallet-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 17\n          }, this), \"Phantom\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connectCoinbaseWallet,\n          className: \"wallet-option\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/images/coinbase.png\",\n            alt: \"Coinbase Wallet\",\n            className: \"wallet-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 17\n          }, this), \"Coinbase Wallet\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wallet-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"address-display\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"address-label\",\n          children: [getWalletType(), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"address-value\",\n          children: formatAddress(walletAddress)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this), hasToken && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"token-badge\",\n          children: \"\\u2713 Token Verified\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"disconnect-button\",\n        onClick: disconnectWallet,\n        children: \"Disconnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wallet-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 17\n    }, this), walletAddress && !hasToken && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"token-warning\",\n      children: [\"You need the gate token to mint NFTs for free.\", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://opensea.io/collection/spyro-access-token\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"get-token-link\",\n        children: \"Get Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletConnect, \"xY7L0dqAm+T2KFNxz2WgJUoH4PU=\");\n_c = WalletConnect;\nexport default WalletConnect;\nvar _c;\n$RefreshReg$(_c, \"WalletConnect\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","TOKEN_ABI","TOKEN_CONTRACT_ADDRESS","BASE_NETWORK","chainId","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","WalletConnect","onConnect","_s","walletAddress","setWalletAddress","hasToken","setHasToken","isConnecting","setIsConnecting","error","setError","tokenInfo","setTokenInfo","showWalletOptions","setShowWalletOptions","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","checkNetwork","checkTokenOwnership","params","switchError","code","addError","connectMetaMask","isMetaMask","connectPhantom","_window$phantom","phantom","phantomProvider","connectCoinbaseWallet","isCoinbaseWallet","disconnectWallet","address","provider","ethersProvider","providers","Web3Provider","tokenContract","Contract","balance","balanceOf","ownsToken","gt","toString","simulateOwnership","Math","random","formatAddress","substring","getWalletType","isPhantom","toggleWalletOptions","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","href","target","rel","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/components/WalletConnect.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport '../styles/components.css';\n\n// ERC-721 token contract ABI (minimal for balance checking)\nconst TOKEN_ABI = [\n  // balanceOf function to check token ownership\n  \"function balanceOf(address owner) view returns (uint256)\",\n  // name function to get token name\n  \"function name() view returns (string)\",\n  // symbol function to get token symbol\n  \"function symbol() view returns (string)\"\n];\n\n// Replace with your actual token contract address on Base network\nconst TOKEN_CONTRACT_ADDRESS = \"0x0000000000000000000000000000000000000000\"; // REPLACE WITH REAL ADDRESS\n\n// Base network configuration\nconst BASE_NETWORK = {\n  chainId: \"0x2105\", // Hex for 8453 (Base Mainnet)\n  chainName: 'Base',\n  nativeCurrency: {\n    name: 'ETH',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  rpcUrls: ['https://mainnet.base.org'],\n  blockExplorerUrls: ['https://basescan.org']\n};\n\nconst WalletConnect = ({ onConnect }) => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [hasToken, setHasToken] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n  const [tokenInfo, setTokenInfo] = useState(null);\n  const [showWalletOptions, setShowWalletOptions] = useState(false);\n\n  // Check if wallet is already connected\n  const checkIfWalletIsConnected = async () => {\n    try {\n      // Check if ethereum object exists (any provider)\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('No wallet found.');\n        return;\n      }\n      \n      console.log('Wallet provider found');\n      \n      // Check if we're already connected\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n      \n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Found an authorized account:', account);\n        setWalletAddress(account);\n        await checkNetwork();\n        await checkTokenOwnership(account);\n      }\n    } catch (error) {\n      console.error('Error checking wallet connection:', error);\n      setError(\"Error connecting to wallet\");\n    }\n  };\n\n  // Check if we're on the correct network (Base)\n  const checkNetwork = async () => {\n    try {\n      const { ethereum } = window;\n      \n      const chainId = await ethereum.request({ method: 'eth_chainId' });\n      console.log(\"Current Chain ID:\", chainId);\n      \n      if (chainId !== BASE_NETWORK.chainId) {\n        // Prompt user to switch to Base\n        try {\n          await ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: BASE_NETWORK.chainId }],\n          });\n        } catch (switchError) {\n          // This error code indicates that the chain has not been added to the wallet\n          if (switchError.code === 4902) {\n            try {\n              await ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [BASE_NETWORK],\n              });\n            } catch (addError) {\n              console.error('Error adding Base network:', addError);\n              setError(\"Failed to add Base network to your wallet\");\n            }\n          } else {\n            console.error('Error switching to Base network:', switchError);\n            setError(\"Failed to switch to Base network\");\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error checking network:', error);\n    }\n  };\n\n  // Connect to MetaMask\n  const connectMetaMask = async () => {\n    try {\n      setIsConnecting(true);\n      setError(null);\n      setShowWalletOptions(false);\n      \n      // Check if MetaMask is installed\n      if (!window.ethereum || !window.ethereum.isMetaMask) {\n        setError(\"MetaMask is not installed. Please install MetaMask first.\");\n        setIsConnecting(false);\n        return;\n      }\n      \n      // Request account access\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      \n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Connected to account:', account);\n        setWalletAddress(account);\n        \n        // Check if we're on the right network\n        await checkNetwork();\n        \n        // Check token ownership\n        await checkTokenOwnership(account);\n      }\n    } catch (error) {\n      console.error('Error connecting to MetaMask:', error);\n      setError(\"Failed to connect to MetaMask\");\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Connect to Phantom\n  const connectPhantom = async () => {\n    try {\n      setIsConnecting(true);\n      setError(null);\n      setShowWalletOptions(false);\n      \n      // Check if Phantom is installed\n      if (!window.phantom || !window.phantom.ethereum) {\n        setError(\"Phantom is not installed. Please install Phantom wallet first.\");\n        setIsConnecting(false);\n        return;\n      }\n      \n      // Use Phantom provider\n      const phantomProvider = window.phantom?.ethereum;\n      \n      // Request account access\n      const accounts = await phantomProvider.request({ method: 'eth_requestAccounts' });\n      \n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Connected to Phantom account:', account);\n        setWalletAddress(account);\n        \n        // Check if we're on the right network (using the Phantom provider)\n        const chainId = await phantomProvider.request({ method: 'eth_chainId' });\n        if (chainId !== BASE_NETWORK.chainId) {\n          // Add or switch to Base network\n          try {\n            await phantomProvider.request({\n              method: 'wallet_addEthereumChain',\n              params: [BASE_NETWORK],\n            });\n          } catch (error) {\n            console.error('Error adding Base network to Phantom:', error);\n            setError(\"Failed to add Base network to Phantom\");\n            setIsConnecting(false);\n            return;\n          }\n        }\n        \n        // Check token ownership\n        await checkTokenOwnership(account, phantomProvider);\n      }\n    } catch (error) {\n      console.error('Error connecting to Phantom:', error);\n      setError(\"Failed to connect to Phantom\");\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Connect to Coinbase Wallet\n  const connectCoinbaseWallet = async () => {\n    try {\n      setIsConnecting(true);\n      setError(null);\n      setShowWalletOptions(false);\n      \n      // Check if Coinbase Wallet is installed\n      if (!window.ethereum || !window.ethereum.isCoinbaseWallet) {\n        setError(\"Coinbase Wallet is not installed. Please install Coinbase Wallet first.\");\n        setIsConnecting(false);\n        return;\n      }\n      \n      // Request account access\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      \n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Connected to Coinbase Wallet account:', account);\n        setWalletAddress(account);\n        \n        // Check if we're on the right network\n        await checkNetwork();\n        \n        // Check token ownership\n        await checkTokenOwnership(account);\n      }\n    } catch (error) {\n      console.error('Error connecting to Coinbase Wallet:', error);\n      setError(\"Failed to connect to Coinbase Wallet\");\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = async () => {\n    try {\n      setWalletAddress(null);\n      setHasToken(false);\n      setTokenInfo(null);\n      onConnect(null, false);\n    } catch (error) {\n      console.error('Error disconnecting wallet:', error);\n    }\n  };\n\n  // Check if user owns required token\n  const checkTokenOwnership = async (address, provider = window.ethereum) => {\n    try {\n      if (!provider) return false;\n\n      const ethersProvider = new ethers.providers.Web3Provider(provider);\n      const tokenContract = new ethers.Contract(\n        TOKEN_CONTRACT_ADDRESS,\n        TOKEN_ABI,\n        ethersProvider\n      );\n      \n      // Get token info\n      try {\n        const name = await tokenContract.name();\n        const symbol = await tokenContract.symbol();\n        setTokenInfo({ name, symbol });\n      } catch (error) {\n        console.error('Error getting token info:', error);\n        // Continue even if we can't get token info\n      }\n      \n      // Check token balance\n      const balance = await tokenContract.balanceOf(address);\n      const ownsToken = balance.gt(0); // Greater than 0\n      \n      console.log(`Token ownership for ${address}: ${ownsToken ? 'Yes' : 'No'} (${balance.toString()} tokens)`);\n      setHasToken(ownsToken);\n      \n      // Notify parent component\n      onConnect(address, ownsToken);\n      \n      return ownsToken;\n    } catch (error) {\n      console.error('Error checking token ownership:', error);\n      \n      // For development/testing only: simulate token ownership with 70% chance\n      // Remove this in production!\n      const simulateOwnership = Math.random() > 0.3;\n      setHasToken(simulateOwnership);\n      onConnect(address, simulateOwnership);\n      \n      return simulateOwnership;\n    }\n  };\n\n  // Check wallet connection on component mount\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Format wallet address for display\n  const formatAddress = (address) => {\n    if (!address) return '';\n    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;\n  };\n\n  // Detect what type of wallet is connected (for display purposes)\n  const getWalletType = () => {\n    const { ethereum } = window;\n    \n    if (!ethereum) return 'Wallet';\n    \n    if (ethereum.isPhantom) return 'Phantom';\n    if (ethereum.isMetaMask) return 'MetaMask';\n    if (ethereum.isCoinbaseWallet) return 'Coinbase Wallet';\n    \n    return 'Wallet';\n  };\n\n  // Toggle wallet options\n  const toggleWalletOptions = () => {\n    setShowWalletOptions(!showWalletOptions);\n    setError(null);\n  };\n\n  return (\n    <div className=\"wallet-connect\">\n      {!walletAddress ? (\n        <div className=\"wallet-connect-container\">\n          <button \n            className=\"connect-button\"\n            onClick={toggleWalletOptions}\n            disabled={isConnecting}\n          >\n            {isConnecting ? 'Connecting...' : 'Connect Wallet'}\n          </button>\n          \n          {showWalletOptions && (\n            <div className=\"wallet-options\">\n              <button onClick={connectMetaMask} className=\"wallet-option\">\n                <img src=\"/images/metamask.png\" alt=\"MetaMask\" className=\"wallet-icon\" />\n                MetaMask\n              </button>\n              <button onClick={connectPhantom} className=\"wallet-option\">\n                <img src=\"/images/phantom.png\" alt=\"Phantom\" className=\"wallet-icon\" />\n                Phantom\n              </button>\n              <button onClick={connectCoinbaseWallet} className=\"wallet-option\">\n                <img src=\"/images/coinbase.png\" alt=\"Coinbase Wallet\" className=\"wallet-icon\" />\n                Coinbase Wallet\n              </button>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"wallet-info\">\n          <div className=\"address-display\">\n            <span className=\"address-label\">{getWalletType()}:</span>\n            <span className=\"address-value\">{formatAddress(walletAddress)}</span>\n            {hasToken && <span className=\"token-badge\">✓ Token Verified</span>}\n          </div>\n          <button \n            className=\"disconnect-button\"\n            onClick={disconnectWallet}\n          >\n            Disconnect\n          </button>\n        </div>\n      )}\n      \n      {error && <div className=\"wallet-error\">{error}</div>}\n      \n      {walletAddress && !hasToken && (\n        <div className=\"token-warning\">\n          You need the gate token to mint NFTs for free.\n          <a href=\"https://opensea.io/collection/spyro-access-token\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"get-token-link\">Get Token</a>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WalletConnect;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}