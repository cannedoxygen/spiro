{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx\",\n  _s = $RefreshSig$();\n// Improvement for src/components/SpiroCanvas.jsx\n// This version creates distinct layers and preserves the black background\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiroCanvas = ({\n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = p => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [{\n        name: \"Neon Mirage\",\n        colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"],\n        rarity: \"Common\"\n      }, {\n        name: \"Digital Dream\",\n        colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"],\n        rarity: \"Uncommon\"\n      }, {\n        name: \"Crystal Sunset\",\n        colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"],\n        rarity: \"Rare\"\n      }, {\n        name: \"Cyber Haze\",\n        colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"],\n        rarity: \"Super Rare\"\n      }, {\n        name: \"Pastel Vapor\",\n        colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"],\n        rarity: \"Legendary\"\n      }];\n\n      // Shape rarity distribution\n      const shapeRarity = {\n        \"Rhodonea\": \"Common\",\n        // 40%\n        \"Epitrochoid\": \"Uncommon\",\n        // 30%\n        \"Hypotrochoid\": \"Rare\",\n        // 20%\n        \"OrganicFlow\": \"Super Rare\",\n        // 8%\n        \"Lissajous\": \"Legendary\" // 2%\n      };\n\n      // Multiple layer canvases - NEW!\n      let mainCanvas; // Main visible canvas with black background\n      let layerCanvases = []; // Array of layer graphics for each color\n      let finalOutput; // Final combined output\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let currentColorIndex = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n\n      // Layer tracking\n      let totalLayers = 5; // Match number of colors in palette\n      let currentLayer = 0;\n      let layerCompletionPoints = []; // Points at which to switch layers\n\n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Calculate the maximum boundaries of the pattern to ensure it fits\n      const calculatePatternBoundaries = () => {\n        let maxX = 0;\n        let maxY = 0;\n\n        // Sample many points to find the maximum extent\n        for (let step = 0; step < maxT; step += 0.1) {\n          let x = 0;\n          let y = 0;\n\n          // Calculate position based on shape type\n          switch (shapeType) {\n            case \"Hypotrochoid\":\n              x = (params.R - params.r1) * p.cos(step) + params.d * p.cos((params.R - params.r1) / params.r1 * step);\n              y = (params.R - params.r1) * p.sin(step) - params.d * p.sin((params.R - params.r1) / params.r1 * step);\n              break;\n            case \"Epitrochoid\":\n              x = (params.R + params.r1) * p.cos(step) - params.d * p.cos((params.R + params.r1) / params.r1 * step);\n              y = (params.R + params.r1) * p.sin(step) - params.d * p.sin((params.R + params.r1) / params.r1 * step);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * step);\n              x = rhodoneaRadius * p.cos(step);\n              y = rhodoneaRadius * p.sin(step);\n              break;\n            case \"Lissajous\":\n              x = params.A * p.sin(params.a * step + params.delta);\n              y = params.B * p.sin(params.b * step);\n              break;\n            case \"OrganicFlow\":\n              let baseRadius = 150;\n              let noiseTime = step * params.speed;\n              let radius = baseRadius;\n              for (let i = 0; i < params.waves; i++) {\n                let noiseFactor = p.noise(p.cos(step + i) * params.noiseScale, p.sin(step + i) * params.noiseScale, noiseTime);\n                radius += p.sin(step * (i + 1) * params.complexity) * params.amplitude * noiseFactor;\n              }\n              x = radius * p.cos(step);\n              y = radius * p.sin(step);\n              x += p.sin(step * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n              y += p.cos(step * 2.7) * 20 * p.noise(0, noiseTime * 2);\n              break;\n          }\n\n          // Update max boundaries\n          maxX = Math.max(maxX, Math.abs(x));\n          maxY = Math.max(maxY, Math.abs(y));\n        }\n        return {\n          maxX,\n          maxY\n        };\n      };\n\n      // Get the scale factor needed to fit the pattern\n      const getScaleFactor = () => {\n        const {\n          maxX,\n          maxY\n        } = calculatePatternBoundaries();\n        const maxExtent = Math.max(maxX, maxY);\n\n        // Canvas size is 600x600, center is at 300,300\n        // Leave a 50px margin on all sides\n        const maxAllowedExtent = 250; // (600/2 - 50)\n\n        // If pattern is too big, scale it down\n        if (maxExtent > maxAllowedExtent) {\n          return maxAllowedExtent / maxExtent;\n        }\n\n        // Otherwise, keep original scale\n        return 1.0;\n      };\n\n      // Get the final image when completed\n      const generateFinalOutput = () => {\n        // Create a new graphics buffer with black background\n        finalOutput = p.createGraphics(600, 600);\n        finalOutput.background(0); // BLACK BACKGROUND\n\n        // Overlay all layers onto this final image\n        for (let i = 0; i < layerCanvases.length; i++) {\n          finalOutput.image(layerCanvases[i], 0, 0);\n        }\n        return finalOutput;\n      };\n\n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Rhodonea - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Epitrochoid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Hypotrochoid - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // OrganicFlow - Super Rare 8%\n        } else {\n          shapeIndex = 4; // Lissajous - Legendary 2%\n        }\n        params = {}; // Reset params\n\n        switch (shapeIndex) {\n          case 0:\n            // Rhodonea (now Common)\n            shapeType = \"Rhodonea\";\n            params.k = p.int(p.random(4, 9));\n            maxT = params.k % 2 === 0 ? p.TWO_PI : p.PI;\n            break;\n          case 1:\n            // Epitrochoid (remains Uncommon)\n            shapeType = \"Epitrochoid\";\n            params.R = p.random(200, 300);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(80, 160);\n            const gcd2 = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd2);\n            break;\n          case 2:\n            // Hypotrochoid (now Rare)\n            shapeType = \"Hypotrochoid\";\n            params.R = p.random(250, 400);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(100, 180);\n            const gcd = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd);\n            break;\n          case 3:\n            // OrganicFlow (now Super Rare)\n            shapeType = \"OrganicFlow\";\n            params.complexity = p.random(0.5, 2.5);\n            params.speed = p.random(0.01, 0.05);\n            params.waves = p.int(p.random(3, 7));\n            params.amplitude = p.random(100, 250);\n            params.noiseScale = p.random(0.005, 0.02);\n\n            // These need longer time to develop\n            maxT = p.TWO_PI * 20;\n            break;\n          case 4:\n            // Lissajous (now Legendary)\n            shapeType = \"Lissajous\";\n            params.A = p.random(200, 350);\n            params.B = p.random(200, 350);\n            params.a = p.int(p.random(3, 7));\n            params.b = p.int(p.random(3, 7));\n            params.delta = p.random(0, p.PI);\n\n            // Find cycle length\n            const lcm = params.a * params.b / findGCD(params.a, params.b);\n            maxT = p.TWO_PI * lcm;\n            break;\n        }\n\n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 10);\n\n        // NEW: Set up layer transitions - divide maxT into segments for each layer\n        layerCompletionPoints = [];\n        for (let i = 1; i < totalLayers; i++) {\n          layerCompletionPoints.push(i / totalLayers * maxT);\n        }\n        layerCompletionPoints.push(maxT); // Final completion point\n\n        rarityText = shapeRarity[shapeType];\n\n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: {\n            ...params\n          }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        // Clear all canvases\n        p.background(0);\n        mainCanvas.background(0);\n\n        // Reset layer canvases\n        layerCanvases = [];\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background for each layer\n          layerCanvases.push(layerCanvas);\n        }\n        p.randomSeed(currentSeed);\n\n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        totalLayers = palette.colors.length; // Match layers to palette colors\n\n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n\n        // Reset drawing variables\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        currentColorIndex = 0;\n        currentLayer = 0;\n\n        // Pick a shape type\n        selectShapeType();\n\n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n\n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function () {\n        // Create main canvas\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n\n        // Initialize main drawing canvas with black background\n        mainCanvas = p.createGraphics(600, 600);\n        mainCanvas.background(0);\n\n        // Initialize layer canvases - one for each color\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background\n          layerCanvases.push(layerCanvas);\n        }\n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n\n        // Apply same settings to all layer canvases\n        for (let canvas of layerCanvases) {\n          canvas.strokeJoin(p.ROUND);\n          canvas.strokeCap(p.ROUND);\n        }\n\n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n\n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function () {\n        // Clear main canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n\n        // Display in-progress work\n        p.image(mainCanvas, 0, 0);\n\n        // Get the appropriate scale factor to fit pattern in canvas\n        const scaleFactor = getScaleFactor();\n\n        // Draw on the main canvas\n        mainCanvas.push();\n        mainCanvas.translate(mainCanvas.width / 2, mainCanvas.height / 2);\n\n        // Add rotation that completes during drawing\n        let fullRotationAngle = t / maxT * p.TWO_PI;\n        mainCanvas.rotate(fullRotationAngle);\n\n        // Current layer canvas (for separate color layers)\n        let currentLayerCanvas = layerCanvases[currentLayer];\n        currentLayerCanvas.push();\n        currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n        currentLayerCanvas.rotate(fullRotationAngle);\n\n        // Set color for current layer\n        currentColor = palette.colors[currentLayer];\n        mainCanvas.stroke(currentColor);\n        currentLayerCanvas.stroke(currentColor);\n        mainCanvas.strokeWeight(1);\n        currentLayerCanvas.strokeWeight(1);\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch (shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r1) * p.cos(t) + params.d * p.cos((params.R - params.r1) / params.r1 * t);\n            y = (params.R - params.r1) * p.sin(t) - params.d * p.sin((params.R - params.r1) / params.r1 * t);\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r1) * p.cos(t) - params.d * p.cos((params.R + params.r1) / params.r1 * t);\n            y = (params.R + params.r1) * p.sin(t) - params.d * p.sin((params.R + params.r1) / params.r1 * t);\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = 250 * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n            break;\n          case \"OrganicFlow\":\n            // Create organic, flowing patterns\n            let baseRadius = 150;\n            let noiseTime = t * params.speed;\n\n            // Create multiple wave layers with perlin noise\n            let radius = baseRadius;\n            for (let i = 0; i < params.waves; i++) {\n              let noiseFactor = p.noise(p.cos(t + i) * params.noiseScale, p.sin(t + i) * params.noiseScale, noiseTime);\n              radius += p.sin(t * (i + 1) * params.complexity) * params.amplitude * noiseFactor;\n            }\n\n            // Convert to x,y coordinates\n            x = radius * p.cos(t);\n            y = radius * p.sin(t);\n\n            // Add some variation\n            x += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n            y += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n            break;\n        }\n\n        // Apply dynamic scaling to ensure pattern fits\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment on both canvases\n        if (prevX !== null) {\n          mainCanvas.line(prevX, prevY, x, y);\n          currentLayerCanvas.line(prevX, prevY, x, y);\n        }\n\n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n\n          // Check if we've reached a layer transition point\n          if (currentLayer < layerCompletionPoints.length - 1 && t >= layerCompletionPoints[currentLayer]) {\n            // Time to move to next layer\n            currentLayer++;\n            // Make sure we don't go beyond the array bounds\n            if (currentLayer < layerCanvases.length) {\n              currentLayerCanvas = layerCanvases[currentLayer];\n              currentLayerCanvas.push();\n              currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n              // Apply rotation to the new layer\n              let fullRotationAngle = t / maxT * p.TWO_PI;\n              currentLayerCanvas.rotate(fullRotationAngle);\n              currentColor = palette.colors[Math.min(currentLayer, palette.colors.length - 1)];\n              mainCanvas.stroke(currentColor);\n              currentLayerCanvas.stroke(currentColor);\n            }\n          }\n\n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n\n          // Re-calculate based on shape type with updated t\n          switch (shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r1) * p.cos(t) + params.d * p.cos((params.R - params.r1) / params.r1 * t);\n              nextY = (params.R - params.r1) * p.sin(t) - params.d * p.sin((params.R - params.r1) / params.r1 * t);\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r1) * p.cos(t) - params.d * p.cos((params.R + params.r1) / params.r1 * t);\n              nextY = (params.R + params.r1) * p.sin(t) - params.d * p.sin((params.R + params.r1) / params.r1 * t);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n              break;\n            case \"OrganicFlow\":\n              let baseRadius = 150;\n              let noiseTime = t * params.speed;\n              let radius = baseRadius;\n              for (let i = 0; i < params.waves; i++) {\n                let noiseFactor = p.noise(p.cos(t + i) * params.noiseScale, p.sin(t + i) * params.noiseScale, noiseTime);\n                radius += p.sin(t * (i + 1) * params.complexity) * params.amplitude * noiseFactor;\n              }\n              nextX = radius * p.cos(t);\n              nextY = radius * p.sin(t);\n              nextX += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n              nextY += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n              break;\n          }\n\n          // Apply dynamic scaling to ensure pattern fits\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n\n          // Draw the line on both canvases\n          mainCanvas.line(prevX, prevY, nextX, nextY);\n          currentLayerCanvas.line(prevX, prevY, nextX, nextY);\n\n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n\n        // Increment time\n        t += 0.015;\n\n        // Update global rotation\n        globalAngle = t / maxT * p.TWO_PI;\n\n        // Update progress\n        const currentProgress = Math.min(100, Math.round(t / maxT * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n\n        // End current push transforms\n        mainCanvas.pop();\n        currentLayerCanvas.pop();\n\n        // Check if drawing is complete\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n\n          // Make sure to end all open transforms\n          mainCanvas.pop();\n          // Safely pop any open layer transforms\n          for (let i = 0; i < layerCanvases.length; i++) {\n            try {\n              layerCanvases[i].pop();\n            } catch (e) {\n              // Ignore errors if there's no matching push\n              console.log(\"Note: Layer\", i, \"didn't need popping\");\n            }\n          }\n\n          // Generate final output with black background and all layers\n          finalOutput = generateFinalOutput();\n\n          // Notify parent that drawing is complete\n          onDrawingComplete && onDrawingComplete(finalOutput);\n        }\n      };\n\n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n\n      // Change to a specific seed\n      p.setSeed = newSeed => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n\n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spiro-canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: canvasRef,\n      className: \"canvas-wrapper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 7\n    }, this), isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"progress-text\",\n        children: [progress, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 9\n    }, this), !isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-complete\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Drawing complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 607,\n    columnNumber: 5\n  }, this);\n};\n_s(SpiroCanvas, \"vG581M3D6HIZspCQRmOO1WkIWxY=\");\n_c = SpiroCanvas;\nexport default SpiroCanvas;\nvar _c;\n$RefreshReg$(_c, \"SpiroCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","p5","jsxDEV","_jsxDEV","SpiroCanvas","seed","setSeed","onShapeChange","onPaletteChange","onDrawingComplete","_s","canvasRef","p5Instance","isDrawing","setIsDrawing","progress","setProgress","sketch","p","palettes","name","colors","rarity","shapeRarity","mainCanvas","layerCanvases","finalOutput","shapeType","params","palette","currentColor","t","maxT","prevX","prevY","globalAngle","currentColorIndex","rarityText","currentSeed","Math","floor","random","totalLayers","currentLayer","layerCompletionPoints","findGCD","a","b","round","calculatePatternBoundaries","maxX","maxY","step","x","y","R","r1","cos","d","sin","rhodoneaRadius","k","A","delta","B","baseRadius","noiseTime","speed","radius","i","waves","noiseFactor","noise","noiseScale","complexity","amplitude","max","abs","getScaleFactor","maxExtent","maxAllowedExtent","generateFinalOutput","createGraphics","background","length","image","selectShapeType","shapeRoll","shapeIndex","int","TWO_PI","PI","gcd2","gcd","lcm","push","type","resetSketch","layerCanvas","clear","randomSeed","paletteRoll","strokeWeight","noFill","console","log","isLooping","loop","setup","canvas","createCanvas","style","frameRate","strokeJoin","ROUND","strokeCap","draw","frameCount","scaleFactor","translate","width","height","fullRotationAngle","rotate","currentLayerCanvas","stroke","line","stepsPerFrame","min","nextX","nextY","currentProgress","pop","noLoop","e","generateNewSeed","newSeed","current","remove","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx"],"sourcesContent":["// Improvement for src/components/SpiroCanvas.jsx\n// This version creates distinct layers and preserves the black background\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\n\nconst SpiroCanvas = ({ \n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = (p) => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [\n        {name: \"Neon Mirage\", colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"], rarity: \"Common\"},\n        {name: \"Digital Dream\", colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"], rarity: \"Uncommon\"},\n        {name: \"Crystal Sunset\", colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"], rarity: \"Rare\"},\n        {name: \"Cyber Haze\", colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"], rarity: \"Super Rare\"},\n        {name: \"Pastel Vapor\", colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"], rarity: \"Legendary\"}\n      ];\n\n      // Shape rarity distribution\n      const shapeRarity = {\n        \"Rhodonea\": \"Common\", // 40%\n        \"Epitrochoid\": \"Uncommon\", // 30%\n        \"Hypotrochoid\": \"Rare\", // 20%\n        \"OrganicFlow\": \"Super Rare\", // 8%\n        \"Lissajous\": \"Legendary\" // 2%\n      };\n\n      // Multiple layer canvases - NEW!\n      let mainCanvas; // Main visible canvas with black background\n      let layerCanvases = []; // Array of layer graphics for each color\n      let finalOutput; // Final combined output\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let currentColorIndex = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n      \n      // Layer tracking\n      let totalLayers = 5; // Match number of colors in palette\n      let currentLayer = 0;\n      let layerCompletionPoints = []; // Points at which to switch layers\n      \n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Calculate the maximum boundaries of the pattern to ensure it fits\n      const calculatePatternBoundaries = () => {\n        let maxX = 0;\n        let maxY = 0;\n        \n        // Sample many points to find the maximum extent\n        for (let step = 0; step < maxT; step += 0.1) {\n          let x = 0;\n          let y = 0;\n          \n          // Calculate position based on shape type\n          switch(shapeType) {\n            case \"Hypotrochoid\":\n              x = (params.R - params.r1) * p.cos(step) + params.d * p.cos(((params.R - params.r1) / params.r1) * step);\n              y = (params.R - params.r1) * p.sin(step) - params.d * p.sin(((params.R - params.r1) / params.r1) * step);\n              break;\n            case \"Epitrochoid\":\n              x = (params.R + params.r1) * p.cos(step) - params.d * p.cos(((params.R + params.r1) / params.r1) * step);\n              y = (params.R + params.r1) * p.sin(step) - params.d * p.sin(((params.R + params.r1) / params.r1) * step);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * step);\n              x = rhodoneaRadius * p.cos(step);\n              y = rhodoneaRadius * p.sin(step);\n              break;\n            case \"Lissajous\":\n              x = params.A * p.sin(params.a * step + params.delta);\n              y = params.B * p.sin(params.b * step);\n              break;\n            case \"OrganicFlow\":\n              let baseRadius = 150;\n              let noiseTime = step * params.speed;\n              \n              let radius = baseRadius;\n              for (let i = 0; i < params.waves; i++) {\n                let noiseFactor = p.noise(\n                  p.cos(step + i) * params.noiseScale, \n                  p.sin(step + i) * params.noiseScale, \n                  noiseTime\n                );\n                radius += p.sin(step * (i+1) * params.complexity) * params.amplitude * noiseFactor;\n              }\n              \n              x = radius * p.cos(step);\n              y = radius * p.sin(step);\n              \n              x += p.sin(step * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n              y += p.cos(step * 2.7) * 20 * p.noise(0, noiseTime * 2);\n              break;\n          }\n          \n          // Update max boundaries\n          maxX = Math.max(maxX, Math.abs(x));\n          maxY = Math.max(maxY, Math.abs(y));\n        }\n        \n        return { maxX, maxY };\n      };\n\n      // Get the scale factor needed to fit the pattern\n      const getScaleFactor = () => {\n        const { maxX, maxY } = calculatePatternBoundaries();\n        const maxExtent = Math.max(maxX, maxY);\n        \n        // Canvas size is 600x600, center is at 300,300\n        // Leave a 50px margin on all sides\n        const maxAllowedExtent = 250; // (600/2 - 50)\n        \n        // If pattern is too big, scale it down\n        if (maxExtent > maxAllowedExtent) {\n          return maxAllowedExtent / maxExtent;\n        }\n        \n        // Otherwise, keep original scale\n        return 1.0;\n      };\n\n      // Get the final image when completed\n      const generateFinalOutput = () => {\n        // Create a new graphics buffer with black background\n        finalOutput = p.createGraphics(600, 600);\n        finalOutput.background(0); // BLACK BACKGROUND\n        \n        // Overlay all layers onto this final image\n        for (let i = 0; i < layerCanvases.length; i++) {\n          finalOutput.image(layerCanvases[i], 0, 0);\n        }\n        \n        return finalOutput;\n      };\n      \n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        \n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Rhodonea - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Epitrochoid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Hypotrochoid - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // OrganicFlow - Super Rare 8%\n        } else {\n          shapeIndex = 4; // Lissajous - Legendary 2%\n        }\n        \n        params = {}; // Reset params\n        \n        switch(shapeIndex) {\n          case 0: // Rhodonea (now Common)\n            shapeType = \"Rhodonea\";\n            params.k = p.int(p.random(4, 9));\n            \n            maxT = (params.k % 2 === 0) ? p.TWO_PI : p.PI;\n            break;\n            \n          case 1: // Epitrochoid (remains Uncommon)\n            shapeType = \"Epitrochoid\";\n            params.R = p.random(200, 300);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(80, 160);\n            \n            const gcd2 = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd2);\n            break;\n            \n          case 2: // Hypotrochoid (now Rare)\n            shapeType = \"Hypotrochoid\";\n            params.R = p.random(250, 400);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(100, 180);\n            \n            const gcd = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd);\n            break;\n            \n          case 3: // OrganicFlow (now Super Rare)\n            shapeType = \"OrganicFlow\";\n            params.complexity = p.random(0.5, 2.5);\n            params.speed = p.random(0.01, 0.05);\n            params.waves = p.int(p.random(3, 7));\n            params.amplitude = p.random(100, 250);\n            params.noiseScale = p.random(0.005, 0.02);\n            \n            // These need longer time to develop\n            maxT = p.TWO_PI * 20;\n            break;\n            \n          case 4: // Lissajous (now Legendary)\n            shapeType = \"Lissajous\";\n            params.A = p.random(200, 350);\n            params.B = p.random(200, 350);\n            params.a = p.int(p.random(3, 7));\n            params.b = p.int(p.random(3, 7));\n            params.delta = p.random(0, p.PI);\n            \n            // Find cycle length\n            const lcm = (params.a * params.b) / findGCD(params.a, params.b);\n            maxT = p.TWO_PI * lcm;\n            break;\n        }\n        \n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 10);\n        \n        // NEW: Set up layer transitions - divide maxT into segments for each layer\n        layerCompletionPoints = [];\n        for (let i = 1; i < totalLayers; i++) {\n          layerCompletionPoints.push((i / totalLayers) * maxT);\n        }\n        layerCompletionPoints.push(maxT); // Final completion point\n        \n        rarityText = shapeRarity[shapeType];\n        \n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: { ...params }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        // Clear all canvases\n        p.background(0);\n        mainCanvas.background(0);\n        \n        // Reset layer canvases\n        layerCanvases = [];\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background for each layer\n          layerCanvases.push(layerCanvas);\n        }\n        \n        p.randomSeed(currentSeed);\n        \n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        \n        totalLayers = palette.colors.length; // Match layers to palette colors\n        \n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n        \n        // Reset drawing variables\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        currentColorIndex = 0;\n        currentLayer = 0;\n        \n        // Pick a shape type\n        selectShapeType();\n        \n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        \n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n        \n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        \n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function() {\n        // Create main canvas\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        \n        // Initialize main drawing canvas with black background\n        mainCanvas = p.createGraphics(600, 600);\n        mainCanvas.background(0);\n        \n        // Initialize layer canvases - one for each color\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background\n          layerCanvases.push(layerCanvas);\n        }\n        \n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n        \n        // Apply same settings to all layer canvases\n        for (let canvas of layerCanvases) {\n          canvas.strokeJoin(p.ROUND);\n          canvas.strokeCap(p.ROUND);\n        }\n        \n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n        \n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function() {\n        // Clear main canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n        \n        // Display in-progress work\n        p.image(mainCanvas, 0, 0);\n        \n        // Get the appropriate scale factor to fit pattern in canvas\n        const scaleFactor = getScaleFactor();\n        \n        // Draw on the main canvas\n        mainCanvas.push();\n        mainCanvas.translate(mainCanvas.width / 2, mainCanvas.height / 2);\n        \n        // Add rotation that completes during drawing\n        let fullRotationAngle = (t / maxT) * p.TWO_PI;\n        mainCanvas.rotate(fullRotationAngle);\n        \n        // Current layer canvas (for separate color layers)\n        let currentLayerCanvas = layerCanvases[currentLayer];\n        currentLayerCanvas.push();\n        currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n        currentLayerCanvas.rotate(fullRotationAngle);\n        \n        // Set color for current layer\n        currentColor = palette.colors[currentLayer];\n        mainCanvas.stroke(currentColor);\n        currentLayerCanvas.stroke(currentColor);\n        mainCanvas.strokeWeight(1);\n        currentLayerCanvas.strokeWeight(1);\n\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch(shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r1) * p.cos(t) + params.d * p.cos(((params.R - params.r1) / params.r1) * t);\n            y = (params.R - params.r1) * p.sin(t) - params.d * p.sin(((params.R - params.r1) / params.r1) * t);\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r1) * p.cos(t) - params.d * p.cos(((params.R + params.r1) / params.r1) * t);\n            y = (params.R + params.r1) * p.sin(t) - params.d * p.sin(((params.R + params.r1) / params.r1) * t);\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = 250 * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n            break;\n          case \"OrganicFlow\":\n            // Create organic, flowing patterns\n            let baseRadius = 150;\n            let noiseTime = t * params.speed;\n            \n            // Create multiple wave layers with perlin noise\n            let radius = baseRadius;\n            for (let i = 0; i < params.waves; i++) {\n              let noiseFactor = p.noise(\n                p.cos(t + i) * params.noiseScale, \n                p.sin(t + i) * params.noiseScale, \n                noiseTime\n              );\n              radius += p.sin(t * (i+1) * params.complexity) * params.amplitude * noiseFactor;\n            }\n            \n            // Convert to x,y coordinates\n            x = radius * p.cos(t);\n            y = radius * p.sin(t);\n            \n            // Add some variation\n            x += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n            y += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n            break;\n        }\n\n        // Apply dynamic scaling to ensure pattern fits\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment on both canvases\n        if (prevX !== null) {\n          mainCanvas.line(prevX, prevY, x, y);\n          currentLayerCanvas.line(prevX, prevY, x, y);\n        }\n        \n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n          \n          // Check if we've reached a layer transition point\n          if (currentLayer < layerCompletionPoints.length-1 && t >= layerCompletionPoints[currentLayer]) {\n            // Time to move to next layer\n            currentLayer++;\n            // Make sure we don't go beyond the array bounds\n            if (currentLayer < layerCanvases.length) {\n              currentLayerCanvas = layerCanvases[currentLayer];\n              currentLayerCanvas.push();\n              currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n              // Apply rotation to the new layer\n              let fullRotationAngle = (t / maxT) * p.TWO_PI;\n              currentLayerCanvas.rotate(fullRotationAngle);\n              currentColor = palette.colors[Math.min(currentLayer, palette.colors.length - 1)];\n              mainCanvas.stroke(currentColor);\n              currentLayerCanvas.stroke(currentColor);\n            }\n          }\n          \n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n          \n          // Re-calculate based on shape type with updated t\n          switch(shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r1) * p.cos(t) + params.d * p.cos(((params.R - params.r1) / params.r1) * t);\n              nextY = (params.R - params.r1) * p.sin(t) - params.d * p.sin(((params.R - params.r1) / params.r1) * t);\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r1) * p.cos(t) - params.d * p.cos(((params.R + params.r1) / params.r1) * t);\n              nextY = (params.R + params.r1) * p.sin(t) - params.d * p.sin(((params.R + params.r1) / params.r1) * t);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n              break;\n            case \"OrganicFlow\":\n              let baseRadius = 150;\n              let noiseTime = t * params.speed;\n              \n              let radius = baseRadius;\n              for (let i = 0; i < params.waves; i++) {\n                let noiseFactor = p.noise(\n                  p.cos(t + i) * params.noiseScale, \n                  p.sin(t + i) * params.noiseScale, \n                  noiseTime\n                );\n                radius += p.sin(t * (i+1) * params.complexity) * params.amplitude * noiseFactor;\n              }\n              \n              nextX = radius * p.cos(t);\n              nextY = radius * p.sin(t);\n              \n              nextX += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n              nextY += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n              break;\n          }\n          \n          // Apply dynamic scaling to ensure pattern fits\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n          \n          // Draw the line on both canvases\n          mainCanvas.line(prevX, prevY, nextX, nextY);\n          currentLayerCanvas.line(prevX, prevY, nextX, nextY);\n          \n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n        \n        // Increment time\n        t += 0.015;\n        \n        // Update global rotation\n        globalAngle = (t / maxT) * p.TWO_PI;\n        \n        // Update progress\n        const currentProgress = Math.min(100, Math.round((t / maxT) * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n        \n        // End current push transforms\n        mainCanvas.pop();\n        currentLayerCanvas.pop();\n\n        // Check if drawing is complete\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n          \n          // Make sure to end all open transforms\n          mainCanvas.pop();\n          // Safely pop any open layer transforms\n          for (let i = 0; i < layerCanvases.length; i++) {\n            try {\n              layerCanvases[i].pop();\n            } catch (e) {\n              // Ignore errors if there's no matching push\n              console.log(\"Note: Layer\", i, \"didn't need popping\");\n            }\n          }\n          \n          // Generate final output with black background and all layers\n          finalOutput = generateFinalOutput();\n          \n          // Notify parent that drawing is complete\n          onDrawingComplete && onDrawingComplete(finalOutput);\n        }\n      };\n      \n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n      \n      // Change to a specific seed\n      p.setSeed = (newSeed) => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n    \n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return (\n    <div className=\"spiro-canvas-container\">\n      <div ref={canvasRef} className=\"canvas-wrapper\"></div>\n      {isDrawing && (\n        <div className=\"progress-bar-container\">\n          <div className=\"progress-bar\" style={{ width: `${progress}%` }}></div>\n          <span className=\"progress-text\">{progress}%</span>\n        </div>\n      )}\n      {!isDrawing && (\n        <div className=\"canvas-complete\">\n          <span>Drawing complete!</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpiroCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}