{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiroCanvas = ({\n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = p => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [{\n        name: \"Neon Mirage\",\n        colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"],\n        rarity: \"Common\"\n      }, {\n        name: \"Digital Dream\",\n        colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"],\n        rarity: \"Uncommon\"\n      }, {\n        name: \"Crystal Sunset\",\n        colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"],\n        rarity: \"Rare\"\n      }, {\n        name: \"Cyber Haze\",\n        colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"],\n        rarity: \"Super Rare\"\n      }, {\n        name: \"Pastel Vapor\",\n        colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"],\n        rarity: \"Legendary\"\n      }];\n\n      // Shape rarity distribution\n      const shapeRarity = {\n        \"Rhodonea\": \"Common\",\n        // 40%\n        \"Epitrochoid\": \"Uncommon\",\n        // 30%\n        \"Hypotrochoid\": \"Rare\",\n        // 20%\n        \"PolySpirograph\": \"Super Rare\",\n        // 8%\n        \"Lissajous\": \"Legendary\" // 2%\n      };\n\n      // Multiple layer canvases\n      let mainCanvas; // Main visible canvas with black background\n      let layerCanvases = []; // Array of layer graphics for each color\n      let finalOutput; // Final combined output\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let currentColorIndex = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n\n      // Layer tracking\n      let totalLayers = 5; // Match number of colors in palette\n      let currentLayer = 0;\n      let layerCompletionPoints = []; // Points at which to switch layers\n\n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Calculate the maximum boundaries of the pattern to ensure it fits\n      const calculatePatternBoundaries = () => {\n        let maxX = 0;\n        let maxY = 0;\n\n        // Sample many points to find the maximum extent\n        for (let step = 0; step < maxT; step += 0.1) {\n          let x = 0;\n          let y = 0;\n\n          // Calculate position based on shape type\n          switch (shapeType) {\n            case \"Hypotrochoid\":\n              x = (params.R - params.r1) * p.cos(step) + params.d * p.cos((params.R - params.r1) / params.r1 * step);\n              y = (params.R - params.r1) * p.sin(step) - params.d * p.sin((params.R - params.r1) / params.r1 * step);\n              break;\n            case \"Epitrochoid\":\n              x = (params.R + params.r1) * p.cos(step) - params.d * p.cos((params.R + params.r1) / params.r1 * step);\n              y = (params.R + params.r1) * p.sin(step) - params.d * p.sin((params.R + params.r1) / params.r1 * step);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * step);\n              x = rhodoneaRadius * p.cos(step);\n              y = rhodoneaRadius * p.sin(step);\n              break;\n            case \"Lissajous\":\n              x = params.A * p.sin(params.a * step + params.delta);\n              y = params.B * p.sin(params.b * step);\n              break;\n            case \"PolySpirograph\":\n              // Get base shape parameters\n              const baseSize = params.baseSize;\n              const smallRadius = params.smallCircleRadius;\n              const penLength = params.penLength;\n              const speedRatio = params.speedRatio;\n              const distortion = params.shapeDistortion;\n\n              // Base rotation - slower to make pattern more visible\n              const baseAngle = step * 0.2;\n              let baseCoord = {\n                x: 0,\n                y: 0\n              };\n\n              // Calculate coordinate on base shape perimeter\n              switch (params.baseShape) {\n                case \"circle\":\n                  // Simple circle\n                  baseCoord.x = baseSize * Math.cos(baseAngle);\n                  baseCoord.y = baseSize * Math.sin(baseAngle);\n                  break;\n                case \"square\":\n                  // Square with sharp corners\n                  const squareAngle = baseAngle % (Math.PI / 2);\n                  const quadrant = Math.floor(baseAngle / (Math.PI / 2)) % 4;\n\n                  // Which edge of the square we're on\n                  if (squareAngle < Math.PI / 4) {\n                    // Calculate point on edge, emphasizing corners\n                    const edgePos = Math.tan(squareAngle) / Math.tan(Math.PI / 4);\n                    const adjustedPos = Math.pow(edgePos, distortion); // Make corners more pronounced\n\n                    if (quadrant === 0) baseCoord = {\n                      x: baseSize,\n                      y: baseSize * adjustedPos\n                    };else if (quadrant === 1) baseCoord = {\n                      x: -baseSize * adjustedPos,\n                      y: baseSize\n                    };else if (quadrant === 2) baseCoord = {\n                      x: -baseSize,\n                      y: -baseSize * adjustedPos\n                    };else baseCoord = {\n                      x: baseSize * adjustedPos,\n                      y: -baseSize\n                    };\n                  } else {\n                    const edgePos = Math.tan(Math.PI / 2 - squareAngle) / Math.tan(Math.PI / 4);\n                    const adjustedPos = Math.pow(edgePos, distortion);\n                    if (quadrant === 0) baseCoord = {\n                      x: baseSize * adjustedPos,\n                      y: baseSize\n                    };else if (quadrant === 1) baseCoord = {\n                      x: -baseSize,\n                      y: baseSize * adjustedPos\n                    };else if (quadrant === 2) baseCoord = {\n                      x: -baseSize * adjustedPos,\n                      y: -baseSize\n                    };else baseCoord = {\n                      x: baseSize,\n                      y: -baseSize * adjustedPos\n                    };\n                  }\n                  break;\n                case \"triangle\":\n                  // Equilateral triangle with pronounced corners\n                  const sides = 3;\n                  const triAngle = baseAngle % (2 * Math.PI / sides);\n                  const triSide = Math.floor(baseAngle / (2 * Math.PI / sides)) % sides;\n                  const pointiness = params.pointiness || 1.3; // Default if not set\n\n                  // Triangle vertices (equilateral)\n                  const triVertices = [{\n                    x: 0,\n                    y: -baseSize\n                  },\n                  // Top\n                  {\n                    x: baseSize * 0.866,\n                    y: baseSize * 0.5\n                  },\n                  // Bottom right\n                  {\n                    x: -baseSize * 0.866,\n                    y: baseSize * 0.5\n                  } // Bottom left\n                  ];\n\n                  // Calculate position along edge with pointiness factor\n                  const fromVertex = triVertices[triSide];\n                  const toVertex = triVertices[(triSide + 1) % sides];\n\n                  // Use non-linear interpolation to emphasize corners\n                  const edgePosition = triAngle / (2 * Math.PI / sides);\n                  const adjustedPosition = Math.pow(edgePosition, pointiness);\n                  baseCoord.x = fromVertex.x + (toVertex.x - fromVertex.x) * adjustedPosition;\n                  baseCoord.y = fromVertex.y + (toVertex.y - fromVertex.y) * adjustedPosition;\n                  break;\n                case \"diamond\":\n                  // Diamond (rhombus) with sharp points\n                  const diamondAngle = baseAngle % (Math.PI / 2);\n                  const diamondQuad = Math.floor(baseAngle / (Math.PI / 2)) % 4;\n                  const sharpness = params.sharpness || 1.5; // Use sharpness or default\n\n                  // Diamond vertices\n                  const diamondVertices = [{\n                    x: 0,\n                    y: -baseSize\n                  },\n                  // Top\n                  {\n                    x: baseSize * sharpness,\n                    y: 0\n                  },\n                  // Right\n                  {\n                    x: 0,\n                    y: baseSize\n                  },\n                  // Bottom\n                  {\n                    x: -baseSize * sharpness,\n                    y: 0\n                  } // Left\n                  ];\n\n                  // Calculate with non-linear interpolation to emphasize corners\n                  const dFromVertex = diamondVertices[diamondQuad];\n                  const dToVertex = diamondVertices[(diamondQuad + 1) % 4];\n                  const dEdgePos = diamondAngle / (Math.PI / 2);\n\n                  // Make points sharper with distortion\n                  const dAdjustedPos = Math.pow(dEdgePos, distortion);\n                  baseCoord.x = dFromVertex.x + (dToVertex.x - dFromVertex.x) * dAdjustedPos;\n                  baseCoord.y = dFromVertex.y + (dToVertex.y - dFromVertex.y) * dAdjustedPos;\n                  break;\n                case \"pentagon\":\n                  // Regular pentagon\n                  const pentSides = 5;\n                  const pentAngle = baseAngle % (2 * Math.PI / pentSides);\n                  const pentSide = Math.floor(baseAngle / (2 * Math.PI / pentSides)) % pentSides;\n\n                  // Generate pentagon vertices\n                  const pentVertices = [];\n                  for (let i = 0; i < pentSides; i++) {\n                    const angle = -Math.PI / 2 + i * 2 * Math.PI / pentSides;\n                    pentVertices.push({\n                      x: baseSize * Math.cos(angle),\n                      y: baseSize * Math.sin(angle)\n                    });\n                  }\n\n                  // Calculate with non-linear interpolation to emphasize corners\n                  const pFromVertex = pentVertices[pentSide];\n                  const pToVertex = pentVertices[(pentSide + 1) % pentSides];\n                  const pEdgePos = pentAngle / (2 * Math.PI / pentSides);\n\n                  // Make points sharper with distortion\n                  const pAdjustedPos = Math.pow(pEdgePos, distortion);\n                  baseCoord.x = pFromVertex.x + (pToVertex.x - pFromVertex.x) * pAdjustedPos;\n                  baseCoord.y = pFromVertex.y + (pToVertex.y - pFromVertex.y) * pAdjustedPos;\n                  break;\n              }\n\n              // Calculate small circle position and pen position\n              const smallCircleAngle = baseAngle * speedRatio;\n\n              // Position of pen relative to small circle center\n              const penAngle = smallCircleAngle * 3.1; // Different ratio for more complex patterns\n\n              // Calculate final position\n              x = baseCoord.x + smallRadius * Math.cos(smallCircleAngle) + penLength * Math.cos(penAngle);\n              y = baseCoord.y + smallRadius * Math.sin(smallCircleAngle) + penLength * Math.sin(penAngle);\n              break;\n          }\n\n          // Update max boundaries\n          maxX = Math.max(maxX, Math.abs(x));\n          maxY = Math.max(maxY, Math.abs(y));\n        }\n        return {\n          maxX,\n          maxY\n        };\n      };\n\n      // Get a more detailed description of the shape\n      const getShapeDescription = () => {\n        if (shapeType === \"PolySpirograph\") {\n          // Capitalize first letter\n          const shapeName = params.baseShape.charAt(0).toUpperCase() + params.baseShape.slice(1);\n          return `${shapeType} (${shapeName})`;\n        }\n        return shapeType;\n      };\n\n      // Get the scale factor needed to fit the pattern\n      const getScaleFactor = () => {\n        const {\n          maxX,\n          maxY\n        } = calculatePatternBoundaries();\n        const maxExtent = Math.max(maxX, maxY);\n\n        // Canvas size is 600x600, center is at 300,300\n        // Leave a 50px margin on all sides\n        const maxAllowedExtent = 250; // (600/2 - 50)\n\n        // If pattern is too big, scale it down\n        if (maxExtent > maxAllowedExtent) {\n          return maxAllowedExtent / maxExtent;\n        }\n\n        // Otherwise, keep original scale\n        return 1.0;\n      };\n\n      // Get the final image when completed\n      const generateFinalOutput = () => {\n        // Create two separate graphics:\n        // 1. The background canvas (black)\n        let backgroundCanvas = p.createGraphics(600, 600);\n        backgroundCanvas.background(0); // BLACK BACKGROUND\n\n        // 2. The transparent spirograph with all layers merged (but no background)\n        let transparentSpiro = p.createGraphics(600, 600);\n        transparentSpiro.clear(); // Completely transparent\n\n        // Overlay all layers onto the transparent spirograph\n        for (let i = 0; i < layerCanvases.length; i++) {\n          transparentSpiro.image(layerCanvases[i], 0, 0);\n        }\n\n        // Return just the transparent spirograph - the black background stays in the canvas\n        return transparentSpiro;\n      };\n\n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Rhodonea - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Epitrochoid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Hypotrochoid - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // PolySpirograph - Super Rare 8%\n        } else {\n          shapeIndex = 4; // Lissajous - Legendary 2%\n        }\n        params = {}; // Reset params\n\n        switch (shapeIndex) {\n          case 0:\n            // Rhodonea (now Common)\n            shapeType = \"Rhodonea\";\n            params.k = p.int(p.random(4, 9));\n            maxT = params.k % 2 === 0 ? p.TWO_PI : p.PI;\n            break;\n          case 1:\n            // Epitrochoid (remains Uncommon)\n            shapeType = \"Epitrochoid\";\n            params.R = p.random(200, 300);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(80, 160);\n            const gcd2 = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd2);\n            break;\n          case 2:\n            // Hypotrochoid (now Rare)\n            shapeType = \"Hypotrochoid\";\n            params.R = p.random(250, 400);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(100, 180);\n            const gcd = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd);\n            break;\n          case 3:\n            // PolySpirograph (Super Rare)\n            shapeType = \"PolySpirograph\";\n\n            // Select a base shape randomly (no oval)\n            const shapes = [\"triangle\", \"square\", \"diamond\", \"circle\", \"pentagon\"];\n            params.baseShape = shapes[Math.floor(p.random(shapes.length))];\n\n            // Base parameters with more extreme values for distinctive shapes\n            params.baseSize = p.random(130, 200); // Size of the base shape\n            params.smallCircleRadius = p.random(30, 60); // Radius of moving circle\n            params.penLength = p.random(50, 100); // Distance from small circle center to pen\n\n            // More distinctive parameters\n            params.speedRatio = p.random(7, 13) / 10; // Ratio between base rotation and small circle rotation\n            params.loops = p.int(p.random(4, 8)); // Number of complete loops\n\n            // Parameters to make shapes more pronounced\n            params.shapeDistortion = p.random(0.8, 1.5); // How much to emphasize the shape\n\n            // For specific shapes\n            if (params.baseShape === \"diamond\") {\n              params.sharpness = p.random(1.2, 1.8); // Sharper diamonds\n            }\n            if (params.baseShape === \"pentagon\") {\n              params.sides = 5; // Fixed at 5 for pentagon\n            }\n            if (params.baseShape === \"triangle\") {\n              // Make triangles more extreme\n              params.pointiness = p.random(1.2, 1.6);\n            }\n\n            // Calculate max time - make it depend on shape complexity\n            maxT = p.TWO_PI * params.loops;\n            break;\n          case 4:\n            // Lissajous (now Legendary)\n            shapeType = \"Lissajous\";\n            params.A = p.random(200, 350);\n            params.B = p.random(200, 350);\n            params.a = p.int(p.random(3, 7));\n            params.b = p.int(p.random(3, 7));\n            params.delta = p.random(0, p.PI);\n\n            // Find cycle length\n            const lcm = params.a * params.b / findGCD(params.a, params.b);\n            maxT = p.TWO_PI * lcm;\n            break;\n        }\n\n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 10);\n\n        // Set up layer transitions - divide maxT into segments for each layer\n        layerCompletionPoints = [];\n        for (let i = 1; i < totalLayers; i++) {\n          layerCompletionPoints.push(i / totalLayers * maxT);\n        }\n        layerCompletionPoints.push(maxT); // Final completion point\n\n        rarityText = shapeRarity[shapeType];\n\n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: {\n            ...params\n          }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        // Clear all canvases\n        p.background(0);\n        mainCanvas.background(0);\n\n        // Reset layer canvases\n        layerCanvases = [];\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background for each layer\n          layerCanvases.push(layerCanvas);\n        }\n        p.randomSeed(currentSeed);\n\n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        totalLayers = palette.colors.length; // Match layers to palette colors\n\n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n\n        // Reset drawing variables\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        currentColorIndex = 0;\n        currentLayer = 0;\n\n        // Pick a shape type\n        selectShapeType();\n\n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        console.log(`Spirograph #${currentSeed} â€” ${getShapeDescription()} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n\n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function () {\n        // Create main canvas with black background\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        canvas.style('background-color', 'black'); // Ensure canvas always shows black\n\n        // Initialize main drawing canvas with black background\n        mainCanvas = p.createGraphics(600, 600);\n        mainCanvas.background(0);\n\n        // Initialize layer canvases - one for each color\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background\n          layerCanvases.push(layerCanvas);\n        }\n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n\n        // Apply same settings to all layer canvases\n        for (let canvas of layerCanvases) {\n          canvas.strokeJoin(p.ROUND);\n          canvas.strokeCap(p.ROUND);\n        }\n\n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n\n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function () {\n        // Clear main canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n\n        // Display in-progress work\n        p.image(mainCanvas, 0, 0);\n\n        // Display info\n        p.displayInfo();\n\n        // Get the appropriate scale factor to fit pattern in canvas\n        const scaleFactor = getScaleFactor();\n\n        // Draw on the main canvas\n        mainCanvas.push();\n        mainCanvas.translate(mainCanvas.width / 2, mainCanvas.height / 2);\n\n        // Add rotation that completes during drawing\n        let fullRotationAngle = t / maxT * p.TWO_PI;\n        mainCanvas.rotate(fullRotationAngle);\n\n        // Current layer canvas (for separate color layers)\n        let currentLayerCanvas = layerCanvases[currentLayer];\n        currentLayerCanvas.push();\n        currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n        currentLayerCanvas.rotate(fullRotationAngle);\n\n        // Set color for current layer\n        currentColor = palette.colors[currentLayer];\n        mainCanvas.stroke(currentColor);\n        currentLayerCanvas.stroke(currentColor);\n        mainCanvas.strokeWeight(1);\n        currentLayerCanvas.strokeWeight(1);\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch (shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r1) * p.cos(t) + params.d * p.cos((params.R - params.r1) / params.r1 * t);\n            y = (params.R - params.r1) * p.sin(t) - params.d * p.sin((params.R - params.r1) / params.r1 * t);\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r1) * p.cos(t) - params.d * p.cos((params.R + params.r1) / params.r1 * t);\n            y = (params.R + params.r1) * p.sin(t) - params.d * p.sin((params.R + params.r1) / params.r1 * t);\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = 250 * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n            break;\n          case \"PolySpirograph\":\n            // Get base shape parameters\n            const baseSize = params.baseSize;\n            const smallRadius = params.smallCircleRadius;\n            const penLength = params.penLength;\n            const speedRatio = params.speedRatio;\n            const distortion = params.shapeDistortion;\n\n            // Base rotation - slower to make pattern more visible\n            const baseAngle = t * 0.2;\n            let baseCoord = {\n              x: 0,\n              y: 0\n            };\n\n            // Calculate coordinate on base shape perimeter\n            switch (params.baseShape) {\n              case \"circle\":\n                // Simple circle\n                baseCoord.x = baseSize * Math.cos(baseAngle);\n                baseCoord.y = baseSize * Math.sin(baseAngle);\n                break;\n              case \"square\":\n                // Square with sharp corners\n                const squareAngle = baseAngle % (Math.PI / 2);\n                const quadrant = Math.floor(baseAngle / (Math.PI / 2)) % 4;\n\n                // Which edge of the square we're on\n                if (squareAngle < Math.PI / 4) {\n                  // Calculate point on edge, emphasizing corners\n                  const edgePos = Math.tan(squareAngle) / Math.tan(Math.PI / 4);\n                  const adjustedPos = Math.pow(edgePos, distortion); // Make corners more pronounced\n\n                  if (quadrant === 0) baseCoord = {\n                    x: baseSize,\n                    y: baseSize * adjustedPos\n                  };else if (quadrant === 1) baseCoord = {\n                    x: -baseSize * adjustedPos,\n                    y: baseSize\n                  };else if (quadrant === 2) baseCoord = {\n                    x: -baseSize,\n                    y: -baseSize * adjustedPos\n                  };else baseCoord = {\n                    x: baseSize * adjustedPos,\n                    y: -baseSize\n                  };\n                } else {\n                  const edgePos = Math.tan(Math.PI / 2 - squareAngle) / Math.tan(Math.PI / 4);\n                  const adjustedPos = Math.pow(edgePos, distortion);\n                  if (quadrant === 0) baseCoord = {\n                    x: baseSize * adjustedPos,\n                    y: baseSize\n                  };else if (quadrant === 1) baseCoord = {\n                    x: -baseSize,\n                    y: baseSize * adjustedPos\n                  };else if (quadrant === 2) baseCoord = {\n                    x: -baseSize * adjustedPos,\n                    y: -baseSize\n                  };else baseCoord = {\n                    x: baseSize,\n                    y: -baseSize * adjustedPos\n                  };\n                }\n                break;\n              case \"triangle\":\n                // Equilateral triangle with pronounced corners\n                const sides = 3;\n                const triAngle = baseAngle % (2 * Math.PI / sides);\n                const triSide = Math.floor(baseAngle / (2 * Math.PI / sides)) % sides;\n                const pointiness = params.pointiness || 1.3; // Default if not set\n\n                // Triangle vertices (equilateral)\n                const triVertices = [{\n                  x: 0,\n                  y: -baseSize\n                },\n                // Top\n                {\n                  x: baseSize * 0.866,\n                  y: baseSize * 0.5\n                },\n                // Bottom right\n                {\n                  x: -baseSize * 0.866,\n                  y: baseSize * 0.5\n                } // Bottom left\n                ];\n\n                // Calculate position along edge with pointiness factor\n                const fromVertex = triVertices[triSide];\n                const toVertex = triVertices[(triSide + 1) % sides];\n\n                // Use non-linear interpolation to emphasize corners\n                const edgePosition = triAngle / (2 * Math.PI / sides);\n                const adjustedPosition = Math.pow(edgePosition, pointiness);\n                baseCoord.x = fromVertex.x + (toVertex.x - fromVertex.x) * adjustedPosition;\n                baseCoord.y = fromVertex.y + (toVertex.y - fromVertex.y) * adjustedPosition;\n                break;\n              case \"diamond\":\n                // Diamond (rhombus) with sharp points\n                const diamondAngle = baseAngle % (Math.PI / 2);\n                const diamondQuad = Math.floor(baseAngle / (Math.PI / 2)) % 4;\n                const sharpness = params.sharpness || 1.5; // Use sharpness or default\n\n                // Diamond vertices\n                const diamondVertices = [{\n                  x: 0,\n                  y: -baseSize\n                },\n                // Top\n                {\n                  x: baseSize * sharpness,\n                  y: 0\n                },\n                // Right\n                {\n                  x: 0,\n                  y: baseSize\n                },\n                // Bottom\n                {\n                  x: -baseSize * sharpness,\n                  y: 0\n                } // Left\n                ];\n\n                // Calculate with non-linear interpolation to emphasize corners\n                const dFromVertex = diamondVertices[diamondQuad];\n                const dToVertex = diamondVertices[(diamondQuad + 1) % 4];\n                const dEdgePos = diamondAngle / (Math.PI / 2);\n\n                // Make points sharper with distortion\n                const dAdjustedPos = Math.pow(dEdgePos, distortion);\n                baseCoord.x = dFromVertex.x + (dToVertex.x - dFromVertex.x) * dAdjustedPos;\n                baseCoord.y = dFromVertex.y + (dToVertex.y - dFromVertex.y) * dAdjustedPos;\n                break;\n              case \"pentagon\":\n                // Regular pentagon\n                const pentSides = 5;\n                const pentAngle = baseAngle % (2 * Math.PI / pentSides);\n                const pentSide = Math.floor(baseAngle / (2 * Math.PI / pentSides)) % pentSides;\n\n                // Generate pentagon vertices\n                const pentVertices = [];\n                for (let i = 0; i < pentSides; i++) {\n                  const angle = -Math.PI / 2 + i * 2 * Math.PI / pentSides;\n                  pentVertices.push({\n                    x: baseSize * Math.cos(angle),\n                    y: baseSize * Math.sin(angle)\n                  });\n                }\n\n                // Calculate with non-linear interpolation to emphasize corners\n                const pFromVertex = pentVertices[pentSide];\n                const pToVertex = pentVertices[(pentSide + 1) % pentSides];\n                const pEdgePos = pentAngle / (2 * Math.PI / pentSides);\n\n                // Make points sharper with distortion\n                const pAdjustedPos = Math.pow(pEdgePos, distortion);\n                baseCoord.x = pFromVertex.x + (pToVertex.x - pFromVertex.x) * pAdjustedPos;\n                baseCoord.y = pFromVertex.y + (pToVertex.y - pFromVertex.y) * pAdjustedPos;\n                break;\n            }\n\n            // Calculate small circle position and pen position\n            const smallCircleAngle = baseAngle * speedRatio;\n\n            // Position of pen relative to small circle center\n            const penAngle = smallCircleAngle * 3.1; // Different ratio for more complex patterns\n\n            // Calculate final position\n            x = baseCoord.x + smallRadius * Math.cos(smallCircleAngle) + penLength * Math.cos(penAngle);\n            y = baseCoord.y + smallRadius * Math.sin(smallCircleAngle) + penLength * Math.sin(penAngle);\n            break;\n        }\n\n        // Apply dynamic scaling to ensure pattern fits\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment on both canvases\n        if (prevX !== null) {\n          mainCanvas.line(prevX, prevY, x, y);\n          currentLayerCanvas.line(prevX, prevY, x, y);\n        }\n\n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n\n          // Check if we've reached a layer transition point\n          if (currentLayer < layerCompletionPoints.length - 1 && t >= layerCompletionPoints[currentLayer]) {\n            // Time to move to next layer\n            currentLayer++;\n            // Make sure we don't go beyond the array bounds\n            if (currentLayer < layerCanvases.length) {\n              currentLayerCanvas = layerCanvases[currentLayer];\n              currentLayerCanvas.push();\n              currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n              // Apply rotation to the new layer\n              let fullRotationAngle = t / maxT * p.TWO_PI;\n              currentLayerCanvas.rotate(fullRotationAngle);\n              currentColor = palette.colors[Math.min(currentLayer, palette.colors.length - 1)];\n              mainCanvas.stroke(currentColor);\n              currentLayerCanvas.stroke(currentColor);\n            }\n          }\n\n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n\n          // Re-calculate based on shape type with updated t\n          switch (shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r1) * p.cos(t) + params.d * p.cos((params.R - params.r1) / params.r1 * t);\n              nextY = (params.R - params.r1) * p.sin(t) - params.d * p.sin((params.R - params.r1) / params.r1 * t);\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r1) * p.cos(t) - params.d * p.cos((params.R + params.r1) / params.r1 * t);\n              nextY = (params.R + params.r1) * p.sin(t) - params.d * p.sin((params.R + params.r1) / params.r1 * t);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n              break;\n            case \"PolySpirograph\":\n              // Base shape parameters\n              const baseSize = params.baseSize;\n              const smallRadius = params.smallCircleRadius;\n              const penLength = params.penLength;\n              const speedRatio = params.speedRatio;\n              const distortion = params.shapeDistortion;\n\n              // Base rotation - slower to make pattern more visible\n              const baseAngle = t * 0.2;\n              let baseCoord = {\n                x: 0,\n                y: 0\n              };\n\n              // Calculate coordinate on base shape perimeter\n              switch (params.baseShape) {\n                case \"circle\":\n                  // Simple circle\n                  baseCoord.x = baseSize * Math.cos(baseAngle);\n                  baseCoord.y = baseSize * Math.sin(baseAngle);\n                  break;\n                case \"square\":\n                  // Square with sharp corners\n                  const squareAngle = baseAngle % (Math.PI / 2);\n                  const quadrant = Math.floor(baseAngle / (Math.PI / 2)) % 4;\n\n                  // Which edge of the square we're on\n                  if (squareAngle < Math.PI / 4) {\n                    // Calculate point on edge, emphasizing corners\n                    const edgePos = Math.tan(squareAngle) / Math.tan(Math.PI / 4);\n                    const adjustedPos = Math.pow(edgePos, distortion); // Make corners more pronounced\n\n                    if (quadrant === 0) baseCoord = {\n                      x: baseSize,\n                      y: baseSize * adjustedPos\n                    };else if (quadrant === 1) baseCoord = {\n                      x: -baseSize * adjustedPos,\n                      y: baseSize\n                    };else if (quadrant === 2) baseCoord = {\n                      x: -baseSize,\n                      y: -baseSize * adjustedPos\n                    };else baseCoord = {\n                      x: baseSize * adjustedPos,\n                      y: -baseSize\n                    };\n                  } else {\n                    const edgePos = Math.tan(Math.PI / 2 - squareAngle) / Math.tan(Math.PI / 4);\n                    const adjustedPos = Math.pow(edgePos, distortion);\n                    if (quadrant === 0) baseCoord = {\n                      x: baseSize * adjustedPos,\n                      y: baseSize\n                    };else if (quadrant === 1) baseCoord = {\n                      x: -baseSize,\n                      y: baseSize * adjustedPos\n                    };else if (quadrant === 2) baseCoord = {\n                      x: -baseSize * adjustedPos,\n                      y: -baseSize\n                    };else baseCoord = {\n                      x: baseSize,\n                      y: -baseSize * adjustedPos\n                    };\n                  }\n                  break;\n                case \"triangle\":\n                  // Equilateral triangle with pronounced corners\n                  const sides = 3;\n                  const triAngle = baseAngle % (2 * Math.PI / sides);\n                  const triSide = Math.floor(baseAngle / (2 * Math.PI / sides)) % sides;\n                  const pointiness = params.pointiness || 1.3; // Default if not set\n\n                  // Triangle vertices (equilateral)\n                  const triVertices = [{\n                    x: 0,\n                    y: -baseSize\n                  },\n                  // Top\n                  {\n                    x: baseSize * 0.866,\n                    y: baseSize * 0.5\n                  },\n                  // Bottom right\n                  {\n                    x: -baseSize * 0.866,\n                    y: baseSize * 0.5\n                  } // Bottom left\n                  ];\n\n                  // Calculate position along edge with pointiness factor\n                  const fromVertex = triVertices[triSide];\n                  const toVertex = triVertices[(triSide + 1) % sides];\n\n                  // Use non-linear interpolation to emphasize corners\n                  const edgePosition = triAngle / (2 * Math.PI / sides);\n                  const adjustedPosition = Math.pow(edgePosition, pointiness);\n                  baseCoord.x = fromVertex.x + (toVertex.x - fromVertex.x) * adjustedPosition;\n                  baseCoord.y = fromVertex.y + (toVertex.y - fromVertex.y) * adjustedPosition;\n                  break;\n                case \"diamond\":\n                  // Diamond (rhombus) with sharp points\n                  const diamondAngle = baseAngle % (Math.PI / 2);\n                  const diamondQuad = Math.floor(baseAngle / (Math.PI / 2)) % 4;\n                  const sharpness = params.sharpness || 1.5; // Use sharpness or default\n\n                  // Diamond vertices\n                  const diamondVertices = [{\n                    x: 0,\n                    y: -baseSize\n                  },\n                  // Top\n                  {\n                    x: baseSize * sharpness,\n                    y: 0\n                  },\n                  // Right\n                  {\n                    x: 0,\n                    y: baseSize\n                  },\n                  // Bottom\n                  {\n                    x: -baseSize * sharpness,\n                    y: 0\n                  } // Left\n                  ];\n\n                  // Calculate with non-linear interpolation to emphasize corners\n                  const dFromVertex = diamondVertices[diamondQuad];\n                  const dToVertex = diamondVertices[(diamondQuad + 1) % 4];\n                  const dEdgePos = diamondAngle / (Math.PI / 2);\n\n                  // Make points sharper with distortion\n                  const dAdjustedPos = Math.pow(dEdgePos, distortion);\n                  baseCoord.x = dFromVertex.x + (dToVertex.x - dFromVertex.x) * dAdjustedPos;\n                  baseCoord.y = dFromVertex.y + (dToVertex.y - dFromVertex.y) * dAdjustedPos;\n                  break;\n                case \"pentagon\":\n                  // Regular pentagon\n                  const pentSides = 5;\n                  const pentAngle = baseAngle % (2 * Math.PI / pentSides);\n                  const pentSide = Math.floor(baseAngle / (2 * Math.PI / pentSides)) % pentSides;\n\n                  // Generate pentagon vertices\n                  const pentVertices = [];\n                  for (let i = 0; i < pentSides; i++) {\n                    const angle = -Math.PI / 2 + i * 2 * Math.PI / pentSides;\n                    pentVertices.push({\n                      x: baseSize * Math.cos(angle),\n                      y: baseSize * Math.sin(angle)\n                    });\n                  }\n\n                  // Calculate with non-linear interpolation to emphasize corners\n                  const pFromVertex = pentVertices[pentSide];\n                  const pToVertex = pentVertices[(pentSide + 1) % pentSides];\n                  const pEdgePos = pentAngle / (2 * Math.PI / pentSides);\n\n                  // Make points sharper with distortion\n                  const pAdjustedPos = Math.pow(pEdgePos, distortion);\n                  baseCoord.x = pFromVertex.x + (pToVertex.x - pFromVertex.x) * pAdjustedPos;\n                  baseCoord.y = pFromVertex.y + (pToVertex.y - pFromVertex.y) * pAdjustedPos;\n                  break;\n              }\n\n              // Calculate small circle position and pen position\n              const smallCircleAngle = baseAngle * speedRatio;\n\n              // Position of pen relative to small circle center\n              const penAngle = smallCircleAngle * 3.1; // Different ratio for more complex patterns\n\n              // Calculate final position\n              nextX = baseCoord.x + smallRadius * Math.cos(smallCircleAngle) + penLength * Math.cos(penAngle);\n              nextY = baseCoord.y + smallRadius * Math.sin(smallCircleAngle) + penLength * Math.sin(penAngle);\n              break;\n          }\n\n          // Apply dynamic scaling to ensure pattern fits\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n\n          // Draw the line on both canvases\n          mainCanvas.line(prevX, prevY, nextX, nextY);\n          currentLayerCanvas.line(prevX, prevY, nextX, nextY);\n\n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n\n        // Increment time\n        t += 0.015;\n\n        // Update global rotation\n        globalAngle = t / maxT * p.TWO_PI;\n\n        // Update progress\n        const currentProgress = Math.min(100, Math.round(t / maxT * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n\n        // End current push transforms\n        mainCanvas.pop();\n        currentLayerCanvas.pop();\n\n        // Check if drawing is complete\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n\n          // Make sure to end all open transforms\n          try {\n            mainCanvas.pop();\n          } catch (e) {\n            // Ignore if already popped\n          }\n\n          // Safely pop any open layer transforms\n          for (let i = 0; i < layerCanvases.length; i++) {\n            try {\n              layerCanvases[i].pop();\n            } catch (e) {\n              // Ignore errors if there's no matching push\n              console.log(\"Note: Layer\", i, \"didn't need popping\");\n            }\n          }\n\n          // Generate final output with black background and all layers\n          finalOutput = generateFinalOutput();\n\n          // Notify parent that drawing is complete\n          onDrawingComplete && onDrawingComplete(finalOutput);\n        }\n      };\n\n      // Display info on the canvas\n      p.displayInfo = function () {\n        // Create a semi-transparent background for the text\n        p.fill(0, 200);\n        p.noStroke();\n        p.rect(10, 10, 380, 100, 10);\n\n        // Display NFT info\n        p.textSize(24);\n        p.fill(255);\n        p.text(`Spyro #${currentSeed}`, 20, 40);\n        p.textSize(16);\n        p.fill(palette.colors[0]);\n        p.text(`ðŸŒŸ ${getShapeDescription()} Â· ${rarityText}`, 20, 70);\n        p.fill(palette.colors[1]);\n        p.text(`ðŸŽ¨ Palette: ${palette.name} Â· ${palette.rarity}`, 20, 95);\n      };\n\n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n\n      // Change to a specific seed\n      p.setSeed = newSeed => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n\n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spiro-canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: canvasRef,\n      className: \"canvas-wrapper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1022,\n      columnNumber: 7\n    }, this), isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1025,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"progress-text\",\n        children: [progress, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1026,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1024,\n      columnNumber: 9\n    }, this), !isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-complete\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Drawing complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1031,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1030,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1021,\n    columnNumber: 5\n  }, this);\n};\n_s(SpiroCanvas, \"vG581M3D6HIZspCQRmOO1WkIWxY=\");\n_c = SpiroCanvas;\nexport default SpiroCanvas;\nvar _c;\n$RefreshReg$(_c, \"SpiroCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","p5","jsxDEV","_jsxDEV","SpiroCanvas","seed","setSeed","onShapeChange","onPaletteChange","onDrawingComplete","_s","canvasRef","p5Instance","isDrawing","setIsDrawing","progress","setProgress","sketch","p","palettes","name","colors","rarity","shapeRarity","mainCanvas","layerCanvases","finalOutput","shapeType","params","palette","currentColor","t","maxT","prevX","prevY","globalAngle","currentColorIndex","rarityText","currentSeed","Math","floor","random","totalLayers","currentLayer","layerCompletionPoints","findGCD","a","b","round","calculatePatternBoundaries","maxX","maxY","step","x","y","R","r1","cos","d","sin","rhodoneaRadius","k","A","delta","B","baseSize","smallRadius","smallCircleRadius","penLength","speedRatio","distortion","shapeDistortion","baseAngle","baseCoord","baseShape","squareAngle","PI","quadrant","edgePos","tan","adjustedPos","pow","sides","triAngle","triSide","pointiness","triVertices","fromVertex","toVertex","edgePosition","adjustedPosition","diamondAngle","diamondQuad","sharpness","diamondVertices","dFromVertex","dToVertex","dEdgePos","dAdjustedPos","pentSides","pentAngle","pentSide","pentVertices","i","angle","push","pFromVertex","pToVertex","pEdgePos","pAdjustedPos","smallCircleAngle","penAngle","max","abs","getShapeDescription","shapeName","charAt","toUpperCase","slice","getScaleFactor","maxExtent","maxAllowedExtent","generateFinalOutput","backgroundCanvas","createGraphics","background","transparentSpiro","clear","length","image","selectShapeType","shapeRoll","shapeIndex","int","TWO_PI","gcd2","gcd","shapes","loops","lcm","type","resetSketch","layerCanvas","randomSeed","paletteRoll","strokeWeight","noFill","console","log","isLooping","loop","setup","canvas","createCanvas","style","frameRate","strokeJoin","ROUND","strokeCap","draw","frameCount","displayInfo","scaleFactor","translate","width","height","fullRotationAngle","rotate","currentLayerCanvas","stroke","line","stepsPerFrame","min","nextX","nextY","currentProgress","pop","noLoop","e","fill","noStroke","rect","textSize","text","generateNewSeed","newSeed","current","remove","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\n\nconst SpiroCanvas = ({ \n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = (p) => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [\n        {name: \"Neon Mirage\", colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"], rarity: \"Common\"},\n        {name: \"Digital Dream\", colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"], rarity: \"Uncommon\"},\n        {name: \"Crystal Sunset\", colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"], rarity: \"Rare\"},\n        {name: \"Cyber Haze\", colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"], rarity: \"Super Rare\"},\n        {name: \"Pastel Vapor\", colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"], rarity: \"Legendary\"}\n      ];\n\n      // Shape rarity distribution\n      const shapeRarity = {\n        \"Rhodonea\": \"Common\", // 40%\n        \"Epitrochoid\": \"Uncommon\", // 30%\n        \"Hypotrochoid\": \"Rare\", // 20%\n        \"PolySpirograph\": \"Super Rare\", // 8%\n        \"Lissajous\": \"Legendary\" // 2%\n      };\n\n      // Multiple layer canvases\n      let mainCanvas; // Main visible canvas with black background\n      let layerCanvases = []; // Array of layer graphics for each color\n      let finalOutput; // Final combined output\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let currentColorIndex = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n      \n      // Layer tracking\n      let totalLayers = 5; // Match number of colors in palette\n      let currentLayer = 0;\n      let layerCompletionPoints = []; // Points at which to switch layers\n      \n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.round(a);\n        b = Math.round(b);\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Calculate the maximum boundaries of the pattern to ensure it fits\n      const calculatePatternBoundaries = () => {\n        let maxX = 0;\n        let maxY = 0;\n        \n        // Sample many points to find the maximum extent\n        for (let step = 0; step < maxT; step += 0.1) {\n          let x = 0;\n          let y = 0;\n          \n          // Calculate position based on shape type\n          switch(shapeType) {\n            case \"Hypotrochoid\":\n              x = (params.R - params.r1) * p.cos(step) + params.d * p.cos(((params.R - params.r1) / params.r1) * step);\n              y = (params.R - params.r1) * p.sin(step) - params.d * p.sin(((params.R - params.r1) / params.r1) * step);\n              break;\n            case \"Epitrochoid\":\n              x = (params.R + params.r1) * p.cos(step) - params.d * p.cos(((params.R + params.r1) / params.r1) * step);\n              y = (params.R + params.r1) * p.sin(step) - params.d * p.sin(((params.R + params.r1) / params.r1) * step);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * step);\n              x = rhodoneaRadius * p.cos(step);\n              y = rhodoneaRadius * p.sin(step);\n              break;\n            case \"Lissajous\":\n              x = params.A * p.sin(params.a * step + params.delta);\n              y = params.B * p.sin(params.b * step);\n              break;\n            case \"PolySpirograph\":\n              // Get base shape parameters\n              const baseSize = params.baseSize;\n              const smallRadius = params.smallCircleRadius;\n              const penLength = params.penLength;\n              const speedRatio = params.speedRatio;\n              const distortion = params.shapeDistortion;\n              \n              // Base rotation - slower to make pattern more visible\n              const baseAngle = step * 0.2;\n              let baseCoord = {x: 0, y: 0};\n              \n              // Calculate coordinate on base shape perimeter\n              switch(params.baseShape) {\n                case \"circle\":\n                  // Simple circle\n                  baseCoord.x = baseSize * Math.cos(baseAngle);\n                  baseCoord.y = baseSize * Math.sin(baseAngle);\n                  break;\n                  \n                case \"square\":\n                  // Square with sharp corners\n                  const squareAngle = baseAngle % (Math.PI/2);\n                  const quadrant = Math.floor(baseAngle / (Math.PI/2)) % 4;\n                  \n                  // Which edge of the square we're on\n                  if (squareAngle < Math.PI/4) {\n                    // Calculate point on edge, emphasizing corners\n                    const edgePos = Math.tan(squareAngle) / Math.tan(Math.PI/4);\n                    const adjustedPos = Math.pow(edgePos, distortion); // Make corners more pronounced\n                    \n                    if (quadrant === 0) baseCoord = {x: baseSize, y: baseSize * adjustedPos};\n                    else if (quadrant === 1) baseCoord = {x: -baseSize * adjustedPos, y: baseSize};\n                    else if (quadrant === 2) baseCoord = {x: -baseSize, y: -baseSize * adjustedPos};\n                    else baseCoord = {x: baseSize * adjustedPos, y: -baseSize};\n                  } else {\n                    const edgePos = Math.tan(Math.PI/2 - squareAngle) / Math.tan(Math.PI/4);\n                    const adjustedPos = Math.pow(edgePos, distortion);\n                    \n                    if (quadrant === 0) baseCoord = {x: baseSize * adjustedPos, y: baseSize};\n                    else if (quadrant === 1) baseCoord = {x: -baseSize, y: baseSize * adjustedPos};\n                    else if (quadrant === 2) baseCoord = {x: -baseSize * adjustedPos, y: -baseSize};\n                    else baseCoord = {x: baseSize, y: -baseSize * adjustedPos};\n                  }\n                  break;\n                  \n                case \"triangle\":\n                  // Equilateral triangle with pronounced corners\n                  const sides = 3;\n                  const triAngle = baseAngle % (2*Math.PI/sides);\n                  const triSide = Math.floor(baseAngle / (2*Math.PI/sides)) % sides;\n                  const pointiness = params.pointiness || 1.3; // Default if not set\n                  \n                  // Triangle vertices (equilateral)\n                  const triVertices = [\n                    {x: 0, y: -baseSize}, // Top\n                    {x: baseSize * 0.866, y: baseSize * 0.5}, // Bottom right\n                    {x: -baseSize * 0.866, y: baseSize * 0.5}  // Bottom left\n                  ];\n                  \n                  // Calculate position along edge with pointiness factor\n                  const fromVertex = triVertices[triSide];\n                  const toVertex = triVertices[(triSide + 1) % sides];\n                  \n                  // Use non-linear interpolation to emphasize corners\n                  const edgePosition = triAngle / (2*Math.PI/sides);\n                  const adjustedPosition = Math.pow(edgePosition, pointiness);\n                  \n                  baseCoord.x = fromVertex.x + (toVertex.x - fromVertex.x) * adjustedPosition;\n                  baseCoord.y = fromVertex.y + (toVertex.y - fromVertex.y) * adjustedPosition;\n                  break;\n                  \n                case \"diamond\":\n                  // Diamond (rhombus) with sharp points\n                  const diamondAngle = baseAngle % (Math.PI/2);\n                  const diamondQuad = Math.floor(baseAngle / (Math.PI/2)) % 4;\n                  const sharpness = params.sharpness || 1.5; // Use sharpness or default\n                  \n                  // Diamond vertices\n                  const diamondVertices = [\n                    {x: 0, y: -baseSize}, // Top\n                    {x: baseSize * sharpness, y: 0}, // Right\n                    {x: 0, y: baseSize}, // Bottom\n                    {x: -baseSize * sharpness, y: 0} // Left\n                  ];\n                  \n                  // Calculate with non-linear interpolation to emphasize corners\n                  const dFromVertex = diamondVertices[diamondQuad];\n                  const dToVertex = diamondVertices[(diamondQuad + 1) % 4];\n                  const dEdgePos = diamondAngle / (Math.PI/2);\n                  \n                  // Make points sharper with distortion\n                  const dAdjustedPos = Math.pow(dEdgePos, distortion);\n                  \n                  baseCoord.x = dFromVertex.x + (dToVertex.x - dFromVertex.x) * dAdjustedPos;\n                  baseCoord.y = dFromVertex.y + (dToVertex.y - dFromVertex.y) * dAdjustedPos;\n                  break;\n                  \n                case \"pentagon\":\n                  // Regular pentagon\n                  const pentSides = 5;\n                  const pentAngle = baseAngle % (2*Math.PI/pentSides);\n                  const pentSide = Math.floor(baseAngle / (2*Math.PI/pentSides)) % pentSides;\n                  \n                  // Generate pentagon vertices\n                  const pentVertices = [];\n                  for (let i = 0; i < pentSides; i++) {\n                    const angle = -Math.PI/2 + i * 2*Math.PI/pentSides;\n                    pentVertices.push({\n                      x: baseSize * Math.cos(angle),\n                      y: baseSize * Math.sin(angle)\n                    });\n                  }\n                  \n                  // Calculate with non-linear interpolation to emphasize corners\n                  const pFromVertex = pentVertices[pentSide];\n                  const pToVertex = pentVertices[(pentSide + 1) % pentSides];\n                  const pEdgePos = pentAngle / (2*Math.PI/pentSides);\n                  \n                  // Make points sharper with distortion\n                  const pAdjustedPos = Math.pow(pEdgePos, distortion);\n                  \n                  baseCoord.x = pFromVertex.x + (pToVertex.x - pFromVertex.x) * pAdjustedPos;\n                  baseCoord.y = pFromVertex.y + (pToVertex.y - pFromVertex.y) * pAdjustedPos;\n                  break;\n              }\n              \n              // Calculate small circle position and pen position\n              const smallCircleAngle = baseAngle * speedRatio;\n              \n              // Position of pen relative to small circle center\n              const penAngle = smallCircleAngle * 3.1; // Different ratio for more complex patterns\n              \n              // Calculate final position\n              x = baseCoord.x + smallRadius * Math.cos(smallCircleAngle) + penLength * Math.cos(penAngle);\n              y = baseCoord.y + smallRadius * Math.sin(smallCircleAngle) + penLength * Math.sin(penAngle);\n              break;\n          }\n          \n          // Update max boundaries\n          maxX = Math.max(maxX, Math.abs(x));\n          maxY = Math.max(maxY, Math.abs(y));\n        }\n        \n        return { maxX, maxY };\n      };\n\n      // Get a more detailed description of the shape\n      const getShapeDescription = () => {\n        if (shapeType === \"PolySpirograph\") {\n          // Capitalize first letter\n          const shapeName = params.baseShape.charAt(0).toUpperCase() + params.baseShape.slice(1);\n          return `${shapeType} (${shapeName})`;\n        }\n        return shapeType;\n      };\n\n      // Get the scale factor needed to fit the pattern\n      const getScaleFactor = () => {\n        const { maxX, maxY } = calculatePatternBoundaries();\n        const maxExtent = Math.max(maxX, maxY);\n        \n        // Canvas size is 600x600, center is at 300,300\n        // Leave a 50px margin on all sides\n        const maxAllowedExtent = 250; // (600/2 - 50)\n        \n        // If pattern is too big, scale it down\n        if (maxExtent > maxAllowedExtent) {\n          return maxAllowedExtent / maxExtent;\n        }\n        \n        // Otherwise, keep original scale\n        return 1.0;\n      };\n\n      // Get the final image when completed\n      const generateFinalOutput = () => {\n        // Create two separate graphics:\n        // 1. The background canvas (black)\n        let backgroundCanvas = p.createGraphics(600, 600);\n        backgroundCanvas.background(0); // BLACK BACKGROUND\n        \n        // 2. The transparent spirograph with all layers merged (but no background)\n        let transparentSpiro = p.createGraphics(600, 600);\n        transparentSpiro.clear(); // Completely transparent\n        \n        // Overlay all layers onto the transparent spirograph\n        for (let i = 0; i < layerCanvases.length; i++) {\n          transparentSpiro.image(layerCanvases[i], 0, 0);\n        }\n        \n        // Return just the transparent spirograph - the black background stays in the canvas\n        return transparentSpiro;\n      };\n      \n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        \n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Rhodonea - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Epitrochoid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Hypotrochoid - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // PolySpirograph - Super Rare 8%\n        } else {\n          shapeIndex = 4; // Lissajous - Legendary 2%\n        }\n        \n        params = {}; // Reset params\n        \n        switch(shapeIndex) {\n          case 0: // Rhodonea (now Common)\n            shapeType = \"Rhodonea\";\n            params.k = p.int(p.random(4, 9));\n            \n            maxT = (params.k % 2 === 0) ? p.TWO_PI : p.PI;\n            break;\n            \n          case 1: // Epitrochoid (remains Uncommon)\n            shapeType = \"Epitrochoid\";\n            params.R = p.random(200, 300);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(80, 160);\n            \n            const gcd2 = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd2);\n            break;\n            \n          case 2: // Hypotrochoid (now Rare)\n            shapeType = \"Hypotrochoid\";\n            params.R = p.random(250, 400);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(100, 180);\n            \n            const gcd = findGCD(params.R, params.r1);\n            maxT = p.TWO_PI * (params.r1 / gcd);\n            break;\n            \n          case 3: // PolySpirograph (Super Rare)\n            shapeType = \"PolySpirograph\";\n            \n            // Select a base shape randomly (no oval)\n            const shapes = [\"triangle\", \"square\", \"diamond\", \"circle\", \"pentagon\"];\n            params.baseShape = shapes[Math.floor(p.random(shapes.length))];\n            \n            // Base parameters with more extreme values for distinctive shapes\n            params.baseSize = p.random(130, 200);  // Size of the base shape\n            params.smallCircleRadius = p.random(30, 60); // Radius of moving circle\n            params.penLength = p.random(50, 100);  // Distance from small circle center to pen\n            \n            // More distinctive parameters\n            params.speedRatio = p.random(7, 13) / 10;  // Ratio between base rotation and small circle rotation\n            params.loops = p.int(p.random(4, 8));      // Number of complete loops\n            \n            // Parameters to make shapes more pronounced\n            params.shapeDistortion = p.random(0.8, 1.5); // How much to emphasize the shape\n            \n            // For specific shapes\n            if (params.baseShape === \"diamond\") {\n              params.sharpness = p.random(1.2, 1.8); // Sharper diamonds\n            }\n            \n            if (params.baseShape === \"pentagon\") {\n              params.sides = 5; // Fixed at 5 for pentagon\n            }\n            \n            if (params.baseShape === \"triangle\") {\n              // Make triangles more extreme\n              params.pointiness = p.random(1.2, 1.6);\n            }\n            \n            // Calculate max time - make it depend on shape complexity\n            maxT = p.TWO_PI * params.loops;\n            break;\n            \n          case 4: // Lissajous (now Legendary)\n            shapeType = \"Lissajous\";\n            params.A = p.random(200, 350);\n            params.B = p.random(200, 350);\n            params.a = p.int(p.random(3, 7));\n            params.b = p.int(p.random(3, 7));\n            params.delta = p.random(0, p.PI);\n            \n            // Find cycle length\n            const lcm = (params.a * params.b) / findGCD(params.a, params.b);\n            maxT = p.TWO_PI * lcm;\n            break;\n        }\n        \n        // Ensure we have enough time for a complete pattern\n        maxT = p.max(maxT, p.TWO_PI * 10);\n        \n        // Set up layer transitions - divide maxT into segments for each layer\n        layerCompletionPoints = [];\n        for (let i = 1; i < totalLayers; i++) {\n          layerCompletionPoints.push((i / totalLayers) * maxT);\n        }\n        layerCompletionPoints.push(maxT); // Final completion point\n        \n        rarityText = shapeRarity[shapeType];\n        \n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: { ...params }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        // Clear all canvases\n        p.background(0);\n        mainCanvas.background(0);\n        \n        // Reset layer canvases\n        layerCanvases = [];\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background for each layer\n          layerCanvases.push(layerCanvas);\n        }\n        \n        p.randomSeed(currentSeed);\n        \n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        \n        totalLayers = palette.colors.length; // Match layers to palette colors\n        \n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n        \n        // Reset drawing variables\n        t = 0;\n        prevX = null;\n        prevY = null;\n        globalAngle = 0;\n        currentColorIndex = 0;\n        currentLayer = 0;\n        \n        // Pick a shape type\n        selectShapeType();\n        \n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        \n        console.log(`Spirograph #${currentSeed} â€” ${getShapeDescription()} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n        \n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        \n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function() {\n        // Create main canvas with black background\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        canvas.style('background-color', 'black'); // Ensure canvas always shows black\n        \n        // Initialize main drawing canvas with black background\n        mainCanvas = p.createGraphics(600, 600);\n        mainCanvas.background(0);\n        \n        // Initialize layer canvases - one for each color\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background\n          layerCanvases.push(layerCanvas);\n        }\n        \n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n        \n        // Apply same settings to all layer canvases\n        for (let canvas of layerCanvases) {\n          canvas.strokeJoin(p.ROUND);\n          canvas.strokeCap(p.ROUND);\n        }\n        \n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n        \n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function() {\n        // Clear main canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n        \n        // Display in-progress work\n        p.image(mainCanvas, 0, 0);\n        \n        // Display info\n        p.displayInfo();\n        \n        // Get the appropriate scale factor to fit pattern in canvas\n        const scaleFactor = getScaleFactor();\n        \n        // Draw on the main canvas\n        mainCanvas.push();\n        mainCanvas.translate(mainCanvas.width / 2, mainCanvas.height / 2);\n        \n        // Add rotation that completes during drawing\n        let fullRotationAngle = (t / maxT) * p.TWO_PI;\n        mainCanvas.rotate(fullRotationAngle);\n        \n        // Current layer canvas (for separate color layers)\n        let currentLayerCanvas = layerCanvases[currentLayer];\n        currentLayerCanvas.push();\n        currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n        currentLayerCanvas.rotate(fullRotationAngle);\n        \n        // Set color for current layer\n        currentColor = palette.colors[currentLayer];\n        mainCanvas.stroke(currentColor);\n        currentLayerCanvas.stroke(currentColor);\n        mainCanvas.strokeWeight(1);\n        currentLayerCanvas.strokeWeight(1);\n\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch(shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r1) * p.cos(t) + params.d * p.cos(((params.R - params.r1) / params.r1) * t);\n            y = (params.R - params.r1) * p.sin(t) - params.d * p.sin(((params.R - params.r1) / params.r1) * t);\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r1) * p.cos(t) - params.d * p.cos(((params.R + params.r1) / params.r1) * t);\n            y = (params.R + params.r1) * p.sin(t) - params.d * p.sin(((params.R + params.r1) / params.r1) * t);\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = 250 * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n            break;\n          case \"PolySpirograph\":\n            // Get base shape parameters\n            const baseSize = params.baseSize;\n            const smallRadius = params.smallCircleRadius;\n            const penLength = params.penLength;\n            const speedRatio = params.speedRatio;\n            const distortion = params.shapeDistortion;\n            \n            // Base rotation - slower to make pattern more visible\n            const baseAngle = t * 0.2;\n            let baseCoord = {x: 0, y: 0};\n            \n            // Calculate coordinate on base shape perimeter\n            switch(params.baseShape) {\n              case \"circle\":\n                // Simple circle\n                baseCoord.x = baseSize * Math.cos(baseAngle);\n                baseCoord.y = baseSize * Math.sin(baseAngle);\n                break;\n                \n              case \"square\":\n                // Square with sharp corners\n                const squareAngle = baseAngle % (Math.PI/2);\n                const quadrant = Math.floor(baseAngle / (Math.PI/2)) % 4;\n                \n                // Which edge of the square we're on\n                if (squareAngle < Math.PI/4) {\n                  // Calculate point on edge, emphasizing corners\n                  const edgePos = Math.tan(squareAngle) / Math.tan(Math.PI/4);\n                  const adjustedPos = Math.pow(edgePos, distortion); // Make corners more pronounced\n                  \n                  if (quadrant === 0) baseCoord = {x: baseSize, y: baseSize * adjustedPos};\n                  else if (quadrant === 1) baseCoord = {x: -baseSize * adjustedPos, y: baseSize};\n                  else if (quadrant === 2) baseCoord = {x: -baseSize, y: -baseSize * adjustedPos};\n                  else baseCoord = {x: baseSize * adjustedPos, y: -baseSize};\n                } else {\n                  const edgePos = Math.tan(Math.PI/2 - squareAngle) / Math.tan(Math.PI/4);\n                  const adjustedPos = Math.pow(edgePos, distortion);\n                  \n                  if (quadrant === 0) baseCoord = {x: baseSize * adjustedPos, y: baseSize};\n                  else if (quadrant === 1) baseCoord = {x: -baseSize, y: baseSize * adjustedPos};\n                  else if (quadrant === 2) baseCoord = {x: -baseSize * adjustedPos, y: -baseSize};\n                  else baseCoord = {x: baseSize, y: -baseSize * adjustedPos};\n                }\n                break;\n                \n              case \"triangle\":\n                // Equilateral triangle with pronounced corners\n                const sides = 3;\n                const triAngle = baseAngle % (2*Math.PI/sides);\n                const triSide = Math.floor(baseAngle / (2*Math.PI/sides)) % sides;\n                const pointiness = params.pointiness || 1.3; // Default if not set\n                \n                // Triangle vertices (equilateral)\n                const triVertices = [\n                  {x: 0, y: -baseSize}, // Top\n                  {x: baseSize * 0.866, y: baseSize * 0.5}, // Bottom right\n                  {x: -baseSize * 0.866, y: baseSize * 0.5}  // Bottom left\n                ];\n                \n                // Calculate position along edge with pointiness factor\n                const fromVertex = triVertices[triSide];\n                const toVertex = triVertices[(triSide + 1) % sides];\n                \n                // Use non-linear interpolation to emphasize corners\n                const edgePosition = triAngle / (2*Math.PI/sides);\n                const adjustedPosition = Math.pow(edgePosition, pointiness);\n                \n                baseCoord.x = fromVertex.x + (toVertex.x - fromVertex.x) * adjustedPosition;\n                baseCoord.y = fromVertex.y + (toVertex.y - fromVertex.y) * adjustedPosition;\n                break;\n                \n              case \"diamond\":\n                // Diamond (rhombus) with sharp points\n                const diamondAngle = baseAngle % (Math.PI/2);\n                const diamondQuad = Math.floor(baseAngle / (Math.PI/2)) % 4;\n                const sharpness = params.sharpness || 1.5; // Use sharpness or default\n                \n                // Diamond vertices\n                const diamondVertices = [\n                  {x: 0, y: -baseSize}, // Top\n                  {x: baseSize * sharpness, y: 0}, // Right\n                  {x: 0, y: baseSize}, // Bottom\n                  {x: -baseSize * sharpness, y: 0} // Left\n                ];\n                \n                // Calculate with non-linear interpolation to emphasize corners\n                const dFromVertex = diamondVertices[diamondQuad];\n                const dToVertex = diamondVertices[(diamondQuad + 1) % 4];\n                const dEdgePos = diamondAngle / (Math.PI/2);\n                \n                // Make points sharper with distortion\n                const dAdjustedPos = Math.pow(dEdgePos, distortion);\n                \n                baseCoord.x = dFromVertex.x + (dToVertex.x - dFromVertex.x) * dAdjustedPos;\n                baseCoord.y = dFromVertex.y + (dToVertex.y - dFromVertex.y) * dAdjustedPos;\n                break;\n                \n              case \"pentagon\":\n                // Regular pentagon\n                const pentSides = 5;\n                const pentAngle = baseAngle % (2*Math.PI/pentSides);\n                const pentSide = Math.floor(baseAngle / (2*Math.PI/pentSides)) % pentSides;\n                \n                // Generate pentagon vertices\n                const pentVertices = [];\n                for (let i = 0; i < pentSides; i++) {\n                  const angle = -Math.PI/2 + i * 2*Math.PI/pentSides;\n                  pentVertices.push({\n                    x: baseSize * Math.cos(angle),\n                    y: baseSize * Math.sin(angle)\n                  });\n                }\n                \n                // Calculate with non-linear interpolation to emphasize corners\n                const pFromVertex = pentVertices[pentSide];\n                const pToVertex = pentVertices[(pentSide + 1) % pentSides];\n                const pEdgePos = pentAngle / (2*Math.PI/pentSides);\n                \n                // Make points sharper with distortion\n                const pAdjustedPos = Math.pow(pEdgePos, distortion);\n                \n                baseCoord.x = pFromVertex.x + (pToVertex.x - pFromVertex.x) * pAdjustedPos;\n                baseCoord.y = pFromVertex.y + (pToVertex.y - pFromVertex.y) * pAdjustedPos;\n                break;\n            }\n            \n            // Calculate small circle position and pen position\n            const smallCircleAngle = baseAngle * speedRatio;\n            \n            // Position of pen relative to small circle center\n            const penAngle = smallCircleAngle * 3.1; // Different ratio for more complex patterns\n            \n            // Calculate final position\n            x = baseCoord.x + smallRadius * Math.cos(smallCircleAngle) + penLength * Math.cos(penAngle);\n            y = baseCoord.y + smallRadius * Math.sin(smallCircleAngle) + penLength * Math.sin(penAngle);\n            break;\n        }\n\n        // Apply dynamic scaling to ensure pattern fits\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Draw line segment on both canvases\n        if (prevX !== null) {\n          mainCanvas.line(prevX, prevY, x, y);\n          currentLayerCanvas.line(prevX, prevY, x, y);\n        }\n        \n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n          \n          // Check if we've reached a layer transition point\n          if (currentLayer < layerCompletionPoints.length-1 && t >= layerCompletionPoints[currentLayer]) {\n            // Time to move to next layer\n            currentLayer++;\n            // Make sure we don't go beyond the array bounds\n            if (currentLayer < layerCanvases.length) {\n              currentLayerCanvas = layerCanvases[currentLayer];\n              currentLayerCanvas.push();\n              currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n              // Apply rotation to the new layer\n              let fullRotationAngle = (t / maxT) * p.TWO_PI;\n              currentLayerCanvas.rotate(fullRotationAngle);\n              currentColor = palette.colors[Math.min(currentLayer, palette.colors.length - 1)];\n              mainCanvas.stroke(currentColor);\n              currentLayerCanvas.stroke(currentColor);\n            }\n          }\n          \n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n          \n          // Re-calculate based on shape type with updated t\n          switch(shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r1) * p.cos(t) + params.d * p.cos(((params.R - params.r1) / params.r1) * t);\n              nextY = (params.R - params.r1) * p.sin(t) - params.d * p.sin(((params.R - params.r1) / params.r1) * t);\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r1) * p.cos(t) - params.d * p.cos(((params.R + params.r1) / params.r1) * t);\n              nextY = (params.R + params.r1) * p.sin(t) - params.d * p.sin(((params.R + params.r1) / params.r1) * t);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n              break;\n            case \"PolySpirograph\":\n              // Base shape parameters\n              const baseSize = params.baseSize;\n              const smallRadius = params.smallCircleRadius;\n              const penLength = params.penLength;\n              const speedRatio = params.speedRatio;\n              const distortion = params.shapeDistortion;\n              \n              // Base rotation - slower to make pattern more visible\n              const baseAngle = t * 0.2;\n              let baseCoord = {x: 0, y: 0};\n              \n              // Calculate coordinate on base shape perimeter\n              switch(params.baseShape) {\n                case \"circle\":\n                  // Simple circle\n                  baseCoord.x = baseSize * Math.cos(baseAngle);\n                  baseCoord.y = baseSize * Math.sin(baseAngle);\n                  break;\n                  \n                case \"square\":\n                  // Square with sharp corners\n                  const squareAngle = baseAngle % (Math.PI/2);\n                  const quadrant = Math.floor(baseAngle / (Math.PI/2)) % 4;\n                  \n                  // Which edge of the square we're on\n                  if (squareAngle < Math.PI/4) {\n                    // Calculate point on edge, emphasizing corners\n                    const edgePos = Math.tan(squareAngle) / Math.tan(Math.PI/4);\n                    const adjustedPos = Math.pow(edgePos, distortion); // Make corners more pronounced\n                    \n                    if (quadrant === 0) baseCoord = {x: baseSize, y: baseSize * adjustedPos};\n                    else if (quadrant === 1) baseCoord = {x: -baseSize * adjustedPos, y: baseSize};\n                    else if (quadrant === 2) baseCoord = {x: -baseSize, y: -baseSize * adjustedPos};\n                    else baseCoord = {x: baseSize * adjustedPos, y: -baseSize};\n                  } else {\n                    const edgePos = Math.tan(Math.PI/2 - squareAngle) / Math.tan(Math.PI/4);\n                    const adjustedPos = Math.pow(edgePos, distortion);\n                    \n                    if (quadrant === 0) baseCoord = {x: baseSize * adjustedPos, y: baseSize};\n                    else if (quadrant === 1) baseCoord = {x: -baseSize, y: baseSize * adjustedPos};\n                    else if (quadrant === 2) baseCoord = {x: -baseSize * adjustedPos, y: -baseSize};\n                    else baseCoord = {x: baseSize, y: -baseSize * adjustedPos};\n                  }\n                  break;\n                  \n                case \"triangle\":\n                  // Equilateral triangle with pronounced corners\n                  const sides = 3;\n                  const triAngle = baseAngle % (2*Math.PI/sides);\n                  const triSide = Math.floor(baseAngle / (2*Math.PI/sides)) % sides;\n                  const pointiness = params.pointiness || 1.3; // Default if not set\n                  \n                  // Triangle vertices (equilateral)\n                  const triVertices = [\n                    {x: 0, y: -baseSize}, // Top\n                    {x: baseSize * 0.866, y: baseSize * 0.5}, // Bottom right\n                    {x: -baseSize * 0.866, y: baseSize * 0.5}  // Bottom left\n                  ];\n                  \n                  // Calculate position along edge with pointiness factor\n                  const fromVertex = triVertices[triSide];\n                  const toVertex = triVertices[(triSide + 1) % sides];\n                  \n                  // Use non-linear interpolation to emphasize corners\n                  const edgePosition = triAngle / (2*Math.PI/sides);\n                  const adjustedPosition = Math.pow(edgePosition, pointiness);\n                  \n                  baseCoord.x = fromVertex.x + (toVertex.x - fromVertex.x) * adjustedPosition;\n                  baseCoord.y = fromVertex.y + (toVertex.y - fromVertex.y) * adjustedPosition;\n                  break;\n                  \n                case \"diamond\":\n                  // Diamond (rhombus) with sharp points\n                  const diamondAngle = baseAngle % (Math.PI/2);\n                  const diamondQuad = Math.floor(baseAngle / (Math.PI/2)) % 4;\n                  const sharpness = params.sharpness || 1.5; // Use sharpness or default\n                  \n                  // Diamond vertices\n                  const diamondVertices = [\n                    {x: 0, y: -baseSize}, // Top\n                    {x: baseSize * sharpness, y: 0}, // Right\n                    {x: 0, y: baseSize}, // Bottom\n                    {x: -baseSize * sharpness, y: 0} // Left\n                  ];\n                  \n                  // Calculate with non-linear interpolation to emphasize corners\n                  const dFromVertex = diamondVertices[diamondQuad];\n                  const dToVertex = diamondVertices[(diamondQuad + 1) % 4];\n                  const dEdgePos = diamondAngle / (Math.PI/2);\n                  \n                  // Make points sharper with distortion\n                  const dAdjustedPos = Math.pow(dEdgePos, distortion);\n                  \n                  baseCoord.x = dFromVertex.x + (dToVertex.x - dFromVertex.x) * dAdjustedPos;\n                  baseCoord.y = dFromVertex.y + (dToVertex.y - dFromVertex.y) * dAdjustedPos;\n                  break;\n                  \n                case \"pentagon\":\n                  // Regular pentagon\n                  const pentSides = 5;\n                  const pentAngle = baseAngle % (2*Math.PI/pentSides);\n                  const pentSide = Math.floor(baseAngle / (2*Math.PI/pentSides)) % pentSides;\n                  \n                  // Generate pentagon vertices\n                  const pentVertices = [];\n                  for (let i = 0; i < pentSides; i++) {\n                    const angle = -Math.PI/2 + i * 2*Math.PI/pentSides;\n                    pentVertices.push({\n                      x: baseSize * Math.cos(angle),\n                      y: baseSize * Math.sin(angle)\n                    });\n                  }\n                  \n                  // Calculate with non-linear interpolation to emphasize corners\n                  const pFromVertex = pentVertices[pentSide];\n                  const pToVertex = pentVertices[(pentSide + 1) % pentSides];\n                  const pEdgePos = pentAngle / (2*Math.PI/pentSides);\n                  \n                  // Make points sharper with distortion\n                  const pAdjustedPos = Math.pow(pEdgePos, distortion);\n                  \n                  baseCoord.x = pFromVertex.x + (pToVertex.x - pFromVertex.x) * pAdjustedPos;\n                  baseCoord.y = pFromVertex.y + (pToVertex.y - pFromVertex.y) * pAdjustedPos;\n                  break;\n              }\n              \n              // Calculate small circle position and pen position\n              const smallCircleAngle = baseAngle * speedRatio;\n              \n              // Position of pen relative to small circle center\n              const penAngle = smallCircleAngle * 3.1; // Different ratio for more complex patterns\n              \n              // Calculate final position\n              nextX = baseCoord.x + smallRadius * Math.cos(smallCircleAngle) + penLength * Math.cos(penAngle);\n              nextY = baseCoord.y + smallRadius * Math.sin(smallCircleAngle) + penLength * Math.sin(penAngle);\n              break;\n          }\n          \n          // Apply dynamic scaling to ensure pattern fits\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n          \n          // Draw the line on both canvases\n          mainCanvas.line(prevX, prevY, nextX, nextY);\n          currentLayerCanvas.line(prevX, prevY, nextX, nextY);\n          \n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n        }\n        \n        // Increment time\n        t += 0.015;\n        \n        // Update global rotation\n        globalAngle = (t / maxT) * p.TWO_PI;\n        \n        // Update progress\n        const currentProgress = Math.min(100, Math.round((t / maxT) * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n        \n        // End current push transforms\n        mainCanvas.pop();\n        currentLayerCanvas.pop();\n\n        // Check if drawing is complete\n        if (t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n          \n          // Make sure to end all open transforms\n          try {\n            mainCanvas.pop();\n          } catch(e) {\n            // Ignore if already popped\n          }\n          \n          // Safely pop any open layer transforms\n          for (let i = 0; i < layerCanvases.length; i++) {\n            try {\n              layerCanvases[i].pop();\n            } catch (e) {\n              // Ignore errors if there's no matching push\n              console.log(\"Note: Layer\", i, \"didn't need popping\");\n            }\n          }\n          \n          // Generate final output with black background and all layers\n          finalOutput = generateFinalOutput();\n          \n          // Notify parent that drawing is complete\n          onDrawingComplete && onDrawingComplete(finalOutput);\n        }\n      };\n      \n      // Display info on the canvas\n      p.displayInfo = function() {\n        // Create a semi-transparent background for the text\n        p.fill(0, 200);\n        p.noStroke();\n        p.rect(10, 10, 380, 100, 10);\n        \n        // Display NFT info\n        p.textSize(24);\n        p.fill(255);\n        p.text(`Spyro #${currentSeed}`, 20, 40);\n        \n        p.textSize(16);\n        p.fill(palette.colors[0]);\n        p.text(`ðŸŒŸ ${getShapeDescription()} Â· ${rarityText}`, 20, 70);\n        \n        p.fill(palette.colors[1]);\n        p.text(`ðŸŽ¨ Palette: ${palette.name} Â· ${palette.rarity}`, 20, 95);\n      };\n      \n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n      \n      // Change to a specific seed\n      p.setSeed = (newSeed) => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n    \n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return (\n    <div className=\"spiro-canvas-container\">\n      <div ref={canvasRef} className=\"canvas-wrapper\"></div>\n      {isDrawing && (\n        <div className=\"progress-bar-container\">\n          <div className=\"progress-bar\" style={{ width: `${progress}%` }}></div>\n          <span className=\"progress-text\">{progress}%</span>\n        </div>\n      )}\n      {!isDrawing && (\n        <div className=\"canvas-complete\">\n          <span>Drawing complete!</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpiroCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}