{"ast":null,"code":"var _jsxFileName = \"/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx\",\n  _s = $RefreshSig$();\n// src/components/SpiroCanvas.jsx\nimport React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SpiroCanvas = ({\n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = p => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [{\n        name: \"Neon Mirage\",\n        colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"],\n        rarity: \"Common\"\n      }, {\n        name: \"Digital Dream\",\n        colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"],\n        rarity: \"Uncommon\"\n      }, {\n        name: \"Crystal Sunset\",\n        colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"],\n        rarity: \"Rare\"\n      }, {\n        name: \"Cyber Haze\",\n        colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"],\n        rarity: \"Super Rare\"\n      }, {\n        name: \"Pastel Vapor\",\n        colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"],\n        rarity: \"Legendary\"\n      }];\n\n      // Shape rarity distribution\n      const shapeRarity = {\n        \"Rhodonea\": \"Common\",\n        // 40%\n        \"Epitrochoid\": \"Uncommon\",\n        // 30%\n        \"Hypotrochoid\": \"Rare\",\n        // 20%\n        \"OrganicFlow\": \"Super Rare\",\n        // 8%\n        \"Lissajous\": \"Legendary\" // 2%\n      };\n\n      // Multiple layer canvases\n      let mainCanvas; // Main visible canvas with black background\n      let layerCanvases = []; // Array of layer graphics for each color\n      let finalOutput; // Final combined output\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let currentColorIndex = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n\n      // Layer tracking\n      let totalLayers = 5; // Match number of colors in palette\n      let currentLayer = 0;\n      let layerCompletionPoints = []; // Points at which to switch layers\n\n      // Track the starting point to detect when we return to it\n      let startX = null;\n      let startY = null;\n      let hasCompleted = false;\n      let minCycleDistance = 2; // Minimum distance to consider a cycle complete\n      let minCycles = 1; // Minimum number of cycles to complete before checking for completion\n      let cycleCount = 0;\n\n      // Helper function to calculate the least common multiple\n      const lcm = (a, b) => {\n        return a * b / findGCD(a, b);\n      };\n\n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.abs(Math.round(a));\n        b = Math.abs(Math.round(b));\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Calculate the maximum boundaries of the pattern to ensure it fits\n      const calculatePatternBoundaries = () => {\n        let maxX = 0;\n        let maxY = 0;\n\n        // Sample many points to find the maximum extent\n        for (let step = 0; step < maxT; step += 0.1) {\n          let x = 0;\n          let y = 0;\n\n          // Calculate position based on shape type\n          switch (shapeType) {\n            case \"Hypotrochoid\":\n              x = (params.R - params.r1) * p.cos(step) + params.d * p.cos((params.R - params.r1) / params.r1 * step);\n              y = (params.R - params.r1) * p.sin(step) - params.d * p.sin((params.R - params.r1) / params.r1 * step);\n              break;\n            case \"Epitrochoid\":\n              x = (params.R + params.r1) * p.cos(step) - params.d * p.cos((params.R + params.r1) / params.r1 * step);\n              y = (params.R + params.r1) * p.sin(step) - params.d * p.sin((params.R + params.r1) / params.r1 * step);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * step);\n              x = rhodoneaRadius * p.cos(step);\n              y = rhodoneaRadius * p.sin(step);\n              break;\n            case \"Lissajous\":\n              x = params.A * p.sin(params.a * step + params.delta);\n              y = params.B * p.sin(params.b * step);\n              break;\n            case \"OrganicFlow\":\n              let baseRadius = 150;\n              let noiseTime = step * params.speed;\n              let radius = baseRadius;\n              for (let i = 0; i < params.waves; i++) {\n                let noiseFactor = p.noise(p.cos(step + i) * params.noiseScale, p.sin(step + i) * params.noiseScale, noiseTime);\n                radius += p.sin(step * (i + 1) * params.complexity) * params.amplitude * noiseFactor;\n              }\n              x = radius * p.cos(step);\n              y = radius * p.sin(step);\n              x += p.sin(step * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n              y += p.cos(step * 2.7) * 20 * p.noise(0, noiseTime * 2);\n              break;\n          }\n\n          // Update max boundaries\n          maxX = Math.max(maxX, Math.abs(x));\n          maxY = Math.max(maxY, Math.abs(y));\n        }\n        return {\n          maxX,\n          maxY\n        };\n      };\n\n      // Get the scale factor needed to fit the pattern\n      const getScaleFactor = () => {\n        const {\n          maxX,\n          maxY\n        } = calculatePatternBoundaries();\n        const maxExtent = Math.max(maxX, maxY);\n\n        // Canvas size is 600x600, center is at 300,300\n        // Leave a 50px margin on all sides\n        const maxAllowedExtent = 250; // (600/2 - 50)\n\n        // If pattern is too big, scale it down\n        if (maxExtent > maxAllowedExtent) {\n          return maxAllowedExtent / maxExtent;\n        }\n\n        // Otherwise, keep original scale\n        return 1.0;\n      };\n\n      // Get the final image when completed\n      const generateFinalOutput = () => {\n        // Create two separate graphics:\n        // 1. The background canvas (black)\n        let backgroundCanvas = p.createGraphics(600, 600);\n        backgroundCanvas.background(0); // BLACK BACKGROUND\n\n        // 2. The transparent spirograph with all layers merged (but no background)\n        let transparentSpiro = p.createGraphics(600, 600);\n        transparentSpiro.clear(); // Completely transparent\n\n        // Overlay all layers onto the transparent spirograph\n        for (let i = 0; i < layerCanvases.length; i++) {\n          transparentSpiro.image(layerCanvases[i], 0, 0);\n        }\n\n        // Return just the transparent spirograph - the black background stays in the canvas\n        return transparentSpiro;\n      };\n\n      // Calculate the exact cycle length based on mathematical properties\n      const calculateExactCycleLength = () => {\n        let cycleLength;\n        switch (shapeType) {\n          case \"Hypotrochoid\":\n            // For a hypotrochoid to return to its starting point, we need LCM of R and r1\n            // Simplified as: (R-r1) / GCD(R, r1)\n            // Convert to integers to ensure proper calculation\n            const gcdH = findGCD(params.R, params.r1);\n            cycleLength = p.TWO_PI * (params.r1 / gcdH);\n            break;\n          case \"Epitrochoid\":\n            // For an epitrochoid to return to its starting point\n            // Simplified as: (R+r1) / GCD(R, r1)\n            const gcdE = findGCD(params.R, params.r1);\n            cycleLength = p.TWO_PI * (params.r1 / gcdE);\n            break;\n          case \"Rhodonea\":\n            // For a rose curve (Rhodonea), if k is rational p/q:\n            // - If p,q are both odd: period is Ï€*q\n            // - If either p or q is even: period is 2Ï€*q\n            // Here we simplified with integer k\n            cycleLength = params.k % 2 === 0 ? p.TWO_PI : p.PI;\n            break;\n          case \"Lissajous\":\n            // For a Lissajous curve to repeat, need LCM of periods\n            // Period is 2Ï€/a for x and 2Ï€/b for y\n            const lcmVal = lcm(params.a, params.b);\n            cycleLength = p.TWO_PI * (lcmVal / params.a);\n            break;\n          case \"OrganicFlow\":\n            // Organic flow can be less predictable, use a larger value\n            cycleLength = p.TWO_PI * 20;\n            break;\n          default:\n            cycleLength = p.TWO_PI * 10;\n        }\n\n        // Add some buffer to ensure we complete at least one full cycle\n        // Some patterns may need multiple cycles to truly come back to the start\n        return Math.max(cycleLength, p.TWO_PI * 5);\n      };\n\n      // Check if the current point is close enough to the starting point\n      const isBackToStart = (x, y) => {\n        if (startX === null || startY === null) return false;\n        if (cycleCount < minCycles) return false;\n        const dist = p.sqrt((x - startX) * (x - startX) + (y - startY) * (y - startY));\n        return dist < minCycleDistance;\n      };\n\n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Rhodonea - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Epitrochoid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Hypotrochoid - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // OrganicFlow - Super Rare 8%\n        } else {\n          shapeIndex = 4; // Lissajous - Legendary 2%\n        }\n        params = {}; // Reset params\n\n        switch (shapeIndex) {\n          case 0:\n            // Rhodonea (Common)\n            shapeType = \"Rhodonea\";\n            params.k = p.int(p.random(4, 9));\n            break;\n          case 1:\n            // Epitrochoid (Uncommon)\n            shapeType = \"Epitrochoid\";\n            params.R = p.random(200, 300);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(80, 160);\n            break;\n          case 2:\n            // Hypotrochoid (Rare)\n            shapeType = \"Hypotrochoid\";\n            params.R = p.random(250, 400);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(100, 180);\n            break;\n          case 3:\n            // OrganicFlow (Super Rare)\n            shapeType = \"OrganicFlow\";\n            params.complexity = p.random(0.5, 2.5);\n            params.speed = p.random(0.01, 0.05);\n            params.waves = p.int(p.random(3, 7));\n            params.amplitude = p.random(100, 250);\n            params.noiseScale = p.random(0.005, 0.02);\n            break;\n          case 4:\n            // Lissajous (Legendary)\n            shapeType = \"Lissajous\";\n            params.A = p.random(200, 350);\n            params.B = p.random(200, 350);\n            params.a = p.int(p.random(3, 7));\n            params.b = p.int(p.random(3, 7));\n            params.delta = p.random(0, p.PI);\n            break;\n        }\n\n        // Calculate the exact cycle length based on the shape parameters\n        maxT = calculateExactCycleLength();\n\n        // Set up layer transitions - divide maxT into segments for each layer\n        layerCompletionPoints = [];\n        for (let i = 1; i < totalLayers; i++) {\n          layerCompletionPoints.push(i / totalLayers * maxT);\n        }\n        layerCompletionPoints.push(maxT); // Final completion point\n\n        rarityText = shapeRarity[shapeType];\n\n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: {\n            ...params\n          }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        // Clear all canvases\n        p.background(0);\n        mainCanvas.background(0);\n\n        // Reset layer canvases\n        layerCanvases = [];\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background for each layer\n          layerCanvases.push(layerCanvas);\n        }\n        p.randomSeed(currentSeed);\n\n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        totalLayers = palette.colors.length; // Match layers to palette colors\n\n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n\n        // Reset drawing variables\n        t = 0;\n        prevX = null;\n        prevY = null;\n        startX = null;\n        startY = null;\n        hasCompleted = false;\n        cycleCount = 0;\n        globalAngle = 0;\n        currentColorIndex = 0;\n        currentLayer = 0;\n\n        // Pick a shape type\n        selectShapeType();\n\n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n        console.log(\"Expected cycle length:\", maxT);\n\n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function () {\n        // Create main canvas with black background\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        canvas.style('background-color', 'black'); // Ensure canvas always shows black\n\n        // Initialize main drawing canvas with black background\n        mainCanvas = p.createGraphics(600, 600);\n        mainCanvas.background(0);\n\n        // Initialize layer canvases - one for each color\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background\n          layerCanvases.push(layerCanvas);\n        }\n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n\n        // Apply same settings to all layer canvases\n        for (let canvas of layerCanvases) {\n          canvas.strokeJoin(p.ROUND);\n          canvas.strokeCap(p.ROUND);\n        }\n\n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n\n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function () {\n        // Clear main canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n\n        // Display in-progress work\n        p.image(mainCanvas, 0, 0);\n\n        // Get the appropriate scale factor to fit pattern in canvas\n        const scaleFactor = getScaleFactor();\n\n        // Draw on the main canvas\n        mainCanvas.push();\n        mainCanvas.translate(mainCanvas.width / 2, mainCanvas.height / 2);\n\n        // Add rotation that completes during drawing\n        let fullRotationAngle = t / maxT * p.TWO_PI;\n        mainCanvas.rotate(fullRotationAngle);\n\n        // Current layer canvas (for separate color layers)\n        let currentLayerCanvas = layerCanvases[currentLayer];\n        currentLayerCanvas.push();\n        currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n        currentLayerCanvas.rotate(fullRotationAngle);\n\n        // Set color for current layer\n        currentColor = palette.colors[currentLayer];\n        mainCanvas.stroke(currentColor);\n        currentLayerCanvas.stroke(currentColor);\n        mainCanvas.strokeWeight(1);\n        currentLayerCanvas.strokeWeight(1);\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch (shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r1) * p.cos(t) + params.d * p.cos((params.R - params.r1) / params.r1 * t);\n            y = (params.R - params.r1) * p.sin(t) - params.d * p.sin((params.R - params.r1) / params.r1 * t);\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r1) * p.cos(t) - params.d * p.cos((params.R + params.r1) / params.r1 * t);\n            y = (params.R + params.r1) * p.sin(t) - params.d * p.sin((params.R + params.r1) / params.r1 * t);\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = 250 * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n            break;\n          case \"OrganicFlow\":\n            // Create organic, flowing patterns\n            let baseRadius = 150;\n            let noiseTime = t * params.speed;\n\n            // Create multiple wave layers with perlin noise\n            let radius = baseRadius;\n            for (let i = 0; i < params.waves; i++) {\n              let noiseFactor = p.noise(p.cos(t + i) * params.noiseScale, p.sin(t + i) * params.noiseScale, noiseTime);\n              radius += p.sin(t * (i + 1) * params.complexity) * params.amplitude * noiseFactor;\n            }\n\n            // Convert to x,y coordinates\n            x = radius * p.cos(t);\n            y = radius * p.sin(t);\n\n            // Add some variation\n            x += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n            y += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n            break;\n        }\n\n        // Apply dynamic scaling to ensure pattern fits\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Record the starting point for the first segment\n        if (startX === null && startY === null) {\n          startX = x;\n          startY = y;\n          console.log(\"Starting point:\", startX, startY);\n        }\n\n        // Draw line segment on both canvases\n        if (prevX !== null) {\n          mainCanvas.line(prevX, prevY, x, y);\n          currentLayerCanvas.line(prevX, prevY, x, y);\n        }\n\n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n\n          // Check if we've reached a layer transition point\n          if (currentLayer < layerCompletionPoints.length - 1 && t >= layerCompletionPoints[currentLayer]) {\n            // Time to move to next layer\n            currentLayer++;\n            // Make sure we don't go beyond the array bounds\n            if (currentLayer < layerCanvases.length) {\n              currentLayerCanvas = layerCanvases[currentLayer];\n              currentLayerCanvas.push();\n              currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n              // Apply rotation to the new layer\n              let fullRotationAngle = t / maxT * p.TWO_PI;\n              currentLayerCanvas.rotate(fullRotationAngle);\n              currentColor = palette.colors[Math.min(currentLayer, palette.colors.length - 1)];\n              mainCanvas.stroke(currentColor);\n              currentLayerCanvas.stroke(currentColor);\n            }\n          }\n\n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n\n          // Re-calculate based on shape type with updated t\n          switch (shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r1) * p.cos(t) + params.d * p.cos((params.R - params.r1) / params.r1 * t);\n              nextY = (params.R - params.r1) * p.sin(t) - params.d * p.sin((params.R - params.r1) / params.r1 * t);\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r1) * p.cos(t) - params.d * p.cos((params.R + params.r1) / params.r1 * t);\n              nextY = (params.R + params.r1) * p.sin(t) - params.d * p.sin((params.R + params.r1) / params.r1 * t);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n              break;\n            case \"OrganicFlow\":\n              let baseRadius = 150;\n              let noiseTime = t * params.speed;\n              let radius = baseRadius;\n              for (let i = 0; i < params.waves; i++) {\n                let noiseFactor = p.noise(p.cos(t + i) * params.noiseScale, p.sin(t + i) * params.noiseScale, noiseTime);\n                radius += p.sin(t * (i + 1) * params.complexity) * params.amplitude * noiseFactor;\n              }\n              nextX = radius * p.cos(t);\n              nextY = radius * p.sin(t);\n              nextX += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n              nextY += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n              break;\n          }\n\n          // Apply dynamic scaling to ensure pattern fits\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n\n          // Draw the line on both canvases\n          mainCanvas.line(prevX, prevY, nextX, nextY);\n          currentLayerCanvas.line(prevX, prevY, nextX, nextY);\n\n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n\n          // Check if we've completed a cycle - back to the starting point\n          if (t > p.TWO_PI * 2 && isBackToStart(nextX, nextY)) {\n            hasCompleted = true;\n            console.log(\"Completed at t =\", t, \"after\", cycleCount, \"cycles\");\n            break;\n          }\n        }\n\n        // Increment time\n        t += 0.015;\n\n        // Update global rotation\n        globalAngle = t / maxT * p.TWO_PI;\n\n        // Update progress\n        // If we've detected completion, set progress to 100%\n        // Otherwise base it on the percentage of maxT\n        const currentProgress = hasCompleted ? 100 : Math.min(100, Math.round(t / maxT * 100));\n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n\n        // Check if we've passed a multiple of 2Ï€ to track cycles\n        if (t >= p.TWO_PI * (cycleCount + 1)) {\n          cycleCount++;\n          console.log(\"Completed cycle:\", cycleCount);\n        }\n\n        // End current push transforms\n        mainCanvas.pop();\n        currentLayerCanvas.pop();\n\n        // Check if drawing is complete\n        // Complete if we've detected a full cycle back to start or if we've exceeded maxT\n        if (hasCompleted || t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n\n          // Make sure to end all open transforms\n          mainCanvas.pop();\n          // Safely pop any open layer transforms\n          for (let i = 0; i < layerCanvases.length; i++) {\n            try {\n              layerCanvases[i].pop();\n            } catch (e) {\n              // Ignore errors if there's no matching push\n              console.log(\"Note: Layer\", i, \"didn't need popping\");\n            }\n          }\n\n          // Generate final output with black background and all layers\n          finalOutput = generateFinalOutput();\n\n          // Notify parent that drawing is complete\n          onDrawingComplete && onDrawingComplete(finalOutput);\n        }\n      };\n\n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n\n      // Change to a specific seed\n      p.setSeed = newSeed => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n\n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spiro-canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spiro-title-card\",\n      children: seed && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Spyro #\", seed]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"spiro-details\",\n          children: \"Creating a unique mathematical pattern...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: canvasRef,\n      className: \"canvas-wrapper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 712,\n      columnNumber: 7\n    }, this), isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"progress-text\",\n        children: [progress, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 715,\n      columnNumber: 9\n    }, this), !isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-complete\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Drawing complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 721,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 699,\n    columnNumber: 5\n  }, this);\n};\n_s(SpiroCanvas, \"vG581M3D6HIZspCQRmOO1WkIWxY=\");\n_c = SpiroCanvas;\nexport default SpiroCanvas;\nvar _c;\n$RefreshReg$(_c, \"SpiroCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","p5","jsxDEV","_jsxDEV","Fragment","_Fragment","SpiroCanvas","seed","setSeed","onShapeChange","onPaletteChange","onDrawingComplete","_s","canvasRef","p5Instance","isDrawing","setIsDrawing","progress","setProgress","sketch","p","palettes","name","colors","rarity","shapeRarity","mainCanvas","layerCanvases","finalOutput","shapeType","params","palette","currentColor","t","maxT","prevX","prevY","globalAngle","currentColorIndex","rarityText","currentSeed","Math","floor","random","totalLayers","currentLayer","layerCompletionPoints","startX","startY","hasCompleted","minCycleDistance","minCycles","cycleCount","lcm","a","b","findGCD","abs","round","calculatePatternBoundaries","maxX","maxY","step","x","y","R","r1","cos","d","sin","rhodoneaRadius","k","A","delta","B","baseRadius","noiseTime","speed","radius","i","waves","noiseFactor","noise","noiseScale","complexity","amplitude","max","getScaleFactor","maxExtent","maxAllowedExtent","generateFinalOutput","backgroundCanvas","createGraphics","background","transparentSpiro","clear","length","image","calculateExactCycleLength","cycleLength","gcdH","TWO_PI","gcdE","PI","lcmVal","isBackToStart","dist","sqrt","selectShapeType","shapeRoll","shapeIndex","int","push","type","resetSketch","layerCanvas","randomSeed","paletteRoll","strokeWeight","noFill","console","log","isLooping","loop","setup","canvas","createCanvas","style","frameRate","strokeJoin","ROUND","strokeCap","draw","frameCount","scaleFactor","translate","width","height","fullRotationAngle","rotate","currentLayerCanvas","stroke","line","stepsPerFrame","min","nextX","nextY","currentProgress","pop","noLoop","e","generateNewSeed","newSeed","current","remove","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/cannedoxygen/Downloads/spiro/src/components/SpiroCanvas.jsx"],"sourcesContent":["// src/components/SpiroCanvas.jsx\nimport React, { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport '../styles/components.css';\n\nconst SpiroCanvas = ({ \n  seed,\n  setSeed,\n  onShapeChange,\n  onPaletteChange,\n  onDrawingComplete\n}) => {\n  const canvasRef = useRef(null);\n  const p5Instance = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(true);\n  const [progress, setProgress] = useState(0);\n\n  // Initialize the p5 sketch\n  useEffect(() => {\n    // Define the sketch\n    const sketch = (p) => {\n      // ðŸŒˆ VAPORWAVE PALETTES with names\n      const palettes = [\n        {name: \"Neon Mirage\", colors: [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FDCB6E\", \"#6C5CE7\"], rarity: \"Common\"},\n        {name: \"Digital Dream\", colors: [\"#FF00CC\", \"#3333FF\", \"#00FFF7\", \"#FFD6E8\", \"#BAFFC9\"], rarity: \"Uncommon\"},\n        {name: \"Crystal Sunset\", colors: [\"#9B5DE5\", \"#F15BB5\", \"#FEE440\", \"#00BBF9\", \"#00F5D4\"], rarity: \"Rare\"},\n        {name: \"Cyber Haze\", colors: [\"#F72585\", \"#B5179E\", \"#7209B7\", \"#3A0CA3\", \"#4361EE\"], rarity: \"Super Rare\"},\n        {name: \"Pastel Vapor\", colors: [\"#FF6EC7\", \"#FFC8DD\", \"#A0C4FF\", \"#BDB2FF\", \"#FFADAD\"], rarity: \"Legendary\"}\n      ];\n\n      // Shape rarity distribution\n      const shapeRarity = {\n        \"Rhodonea\": \"Common\", // 40%\n        \"Epitrochoid\": \"Uncommon\", // 30%\n        \"Hypotrochoid\": \"Rare\", // 20%\n        \"OrganicFlow\": \"Super Rare\", // 8%\n        \"Lissajous\": \"Legendary\" // 2%\n      };\n\n      // Multiple layer canvases\n      let mainCanvas; // Main visible canvas with black background\n      let layerCanvases = []; // Array of layer graphics for each color\n      let finalOutput; // Final combined output\n\n      // Variables for drawing\n      let shapeType = \"\";\n      let params = {};\n      let palette;\n      let currentColor;\n      let t = 0;\n      let maxT;\n      let prevX = null;\n      let prevY = null;\n      let globalAngle = 0;\n      let currentColorIndex = 0;\n      let rarityText = \"\";\n      let currentSeed = seed || Math.floor(p.random(1, 10001));\n      \n      // Layer tracking\n      let totalLayers = 5; // Match number of colors in palette\n      let currentLayer = 0;\n      let layerCompletionPoints = []; // Points at which to switch layers\n      \n      // Track the starting point to detect when we return to it\n      let startX = null;\n      let startY = null;\n      let hasCompleted = false;\n      let minCycleDistance = 2; // Minimum distance to consider a cycle complete\n      let minCycles = 1; // Minimum number of cycles to complete before checking for completion\n      let cycleCount = 0;\n      \n      // Helper function to calculate the least common multiple\n      const lcm = (a, b) => {\n        return (a * b) / findGCD(a, b);\n      };\n      \n      // Helper function to find greatest common divisor\n      const findGCD = (a, b) => {\n        a = Math.abs(Math.round(a));\n        b = Math.abs(Math.round(b));\n        return b === 0 ? a : findGCD(b, a % b);\n      };\n\n      // Calculate the maximum boundaries of the pattern to ensure it fits\n      const calculatePatternBoundaries = () => {\n        let maxX = 0;\n        let maxY = 0;\n        \n        // Sample many points to find the maximum extent\n        for (let step = 0; step < maxT; step += 0.1) {\n          let x = 0;\n          let y = 0;\n          \n          // Calculate position based on shape type\n          switch(shapeType) {\n            case \"Hypotrochoid\":\n              x = (params.R - params.r1) * p.cos(step) + params.d * p.cos(((params.R - params.r1) / params.r1) * step);\n              y = (params.R - params.r1) * p.sin(step) - params.d * p.sin(((params.R - params.r1) / params.r1) * step);\n              break;\n            case \"Epitrochoid\":\n              x = (params.R + params.r1) * p.cos(step) - params.d * p.cos(((params.R + params.r1) / params.r1) * step);\n              y = (params.R + params.r1) * p.sin(step) - params.d * p.sin(((params.R + params.r1) / params.r1) * step);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * step);\n              x = rhodoneaRadius * p.cos(step);\n              y = rhodoneaRadius * p.sin(step);\n              break;\n            case \"Lissajous\":\n              x = params.A * p.sin(params.a * step + params.delta);\n              y = params.B * p.sin(params.b * step);\n              break;\n            case \"OrganicFlow\":\n              let baseRadius = 150;\n              let noiseTime = step * params.speed;\n              \n              let radius = baseRadius;\n              for (let i = 0; i < params.waves; i++) {\n                let noiseFactor = p.noise(\n                  p.cos(step + i) * params.noiseScale, \n                  p.sin(step + i) * params.noiseScale, \n                  noiseTime\n                );\n                radius += p.sin(step * (i+1) * params.complexity) * params.amplitude * noiseFactor;\n              }\n              \n              x = radius * p.cos(step);\n              y = radius * p.sin(step);\n              \n              x += p.sin(step * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n              y += p.cos(step * 2.7) * 20 * p.noise(0, noiseTime * 2);\n              break;\n          }\n          \n          // Update max boundaries\n          maxX = Math.max(maxX, Math.abs(x));\n          maxY = Math.max(maxY, Math.abs(y));\n        }\n        \n        return { maxX, maxY };\n      };\n\n      // Get the scale factor needed to fit the pattern\n      const getScaleFactor = () => {\n        const { maxX, maxY } = calculatePatternBoundaries();\n        const maxExtent = Math.max(maxX, maxY);\n        \n        // Canvas size is 600x600, center is at 300,300\n        // Leave a 50px margin on all sides\n        const maxAllowedExtent = 250; // (600/2 - 50)\n        \n        // If pattern is too big, scale it down\n        if (maxExtent > maxAllowedExtent) {\n          return maxAllowedExtent / maxExtent;\n        }\n        \n        // Otherwise, keep original scale\n        return 1.0;\n      };\n\n      // Get the final image when completed\n      const generateFinalOutput = () => {\n        // Create two separate graphics:\n        // 1. The background canvas (black)\n        let backgroundCanvas = p.createGraphics(600, 600);\n        backgroundCanvas.background(0); // BLACK BACKGROUND\n        \n        // 2. The transparent spirograph with all layers merged (but no background)\n        let transparentSpiro = p.createGraphics(600, 600);\n        transparentSpiro.clear(); // Completely transparent\n        \n        // Overlay all layers onto the transparent spirograph\n        for (let i = 0; i < layerCanvases.length; i++) {\n          transparentSpiro.image(layerCanvases[i], 0, 0);\n        }\n        \n        // Return just the transparent spirograph - the black background stays in the canvas\n        return transparentSpiro;\n      };\n      \n      // Calculate the exact cycle length based on mathematical properties\n      const calculateExactCycleLength = () => {\n        let cycleLength;\n        \n        switch(shapeType) {\n          case \"Hypotrochoid\":\n            // For a hypotrochoid to return to its starting point, we need LCM of R and r1\n            // Simplified as: (R-r1) / GCD(R, r1)\n            // Convert to integers to ensure proper calculation\n            const gcdH = findGCD(params.R, params.r1);\n            cycleLength = p.TWO_PI * (params.r1 / gcdH);\n            break;\n            \n          case \"Epitrochoid\":\n            // For an epitrochoid to return to its starting point\n            // Simplified as: (R+r1) / GCD(R, r1)\n            const gcdE = findGCD(params.R, params.r1);\n            cycleLength = p.TWO_PI * (params.r1 / gcdE);\n            break;\n            \n          case \"Rhodonea\":\n            // For a rose curve (Rhodonea), if k is rational p/q:\n            // - If p,q are both odd: period is Ï€*q\n            // - If either p or q is even: period is 2Ï€*q\n            // Here we simplified with integer k\n            cycleLength = params.k % 2 === 0 ? p.TWO_PI : p.PI;\n            break;\n            \n          case \"Lissajous\":\n            // For a Lissajous curve to repeat, need LCM of periods\n            // Period is 2Ï€/a for x and 2Ï€/b for y\n            const lcmVal = lcm(params.a, params.b);\n            cycleLength = p.TWO_PI * (lcmVal / params.a);\n            break;\n            \n          case \"OrganicFlow\":\n            // Organic flow can be less predictable, use a larger value\n            cycleLength = p.TWO_PI * 20;\n            break;\n            \n          default:\n            cycleLength = p.TWO_PI * 10;\n        }\n        \n        // Add some buffer to ensure we complete at least one full cycle\n        // Some patterns may need multiple cycles to truly come back to the start\n        return Math.max(cycleLength, p.TWO_PI * 5);\n      };\n      \n      // Check if the current point is close enough to the starting point\n      const isBackToStart = (x, y) => {\n        if (startX === null || startY === null) return false;\n        if (cycleCount < minCycles) return false;\n        \n        const dist = p.sqrt((x - startX) * (x - startX) + (y - startY) * (y - startY));\n        return dist < minCycleDistance;\n      };\n      \n      // Select shape type based on seed and rarity\n      const selectShapeType = () => {\n        // Use probability distribution based on rarity levels\n        let shapeRoll = p.random(100);\n        let shapeIndex;\n        \n        if (shapeRoll < 40) {\n          shapeIndex = 0; // Rhodonea - Common 40%\n        } else if (shapeRoll < 70) {\n          shapeIndex = 1; // Epitrochoid - Uncommon 30%\n        } else if (shapeRoll < 90) {\n          shapeIndex = 2; // Hypotrochoid - Rare 20%\n        } else if (shapeRoll < 98) {\n          shapeIndex = 3; // OrganicFlow - Super Rare 8%\n        } else {\n          shapeIndex = 4; // Lissajous - Legendary 2%\n        }\n        \n        params = {}; // Reset params\n        \n        switch(shapeIndex) {\n          case 0: // Rhodonea (Common)\n            shapeType = \"Rhodonea\";\n            params.k = p.int(p.random(4, 9));\n            break;\n            \n          case 1: // Epitrochoid (Uncommon)\n            shapeType = \"Epitrochoid\";\n            params.R = p.random(200, 300);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(80, 160);\n            break;\n            \n          case 2: // Hypotrochoid (Rare)\n            shapeType = \"Hypotrochoid\";\n            params.R = p.random(250, 400);\n            params.r1 = p.random(20, 60);\n            params.d = p.random(100, 180);\n            break;\n            \n          case 3: // OrganicFlow (Super Rare)\n            shapeType = \"OrganicFlow\";\n            params.complexity = p.random(0.5, 2.5);\n            params.speed = p.random(0.01, 0.05);\n            params.waves = p.int(p.random(3, 7));\n            params.amplitude = p.random(100, 250);\n            params.noiseScale = p.random(0.005, 0.02);\n            break;\n            \n          case 4: // Lissajous (Legendary)\n            shapeType = \"Lissajous\";\n            params.A = p.random(200, 350);\n            params.B = p.random(200, 350);\n            params.a = p.int(p.random(3, 7));\n            params.b = p.int(p.random(3, 7));\n            params.delta = p.random(0, p.PI);\n            break;\n        }\n        \n        // Calculate the exact cycle length based on the shape parameters\n        maxT = calculateExactCycleLength();\n        \n        // Set up layer transitions - divide maxT into segments for each layer\n        layerCompletionPoints = [];\n        for (let i = 1; i < totalLayers; i++) {\n          layerCompletionPoints.push((i / totalLayers) * maxT);\n        }\n        layerCompletionPoints.push(maxT); // Final completion point\n        \n        rarityText = shapeRarity[shapeType];\n        \n        // Update parent component\n        onShapeChange && onShapeChange({\n          type: shapeType,\n          rarity: rarityText,\n          params: { ...params }\n        });\n      };\n\n      // Reset sketch with new parameters\n      const resetSketch = () => {\n        // Clear all canvases\n        p.background(0);\n        mainCanvas.background(0);\n        \n        // Reset layer canvases\n        layerCanvases = [];\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background for each layer\n          layerCanvases.push(layerCanvas);\n        }\n        \n        p.randomSeed(currentSeed);\n        \n        // Pick a random palette with weighted probabilities\n        let paletteRoll = p.random(100);\n        if (paletteRoll < 40) {\n          palette = palettes[0]; // Common - 40%\n        } else if (paletteRoll < 70) {\n          palette = palettes[1]; // Uncommon - 30%\n        } else if (paletteRoll < 90) {\n          palette = palettes[2]; // Rare - 20%\n        } else if (paletteRoll < 98) {\n          palette = palettes[3]; // Super Rare - 8%\n        } else {\n          palette = palettes[4]; // Legendary - 2%\n        }\n        \n        totalLayers = palette.colors.length; // Match layers to palette colors\n        \n        p.strokeWeight(1); // Set to 1 as requested\n        p.noFill();\n        \n        // Reset drawing variables\n        t = 0;\n        prevX = null;\n        prevY = null;\n        startX = null;\n        startY = null;\n        hasCompleted = false;\n        cycleCount = 0;\n        globalAngle = 0;\n        currentColorIndex = 0;\n        currentLayer = 0;\n        \n        // Pick a shape type\n        selectShapeType();\n        \n        // Update parent component\n        onPaletteChange && onPaletteChange({\n          name: palette.name,\n          rarity: palette.rarity,\n          colors: [...palette.colors]\n        });\n        \n        console.log(`Spirograph #${currentSeed} â€” ${shapeType} (${rarityText})`);\n        console.log(\"Params:\", params);\n        console.log(\"Palette:\", palette.name);\n        console.log(\"Expected cycle length:\", maxT);\n        \n        // Start drawing loop if it was stopped\n        if (!p.isLooping()) {\n          p.loop();\n        }\n        \n        setIsDrawing(true);\n        setProgress(0);\n      };\n\n      // p5.js setup function\n      p.setup = function() {\n        // Create main canvas with black background\n        const canvas = p.createCanvas(600, 600);\n        canvas.style('display', 'block');\n        canvas.style('margin', '0 auto');\n        canvas.style('background-color', 'black'); // Ensure canvas always shows black\n        \n        // Initialize main drawing canvas with black background\n        mainCanvas = p.createGraphics(600, 600);\n        mainCanvas.background(0);\n        \n        // Initialize layer canvases - one for each color\n        for (let i = 0; i < totalLayers; i++) {\n          let layerCanvas = p.createGraphics(600, 600);\n          layerCanvas.clear(); // Start with transparent background\n          layerCanvases.push(layerCanvas);\n        }\n        \n        p.frameRate(60);\n        p.strokeJoin(p.ROUND);\n        p.strokeCap(p.ROUND);\n        \n        // Apply same settings to all layer canvases\n        for (let canvas of layerCanvases) {\n          canvas.strokeJoin(p.ROUND);\n          canvas.strokeCap(p.ROUND);\n        }\n        \n        // Initialize with the provided seed or generate a random one\n        currentSeed = seed || Math.floor(p.random(1, 10001));\n        if (!seed) {\n          setSeed && setSeed(currentSeed);\n        }\n        \n        // Reset and initialize the sketch\n        resetSketch();\n      };\n\n      // p5.js draw function\n      p.draw = function() {\n        // Clear main canvas once at the beginning\n        if (p.frameCount === 1) {\n          p.background(0);\n        }\n        \n        // Display in-progress work\n        p.image(mainCanvas, 0, 0);\n        \n        // Get the appropriate scale factor to fit pattern in canvas\n        const scaleFactor = getScaleFactor();\n        \n        // Draw on the main canvas\n        mainCanvas.push();\n        mainCanvas.translate(mainCanvas.width / 2, mainCanvas.height / 2);\n        \n        // Add rotation that completes during drawing\n        let fullRotationAngle = (t / maxT) * p.TWO_PI;\n        mainCanvas.rotate(fullRotationAngle);\n        \n        // Current layer canvas (for separate color layers)\n        let currentLayerCanvas = layerCanvases[currentLayer];\n        currentLayerCanvas.push();\n        currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n        currentLayerCanvas.rotate(fullRotationAngle);\n        \n        // Set color for current layer\n        currentColor = palette.colors[currentLayer];\n        mainCanvas.stroke(currentColor);\n        currentLayerCanvas.stroke(currentColor);\n        mainCanvas.strokeWeight(1);\n        currentLayerCanvas.strokeWeight(1);\n\n        let x = 0;\n        let y = 0;\n\n        // Calculate the current position based on shape type\n        switch(shapeType) {\n          case \"Hypotrochoid\":\n            x = (params.R - params.r1) * p.cos(t) + params.d * p.cos(((params.R - params.r1) / params.r1) * t);\n            y = (params.R - params.r1) * p.sin(t) - params.d * p.sin(((params.R - params.r1) / params.r1) * t);\n            break;\n          case \"Epitrochoid\":\n            x = (params.R + params.r1) * p.cos(t) - params.d * p.cos(((params.R + params.r1) / params.r1) * t);\n            y = (params.R + params.r1) * p.sin(t) - params.d * p.sin(((params.R + params.r1) / params.r1) * t);\n            break;\n          case \"Rhodonea\":\n            let rhodoneaRadius = 250 * p.cos(params.k * t);\n            x = rhodoneaRadius * p.cos(t);\n            y = rhodoneaRadius * p.sin(t);\n            break;\n          case \"Lissajous\":\n            x = params.A * p.sin(params.a * t + params.delta);\n            y = params.B * p.sin(params.b * t);\n            break;\n          case \"OrganicFlow\":\n            // Create organic, flowing patterns\n            let baseRadius = 150;\n            let noiseTime = t * params.speed;\n            \n            // Create multiple wave layers with perlin noise\n            let radius = baseRadius;\n            for (let i = 0; i < params.waves; i++) {\n              let noiseFactor = p.noise(\n                p.cos(t + i) * params.noiseScale, \n                p.sin(t + i) * params.noiseScale, \n                noiseTime\n              );\n              radius += p.sin(t * (i+1) * params.complexity) * params.amplitude * noiseFactor;\n            }\n            \n            // Convert to x,y coordinates\n            x = radius * p.cos(t);\n            y = radius * p.sin(t);\n            \n            // Add some variation\n            x += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n            y += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n            break;\n        }\n\n        // Apply dynamic scaling to ensure pattern fits\n        x *= scaleFactor;\n        y *= scaleFactor;\n\n        // Record the starting point for the first segment\n        if (startX === null && startY === null) {\n          startX = x;\n          startY = y;\n          console.log(\"Starting point:\", startX, startY);\n        }\n\n        // Draw line segment on both canvases\n        if (prevX !== null) {\n          mainCanvas.line(prevX, prevY, x, y);\n          currentLayerCanvas.line(prevX, prevY, x, y);\n        }\n        \n        // Store current position\n        prevX = x;\n        prevY = y;\n\n        // Draw additional segments in this same frame\n        const stepsPerFrame = 2;\n        for (let i = 1; i < stepsPerFrame; i++) {\n          // Increment time with smaller steps\n          t += 0.015;\n          \n          // Check if we've reached a layer transition point\n          if (currentLayer < layerCompletionPoints.length-1 && t >= layerCompletionPoints[currentLayer]) {\n            // Time to move to next layer\n            currentLayer++;\n            // Make sure we don't go beyond the array bounds\n            if (currentLayer < layerCanvases.length) {\n              currentLayerCanvas = layerCanvases[currentLayer];\n              currentLayerCanvas.push();\n              currentLayerCanvas.translate(currentLayerCanvas.width / 2, currentLayerCanvas.height / 2);\n              // Apply rotation to the new layer\n              let fullRotationAngle = (t / maxT) * p.TWO_PI;\n              currentLayerCanvas.rotate(fullRotationAngle);\n              currentColor = palette.colors[Math.min(currentLayer, palette.colors.length - 1)];\n              mainCanvas.stroke(currentColor);\n              currentLayerCanvas.stroke(currentColor);\n            }\n          }\n          \n          // Calculate new position for this sub-step\n          let nextX = 0;\n          let nextY = 0;\n          \n          // Re-calculate based on shape type with updated t\n          switch(shapeType) {\n            case \"Hypotrochoid\":\n              nextX = (params.R - params.r1) * p.cos(t) + params.d * p.cos(((params.R - params.r1) / params.r1) * t);\n              nextY = (params.R - params.r1) * p.sin(t) - params.d * p.sin(((params.R - params.r1) / params.r1) * t);\n              break;\n            case \"Epitrochoid\":\n              nextX = (params.R + params.r1) * p.cos(t) - params.d * p.cos(((params.R + params.r1) / params.r1) * t);\n              nextY = (params.R + params.r1) * p.sin(t) - params.d * p.sin(((params.R + params.r1) / params.r1) * t);\n              break;\n            case \"Rhodonea\":\n              let rhodoneaRadius = 250 * p.cos(params.k * t);\n              nextX = rhodoneaRadius * p.cos(t);\n              nextY = rhodoneaRadius * p.sin(t);\n              break;\n            case \"Lissajous\":\n              nextX = params.A * p.sin(params.a * t + params.delta);\n              nextY = params.B * p.sin(params.b * t);\n              break;\n            case \"OrganicFlow\":\n              let baseRadius = 150;\n              let noiseTime = t * params.speed;\n              \n              let radius = baseRadius;\n              for (let i = 0; i < params.waves; i++) {\n                let noiseFactor = p.noise(\n                  p.cos(t + i) * params.noiseScale, \n                  p.sin(t + i) * params.noiseScale, \n                  noiseTime\n                );\n                radius += p.sin(t * (i+1) * params.complexity) * params.amplitude * noiseFactor;\n              }\n              \n              nextX = radius * p.cos(t);\n              nextY = radius * p.sin(t);\n              \n              nextX += p.sin(t * 3.5) * 20 * p.noise(noiseTime * 2, 0);\n              nextY += p.cos(t * 2.7) * 20 * p.noise(0, noiseTime * 2);\n              break;\n          }\n          \n          // Apply dynamic scaling to ensure pattern fits\n          nextX *= scaleFactor;\n          nextY *= scaleFactor;\n          \n          // Draw the line on both canvases\n          mainCanvas.line(prevX, prevY, nextX, nextY);\n          currentLayerCanvas.line(prevX, prevY, nextX, nextY);\n          \n          // Update previous position for next segment\n          prevX = nextX;\n          prevY = nextY;\n          \n          // Check if we've completed a cycle - back to the starting point\n          if (t > p.TWO_PI * 2 && isBackToStart(nextX, nextY)) {\n            hasCompleted = true;\n            console.log(\"Completed at t =\", t, \"after\", cycleCount, \"cycles\");\n            break;\n          }\n        }\n        \n        // Increment time\n        t += 0.015;\n        \n        // Update global rotation\n        globalAngle = (t / maxT) * p.TWO_PI;\n        \n        // Update progress\n        // If we've detected completion, set progress to 100%\n        // Otherwise base it on the percentage of maxT\n        const currentProgress = hasCompleted ? \n          100 : \n          Math.min(100, Math.round((t / maxT) * 100));\n          \n        if (currentProgress !== progress) {\n          setProgress(currentProgress);\n        }\n        \n        // Check if we've passed a multiple of 2Ï€ to track cycles\n        if (t >= p.TWO_PI * (cycleCount + 1)) {\n          cycleCount++;\n          console.log(\"Completed cycle:\", cycleCount);\n        }\n        \n        // End current push transforms\n        mainCanvas.pop();\n        currentLayerCanvas.pop();\n\n        // Check if drawing is complete\n        // Complete if we've detected a full cycle back to start or if we've exceeded maxT\n        if (hasCompleted || t > maxT) {\n          p.noLoop(); // Stop drawing when complete\n          setIsDrawing(false);\n          \n          // Make sure to end all open transforms\n          mainCanvas.pop();\n          // Safely pop any open layer transforms\n          for (let i = 0; i < layerCanvases.length; i++) {\n            try {\n              layerCanvases[i].pop();\n            } catch (e) {\n              // Ignore errors if there's no matching push\n              console.log(\"Note: Layer\", i, \"didn't need popping\");\n            }\n          }\n          \n          // Generate final output with black background and all layers\n          finalOutput = generateFinalOutput();\n          \n          // Notify parent that drawing is complete\n          onDrawingComplete && onDrawingComplete(finalOutput);\n        }\n      };\n      \n      // Generate a new random seed\n      p.generateNewSeed = () => {\n        currentSeed = Math.floor(p.random(1, 10001));\n        setSeed && setSeed(currentSeed);\n        resetSketch();\n      };\n      \n      // Change to a specific seed\n      p.setSeed = (newSeed) => {\n        currentSeed = newSeed;\n        resetSketch();\n      };\n    };\n\n    // Create a new p5 instance\n    p5Instance.current = new p5(sketch, canvasRef.current);\n    \n    // Cleanup function\n    return () => {\n      if (p5Instance.current) {\n        p5Instance.current.remove();\n      }\n    };\n  }, [seed]); // Re-initialize when seed changes\n\n  return (\n    <div className=\"spiro-canvas-container\">\n      {/* Title card is now outside the sketch box */}\n      <div className=\"spiro-title-card\">\n        {seed && (\n          <>\n            <h3>Spyro #{seed}</h3>\n            <p className=\"spiro-details\">\n              Creating a unique mathematical pattern...\n            </p>\n          </>\n        )}\n      </div>\n      \n      <div ref={canvasRef} className=\"canvas-wrapper\"></div>\n      \n      {isDrawing && (\n        <div className=\"progress-bar-container\">\n          <div className=\"progress-bar\" style={{ width: `${progress}%` }}></div>\n          <span className=\"progress-text\">{progress}%</span>\n        </div>\n      )}\n      {!isDrawing && (\n        <div className=\"canvas-complete\">\n          <span>Drawing complete!</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpiroCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}